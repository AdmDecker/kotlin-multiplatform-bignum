{"version":3,"file":"core.js","sources":["../../../../../src/jsMain/kotlin/com/ionspin/kotlin/bignum/integer/NativeBigIntegerArithmetic.kt","../../../../../src/commonMain/kotlin/com/ionspin/kotlin/bignum/integer/BigInteger.kt","kotlin/string.kt","../../../../../src/commonMain/kotlin/com/ionspin/kotlin/bignum/integer/BigIntegerExtensions.kt","../../../../../src/commonMain/kotlin/com/ionspin/kotlin/bignum/integer/Quadruple.kt","kotlin/UIntArray.kt","kotlin/UInt.kt","../../../../../src/commonMain/kotlin/com/ionspin/kotlin/bignum/integer/base32/BigInteger32Arithmetic.kt","generated/_Collections.kt","generated/_UArrays.kt","kotlin/ULong.kt","util/Standard.kt","generated/_Strings.kt","generated/_ArraysJs.kt","../../../../../src/commonMain/kotlin/com/ionspin/kotlin/bignum/integer/base63/BigInteger63Arithmetic.kt","kotlin/ULongArray.kt","../../../../../src/commonMain/kotlin/com/ionspin/kotlin/bignum/integer/concurrent/Placeholder.kt","../../../../../src/commonMain/kotlin/com/ionspin/kotlin/bignum/integer/util/DigitUtil.kt","../../../../../src/jsMain/kotlin/com/ionspin/kotlin/bignum/integer/util/block.kt","../../../../../../../../../../../dummy.kt","../../../../../src/jsMain/kotlin/com/ionspin/kotlin/bignum/integer/util/runTest.kt","../../../../../src/commonMain/kotlin/com/ionspin/kotlin/bignum/integer/Configuration.kt"],"sourcesContent":[null,null,"/*\n * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license\n * that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.text\n\nimport kotlin.js.RegExp\n\n/**\n * Converts the characters in the specified array to a string.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun String(chars: CharArray): String {\n    var result = \"\"\n    for (char in chars) {\n        result += char\n    }\n    return result\n}\n\n/**\n * Converts the characters from a portion of the specified array to a string.\n *\n * @throws IndexOutOfBoundsException if either [offset] or [length] are less than zero\n * or `offset + length` is out of [chars] array bounds.\n */\n@SinceKotlin(\"1.2\")\npublic actual fun String(chars: CharArray, offset: Int, length: Int): String {\n    if (offset < 0 || length < 0 || chars.size - offset < length)\n        throw IndexOutOfBoundsException(\"size: ${chars.size}; offset: $offset; length: $length\")\n    var result = \"\"\n    for (index in offset until offset + length) {\n        result += chars[index]\n    }\n    return result\n}\n\n/**\n * Returns a copy of this string converted to upper case using the rules of the default locale.\n *\n * @sample samples.text.Strings.toUpperCase\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toUpperCase(): String = asDynamic().toUpperCase()\n\n/**\n * Returns a copy of this string converted to lower case using the rules of the default locale.\n *\n * @sample samples.text.Strings.toLowerCase\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun String.toLowerCase(): String = asDynamic().toLowerCase()\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeIndexOf(str: String, fromIndex: Int): Int = asDynamic().indexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal actual inline fun String.nativeLastIndexOf(str: String, fromIndex: Int): Int = asDynamic().lastIndexOf(str, fromIndex)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeStartsWith(s: String, position: Int): Boolean = asDynamic().startsWith(s, position)\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeEndsWith(s: String): Boolean = asDynamic().endsWith(s)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int): String = asDynamic().substring(startIndex)\n\n@kotlin.internal.InlineOnly\npublic actual inline fun String.substring(startIndex: Int, endIndex: Int): String = asDynamic().substring(startIndex, endIndex)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.concat(str: String): String = asDynamic().concat(str)\n\n@kotlin.internal.InlineOnly\npublic inline fun String.match(regex: String): Array<String>? = asDynamic().match(regex)\n\n//native public fun String.trim(): String\n//TODO: String.replace to implement effective trimLeading and trimTrailing\n\n@kotlin.internal.InlineOnly\ninternal inline fun String.nativeReplace(pattern: RegExp, replacement: String): String = asDynamic().replace(pattern, replacement)\n\n@SinceKotlin(\"1.2\")\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual fun String.compareTo(other: String, ignoreCase: Boolean = false): Int {\n    if (ignoreCase) {\n        val n1 = this.length\n        val n2 = other.length\n        val min = minOf(n1, n2)\n        if (min == 0) return n1 - n2\n        var start = 0\n        while (true) {\n            val end = minOf(start + 16, min)\n            var s1 = this.substring(start, end)\n            var s2 = other.substring(start, end)\n            if (s1 != s2) {\n                s1 = s1.toUpperCase()\n                s2 = s2.toUpperCase()\n                if (s1 != s2) {\n                    s1 = s1.toLowerCase()\n                    s2 = s2.toLowerCase()\n                    if (s1 != s2) {\n                        return s1.compareTo(s2)\n                    }\n                }\n            }\n            if (end == min) break\n            start = end\n        }\n        return n1 - n2\n    } else {\n        return compareTo(other)\n    }\n}\n\n\nprivate val STRING_CASE_INSENSITIVE_ORDER = Comparator<String> { a, b -> a.compareTo(b, ignoreCase = true) }\n\n@SinceKotlin(\"1.2\")\npublic actual val String.Companion.CASE_INSENSITIVE_ORDER: Comparator<String>\n    get() = STRING_CASE_INSENSITIVE_ORDER\n",null,null,"/*\n * Copyright 2010-2019 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license \n * that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin\n\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline class UIntArray\n@Suppress(\"NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS\")\n@PublishedApi\ninternal constructor(@PublishedApi internal val storage: IntArray) : Collection<UInt> {\n\n    /** Creates a new array of the specified [size], with all elements initialized to zero. */\n    public constructor(size: Int) : this(IntArray(size))\n\n    /** Returns the array element at the given [index]. This method can be called using the index operator. */\n    public operator fun get(index: Int): UInt = storage[index].toUInt()\n\n    /** Sets the element at the given [index] to the given [value]. This method can be called using the index operator. */\n    public operator fun set(index: Int, value: UInt) {\n        storage[index] = value.toInt()\n    }\n\n    /** Returns the number of elements in the array. */\n    public override val size: Int get() = storage.size\n\n    /** Creates an iterator over the elements of the array. */\n    public override operator fun iterator(): UIntIterator = Iterator(storage)\n\n    private class Iterator(private val array: IntArray) : UIntIterator() {\n        private var index = 0\n        override fun hasNext() = index < array.size\n        override fun nextUInt() = if (index < array.size) array[index++].toUInt() else throw NoSuchElementException(index.toString())\n    }\n\n    override fun contains(element: UInt): Boolean = storage.contains(element.toInt())\n\n    override fun containsAll(elements: Collection<UInt>): Boolean = elements.all { storage.contains(it.toInt()) }\n\n    override fun isEmpty(): Boolean = this.storage.size == 0\n}\n\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray(size: Int, init: (Int) -> UInt): UIntArray {\n    return UIntArray(IntArray(size) { index -> init(index).toInt() })\n}\n\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun uintArrayOf(vararg elements: UInt): UIntArray = elements\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license \n * that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin\n\nimport kotlin.experimental.*\n\n@Suppress(\"NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline class UInt @PublishedApi internal constructor(@PublishedApi internal val data: Int) : Comparable<UInt> {\n\n    companion object {\n        /**\n         * A constant holding the minimum value an instance of UInt can have.\n         */\n        public const val MIN_VALUE: UInt = UInt(0)\n\n        /**\n         * A constant holding the maximum value an instance of UInt can have.\n         */\n        public const val MAX_VALUE: UInt = UInt(-1)\n\n        /**\n         * The number of bytes used to represent an instance of UInt in a binary form.\n         */\n        public const val SIZE_BYTES: Int = 4\n\n        /**\n         * The number of bits used to represent an instance of UInt in a binary form.\n         */\n        public const val SIZE_BITS: Int = 32\n    }\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UByte): Int = this.compareTo(other.toUInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UShort): Int = this.compareTo(other.toUInt())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    @Suppress(\"OVERRIDE_BY_INLINE\")\n    public override inline operator fun compareTo(other: UInt): Int = uintCompare(this.data, other.data)\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: ULong): Int = this.toULong().compareTo(other)\n\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UByte): UInt = this.plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UShort): UInt = this.plus(other.toUInt())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UInt): UInt = UInt(this.data.plus(other.data))\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: ULong): ULong = this.toULong().plus(other)\n\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UByte): UInt = this.minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UShort): UInt = this.minus(other.toUInt())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UInt): UInt = UInt(this.data.minus(other.data))\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: ULong): ULong = this.toULong().minus(other)\n\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UByte): UInt = this.times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UShort): UInt = this.times(other.toUInt())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UInt): UInt = UInt(this.data.times(other.data))\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: ULong): ULong = this.toULong().times(other)\n\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UByte): UInt = this.div(other.toUInt())\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UShort): UInt = this.div(other.toUInt())\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UInt): UInt = uintDivide(this, other)\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: ULong): ULong = this.toULong().div(other)\n\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UByte): UInt = this.rem(other.toUInt())\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UShort): UInt = this.rem(other.toUInt())\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UInt): UInt = uintRemainder(this, other)\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: ULong): ULong = this.toULong().rem(other)\n\n    /** Increments this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun inc(): UInt = UInt(data.inc())\n    /** Decrements this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun dec(): UInt = UInt(data.dec())\n\n    /** Creates a range from this value to the specified [other] value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rangeTo(other: UInt): UIntRange = UIntRange(this, other)\n\n    /** Shifts this value left by the [bitCount] number of bits. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun shl(bitCount: Int): UInt = UInt(data shl bitCount)\n    /** Shifts this value right by the [bitCount] number of bits, filling the leftmost bits with zeros. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun shr(bitCount: Int): UInt = UInt(data ushr bitCount)\n    /** Performs a bitwise AND operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun and(other: UInt): UInt = UInt(this.data and other.data)\n    /** Performs a bitwise OR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun or(other: UInt): UInt = UInt(this.data or other.data)\n    /** Performs a bitwise XOR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun xor(other: UInt): UInt = UInt(this.data xor other.data)\n    /** Inverts the bits in this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun inv(): UInt = UInt(data.inv())\n\n    @kotlin.internal.InlineOnly\n    public inline fun toByte(): Byte = data.toByte()\n    @kotlin.internal.InlineOnly\n    public inline fun toShort(): Short = data.toShort()\n    @kotlin.internal.InlineOnly\n    public inline fun toInt(): Int = data\n    @kotlin.internal.InlineOnly\n    public inline fun toLong(): Long = data.toLong() and 0xFFFF_FFFF\n\n    @kotlin.internal.InlineOnly\n    public inline fun toUByte(): UByte = data.toUByte()\n    @kotlin.internal.InlineOnly\n    public inline fun toUShort(): UShort = data.toUShort()\n    @kotlin.internal.InlineOnly\n    public inline fun toUInt(): UInt = this\n    @kotlin.internal.InlineOnly\n    public inline fun toULong(): ULong = ULong(data.toLong() and 0xFFFF_FFFF)\n\n    public override fun toString(): String = toLong().toString()\n\n}\n\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Byte.toUInt(): UInt = UInt(this.toInt())\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Short.toUInt(): UInt = UInt(this.toInt())\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Int.toUInt(): UInt = UInt(this)\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Long.toUInt(): UInt = UInt(this.toInt())\n",null,"/*\n * Copyright 2010-2019 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license \n * that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"CollectionsKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\n\n/**\n * Returns 1st *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component1(): T {\n    return get(0)\n}\n\n/**\n * Returns 2nd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component2(): T {\n    return get(1)\n}\n\n/**\n * Returns 3rd *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component3(): T {\n    return get(2)\n}\n\n/**\n * Returns 4th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component4(): T {\n    return get(3)\n}\n\n/**\n * Returns 5th *element* from the collection.\n */\n@kotlin.internal.InlineOnly\npublic inline operator fun <T> List<T>.component5(): T {\n    return get(4)\n}\n\n/**\n * Returns `true` if [element] is found in the collection.\n */\npublic operator fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.contains(element: T): Boolean {\n    if (this is Collection)\n        return contains(element)\n    return indexOf(element) >= 0\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\npublic fun <T> Iterable<T>.elementAt(index: Int): T {\n    if (this is List)\n        return get(index)\n    return elementAtOrElse(index) { throw IndexOutOfBoundsException(\"Collection doesn't contain element at index $index.\") }\n}\n\n/**\n * Returns an element at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAt(index: Int): T {\n    return get(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\npublic fun <T> Iterable<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    if (this is List)\n        return this.getOrElse(index, defaultValue)\n    if (index < 0)\n        return defaultValue(index)\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this collection.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\npublic fun <T> Iterable<T>.elementAtOrNull(index: Int): T? {\n    if (this is List)\n        return this.getOrNull(index)\n    if (index < 0)\n        return null\n    val iterator = iterator()\n    var count = 0\n    while (iterator.hasNext()) {\n        val element = iterator.next()\n        if (index == count++)\n            return element\n    }\n    return null\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.elementAtOrNull(index: Int): T? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.find(predicate: (T) -> Boolean): T? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.findLast(predicate: (T) -> Boolean): T? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.first(): T {\n    when (this) {\n        is List -> return this.first()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns first element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.first(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.first(predicate: (T) -> Boolean): T {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n}\n\n/**\n * Returns the first element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.firstOrNull(): T? {\n    when (this) {\n        is List -> {\n            if (isEmpty())\n                return null\n            else\n                return this[0]\n        }\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            return iterator.next()\n        }\n    }\n}\n\n/**\n * Returns the first element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.firstOrNull(): T? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first element matching the given [predicate], or `null` if element was not found.\n */\npublic inline fun <T> Iterable<T>.firstOrNull(predicate: (T) -> Boolean): T? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns an element at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this list.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> List<T>.getOrElse(index: Int, defaultValue: (Int) -> T): T {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns an element at the given [index] or `null` if the [index] is out of bounds of this list.\n */\npublic fun <T> List<T>.getOrNull(index: Int): T? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns first index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.indexOf(element: T): Int {\n    if (this is List) return this.indexOf(element)\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns first index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.indexOf(element: T): Int {\n    return indexOf(element)\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the first element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfFirst(predicate: (T) -> Boolean): Int {\n    var index = 0\n    for (item in this) {\n        if (predicate(item))\n            return index\n        index++\n    }\n    return -1\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the collection does not contain such element.\n */\npublic inline fun <T> Iterable<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (predicate(item))\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns index of the last element matching the given [predicate], or -1 if the list does not contain such element.\n */\npublic inline fun <T> List<T>.indexOfLast(predicate: (T) -> Boolean): Int {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (predicate(iterator.previous())) {\n            return iterator.nextIndex()\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the collection is empty.\n */\npublic fun <T> Iterable<T>.last(): T {\n    when (this) {\n        is List -> return this.last()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element.\n * @throws [NoSuchElementException] if the list is empty.\n */\npublic fun <T> List<T>.last(): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"List is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> Iterable<T>.last(predicate: (T) -> Boolean): T {\n    var last: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return last as T\n}\n\n/**\n * Returns the last element matching the given [predicate].\n * @throws [NoSuchElementException] if no such element is found.\n */\npublic inline fun <T> List<T>.last(predicate: (T) -> Boolean): T {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"List contains no element matching the predicate.\")\n}\n\n/**\n * Returns last index of [element], or -1 if the collection does not contain element.\n */\npublic fun <@kotlin.internal.OnlyInputTypes T> Iterable<T>.lastIndexOf(element: T): Int {\n    if (this is List) return this.lastIndexOf(element)\n    var lastIndex = -1\n    var index = 0\n    for (item in this) {\n        checkIndexOverflow(index)\n        if (element == item)\n            lastIndex = index\n        index++\n    }\n    return lastIndex\n}\n\n/**\n * Returns last index of [element], or -1 if the list does not contain element.\n */\n@Suppress(\"EXTENSION_SHADOWED_BY_MEMBER\") // false warning, extension takes precedence in some cases\npublic fun <@kotlin.internal.OnlyInputTypes T> List<T>.lastIndexOf(element: T): Int {\n    return lastIndexOf(element)\n}\n\n/**\n * Returns the last element, or `null` if the collection is empty.\n */\npublic fun <T> Iterable<T>.lastOrNull(): T? {\n    when (this) {\n        is List -> return if (isEmpty()) null else this[size - 1]\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            var last = iterator.next()\n            while (iterator.hasNext())\n                last = iterator.next()\n            return last\n        }\n    }\n}\n\n/**\n * Returns the last element, or `null` if the list is empty.\n */\npublic fun <T> List<T>.lastOrNull(): T? {\n    return if (isEmpty()) null else this[size - 1]\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> Iterable<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    var last: T? = null\n    for (element in this) {\n        if (predicate(element)) {\n            last = element\n        }\n    }\n    return last\n}\n\n/**\n * Returns the last element matching the given [predicate], or `null` if no such element was found.\n */\npublic inline fun <T> List<T>.lastOrNull(predicate: (T) -> Boolean): T? {\n    val iterator = this.listIterator(size)\n    while (iterator.hasPrevious()) {\n        val element = iterator.previous()\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random element from this collection.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.random(): T {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this collection using the specified source of randomness.\n * \n * @throws NoSuchElementException if this collection is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun <T> Collection<T>.random(random: Random): T {\n    if (isEmpty())\n        throw NoSuchElementException(\"Collection is empty.\")\n    return elementAt(random.nextInt(size))\n}\n\n/**\n * Returns the single element, or throws an exception if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.single(): T {\n    when (this) {\n        is List -> return this.single()\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                throw NoSuchElementException(\"Collection is empty.\")\n            val single = iterator.next()\n            if (iterator.hasNext())\n                throw IllegalArgumentException(\"Collection has more than one element.\")\n            return single\n        }\n    }\n}\n\n/**\n * Returns the single element, or throws an exception if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.single(): T {\n    return when (size) {\n        0 -> throw NoSuchElementException(\"List is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"List has more than one element.\")\n    }\n}\n\n/**\n * Returns the single element matching the given [predicate], or throws exception if there is no or more than one matching element.\n */\npublic inline fun <T> Iterable<T>.single(predicate: (T) -> Boolean): T {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Collection contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Collection contains no element matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as T\n}\n\n/**\n * Returns single element, or `null` if the collection is empty or has more than one element.\n */\npublic fun <T> Iterable<T>.singleOrNull(): T? {\n    when (this) {\n        is List -> return if (size == 1) this[0] else null\n        else -> {\n            val iterator = iterator()\n            if (!iterator.hasNext())\n                return null\n            val single = iterator.next()\n            if (iterator.hasNext())\n                return null\n            return single\n        }\n    }\n}\n\n/**\n * Returns single element, or `null` if the list is empty or has more than one element.\n */\npublic fun <T> List<T>.singleOrNull(): T? {\n    return if (size == 1) this[0] else null\n}\n\n/**\n * Returns the single element matching the given [predicate], or `null` if element was not found or more than one element was found.\n */\npublic inline fun <T> Iterable<T>.singleOrNull(predicate: (T) -> Boolean): T? {\n    var single: T? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a list containing all elements except first [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> Iterable<T>.drop(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return toList()\n    val list: ArrayList<T>\n    if (this is Collection<*>) {\n        val resultSize = size - n\n        if (resultSize <= 0)\n            return emptyList()\n        if (resultSize == 1)\n            return listOf(last())\n        list = ArrayList<T>(resultSize)\n        if (this is List<T>) {\n            if (this is RandomAccess) {\n                for (index in n until size)\n                    list.add(this[index])\n            } else {\n                for (item in listIterator(n))\n                    list.add(item)\n            }\n            return list\n        }\n    }\n    else {\n        list = ArrayList<T>()\n    }\n    var count = 0\n    for (item in this) {\n        if (count++ >= n) list.add(item)\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing all elements except last [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun <T> List<T>.dropLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    return take((size - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a list containing all elements except last elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> List<T>.dropLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            if (!predicate(iterator.previous())) {\n                return take(iterator.nextIndex() + 1)\n            }\n        }\n    }\n    return emptyList()\n}\n\n/**\n * Returns a list containing all elements except first elements that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun <T> Iterable<T>.dropWhile(predicate: (T) -> Boolean): List<T> {\n    var yielding = false\n    val list = ArrayList<T>()\n    for (item in this)\n        if (yielding)\n            list.add(item)\n        else if (!predicate(item)) {\n            list.add(item)\n            yielding = true\n        }\n    return list\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.filter(predicate: (T) -> Boolean): List<T> {\n    return filterTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing only elements matching the given [predicate].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T> Iterable<T>.filterIndexed(predicate: (index: Int, T) -> Boolean): List<T> {\n    return filterIndexedTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of an element and the element itself\n * and returns the result of predicate evaluation on the element.\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterIndexedTo(destination: C, predicate: (index: Int, T) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.add(element)\n    }\n    return destination\n}\n\n/**\n * Returns a list containing all elements that are instances of specified type parameter R.\n */\npublic inline fun <reified R> Iterable<*>.filterIsInstance(): List<@kotlin.internal.NoInfer R> {\n    return filterIsInstanceTo(ArrayList<R>())\n}\n\n/**\n * Appends all elements that are instances of specified type parameter R to the given [destination].\n */\npublic inline fun <reified R, C : MutableCollection<in R>> Iterable<*>.filterIsInstanceTo(destination: C): C {\n    for (element in this) if (element is R) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing all elements not matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.filterNot(predicate: (T) -> Boolean): List<T> {\n    return filterNotTo(ArrayList<T>(), predicate)\n}\n\n/**\n * Returns a list containing all elements that are not `null`.\n */\npublic fun <T : Any> Iterable<T?>.filterNotNull(): List<T> {\n    return filterNotNullTo(ArrayList<T>())\n}\n\n/**\n * Appends all elements that are not `null` to the given [destination].\n */\npublic fun <C : MutableCollection<in T>, T : Any> Iterable<T?>.filterNotNullTo(destination: C): C {\n    for (element in this) if (element != null) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements not matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterNotTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Appends all elements matching the given [predicate] to the given [destination].\n */\npublic inline fun <T, C : MutableCollection<in T>> Iterable<T>.filterTo(destination: C, predicate: (T) -> Boolean): C {\n    for (element in this) if (predicate(element)) destination.add(element)\n    return destination\n}\n\n/**\n * Returns a list containing elements at indices in the specified [indices] range.\n */\npublic fun <T> List<T>.slice(indices: IntRange): List<T> {\n    if (indices.isEmpty()) return listOf()\n    return this.subList(indices.start, indices.endInclusive + 1).toList()\n}\n\n/**\n * Returns a list containing elements at specified [indices].\n */\npublic fun <T> List<T>.slice(indices: Iterable<Int>): List<T> {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return emptyList()\n    val list = ArrayList<T>(size)\n    for (index in indices) {\n        list.add(get(index))\n    }\n    return list\n}\n\n/**\n * Returns a list containing first [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> Iterable<T>.take(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    if (this is Collection<T>) {\n        if (n >= size) return toList()\n        if (n == 1) return listOf(first())\n    }\n    var count = 0\n    val list = ArrayList<T>(n)\n    for (item in this) {\n        if (count++ == n)\n            break\n        list.add(item)\n    }\n    return list.optimizeReadOnlyList()\n}\n\n/**\n * Returns a list containing last [n] elements.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun <T> List<T>.takeLast(n: Int): List<T> {\n    require(n >= 0) { \"Requested element count $n is less than zero.\" }\n    if (n == 0) return emptyList()\n    val size = size\n    if (n >= size) return toList()\n    if (n == 1) return listOf(last())\n    val list = ArrayList<T>(n)\n    if (this is RandomAccess) {\n        for (index in size - n until size)\n            list.add(this[index])\n    } else {\n        for (item in listIterator(size - n))\n            list.add(item)\n    }\n    return list\n}\n\n/**\n * Returns a list containing last elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> List<T>.takeLastWhile(predicate: (T) -> Boolean): List<T> {\n    if (isEmpty())\n        return emptyList()\n    val iterator = listIterator(size)\n    while (iterator.hasPrevious()) {\n        if (!predicate(iterator.previous())) {\n            iterator.next()\n            val expectedSize = size - iterator.nextIndex()\n            if (expectedSize == 0) return emptyList()\n            return ArrayList<T>(expectedSize).apply {\n                while (iterator.hasNext())\n                    add(iterator.next())\n            }\n        }\n    }\n    return toList()\n}\n\n/**\n * Returns a list containing first elements satisfying the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun <T> Iterable<T>.takeWhile(predicate: (T) -> Boolean): List<T> {\n    val list = ArrayList<T>()\n    for (item in this) {\n        if (!predicate(item))\n            break\n        list.add(item)\n    }\n    return list\n}\n\n/**\n * Reverses elements in the list in-place.\n */\npublic expect fun <T> MutableList<T>.reverse(): Unit\n\n/**\n * Returns a list with elements in reversed order.\n */\npublic fun <T> Iterable<T>.reversed(): List<T> {\n    if (this is Collection && size <= 1) return toList()\n    val list = toMutableList()\n    list.reverse()\n    return list\n}\n\n/**\n * Sorts elements in the list in-place according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortBy(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareBy(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> MutableList<T>.sortByDescending(crossinline selector: (T) -> R?): Unit {\n    if (size > 1) sortWith(compareByDescending(selector))\n}\n\n/**\n * Sorts elements in the list in-place descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> MutableList<T>.sortDescending(): Unit {\n    sortWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sorted(): List<T> {\n    if (this is Collection) {\n        if (size <= 1) return this.toList()\n        @Suppress(\"UNCHECKED_CAST\")\n        return (toTypedArray<Comparable<T>>() as Array<T>).apply { sort() }.asList()\n    }\n    return toMutableList().apply { sort() }\n}\n\n/**\n * Returns a list of all elements sorted according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedBy(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareBy(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to natural sort order of the value returned by specified [selector] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.sortedByDescending(crossinline selector: (T) -> R?): List<T> {\n    return sortedWith(compareByDescending(selector))\n}\n\n/**\n * Returns a list of all elements sorted descending according to their natural sort order.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T : Comparable<T>> Iterable<T>.sortedDescending(): List<T> {\n    return sortedWith(reverseOrder())\n}\n\n/**\n * Returns a list of all elements sorted according to the specified [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Iterable<T>.sortedWith(comparator: Comparator<in T>): List<T> {\n    if (this is Collection) {\n       if (size <= 1) return this.toList()\n       @Suppress(\"UNCHECKED_CAST\")\n       return (toTypedArray<Any?>() as Array<T>).apply { sortWith(comparator) }.asList()\n    }\n    return toMutableList().apply { sortWith(comparator) }\n}\n\n/**\n * Returns an array of Boolean containing all of the elements of this collection.\n */\npublic fun Collection<Boolean>.toBooleanArray(): BooleanArray {\n    val result = BooleanArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Byte containing all of the elements of this collection.\n */\npublic fun Collection<Byte>.toByteArray(): ByteArray {\n    val result = ByteArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Char containing all of the elements of this collection.\n */\npublic fun Collection<Char>.toCharArray(): CharArray {\n    val result = CharArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Double containing all of the elements of this collection.\n */\npublic fun Collection<Double>.toDoubleArray(): DoubleArray {\n    val result = DoubleArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Float containing all of the elements of this collection.\n */\npublic fun Collection<Float>.toFloatArray(): FloatArray {\n    val result = FloatArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Int containing all of the elements of this collection.\n */\npublic fun Collection<Int>.toIntArray(): IntArray {\n    val result = IntArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Long containing all of the elements of this collection.\n */\npublic fun Collection<Long>.toLongArray(): LongArray {\n    val result = LongArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns an array of Short containing all of the elements of this collection.\n */\npublic fun Collection<Short>.toShortArray(): ShortArray {\n    val result = ShortArray(size)\n    var index = 0\n    for (element in this)\n        result[index++] = element\n    return result\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to elements of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K, V> Iterable<T>.associate(transform: (T) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the elements from the given collection indexed by the key\n * returned from [keySelector] function applied to each element.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K> Iterable<T>.associateBy(keySelector: (T) -> K): Map<K, T> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, T>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n */\npublic inline fun <T, K, V> Iterable<T>.associateBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, V> {\n    val capacity = mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each element of the given collection\n * and value is the element itself.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to elements of the given collection.\n * \n * If any two elements would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each element of the given collection.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateTo(destination: M, transform: (T) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are elements from the given collection and values are\n * produced by the [valueSelector] function applied to each element.\n * \n * If any two elements are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original collection.\n * \n * @sample samples.collections.Collections.Transformations.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V> Iterable<K>.associateWith(valueSelector: (K) -> V): Map<K, V> {\n    val result = LinkedHashMap<K, V>(mapCapacity(collectionSizeOrDefault(10)).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each element of the given collection,\n * where key is the element itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two elements are equal, the last one overwrites the former value in the map.\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <K, V, M : MutableMap<in K, in V>> Iterable<K>.associateWithTo(destination: M, valueSelector: (K) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all elements to the given [destination] collection.\n */\npublic fun <T, C : MutableCollection<in T>> Iterable<T>.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all elements.\n */\npublic fun <T> Iterable<T>.toHashSet(): HashSet<T> {\n    return toCollection(HashSet<T>(mapCapacity(collectionSizeOrDefault(12))))\n}\n\n/**\n * Returns a [List] containing all elements.\n */\npublic fun <T> Iterable<T>.toList(): List<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptyList()\n            1 -> listOf(if (this is List) get(0) else iterator().next())\n            else -> this.toMutableList()\n        }\n    }\n    return this.toMutableList().optimizeReadOnlyList()\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Iterable<T>.toMutableList(): MutableList<T> {\n    if (this is Collection<T>)\n        return this.toMutableList()\n    return toCollection(ArrayList<T>())\n}\n\n/**\n * Returns a [MutableList] filled with all elements of this collection.\n */\npublic fun <T> Collection<T>.toMutableList(): MutableList<T> {\n    return ArrayList(this)\n}\n\n/**\n * Returns a [Set] of all elements.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toSet(): Set<T> {\n    if (this is Collection) {\n        return when (size) {\n            0 -> emptySet()\n            1 -> setOf(if (this is List) this[0] else iterator().next())\n            else -> toCollection(LinkedHashSet<T>(mapCapacity(size)))\n        }\n    }\n    return toCollection(LinkedHashSet<T>()).optimizeReadOnlySet()\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each element of original collection.\n */\npublic inline fun <T, R> Iterable<T>.flatMap(transform: (T) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each element of original collection, to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(destination: C, transform: (T) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and returns a map where each group key is associated with a list of corresponding elements.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K> Iterable<T>.groupBy(keySelector: (T) -> K): Map<K, List<T>> {\n    return groupByTo(LinkedHashMap<K, MutableList<T>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original collection.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V> Iterable<T>.groupBy(keySelector: (T) -> K, valueTransform: (T) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups elements of the original collection by the key returned by the given [keySelector] function\n * applied to each element and puts to the [destination] map each group key associated with a list of corresponding elements.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <T, K, M : MutableMap<in K, MutableList<T>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<T>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each element of the original collection\n * by the key returned by the given [keySelector] function applied to the element\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <T, K, V, M : MutableMap<in K, MutableList<V>>> Iterable<T>.groupByTo(destination: M, keySelector: (T) -> K, valueTransform: (T) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a collection to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each element.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, K> Iterable<T>.groupingBy(crossinline keySelector: (T) -> K): Grouping<T, K> {\n    return object : Grouping<T, K> {\n        override fun sourceIterator(): Iterator<T> = this@groupingBy.iterator()\n        override fun keyOf(element: T): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element in the original collection.\n */\npublic inline fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R> {\n    return mapTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R> Iterable<T>.mapIndexed(transform: (index: Int, T) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(collectionSizeOrDefault(10)), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element and its index in the original collection.\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapIndexedNotNull(transform: (index: Int, T) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapIndexedNotNullTo(destination: C, transform: (index: Int, T) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element and its index in the original collection\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of an element and the element itself\n * and returns the result of the transform applied to the element.\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapIndexedTo(destination: C, transform: (index: Int, T) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(checkIndexOverflow(index++), item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each element in the original collection.\n */\npublic inline fun <T, R : Any> Iterable<T>.mapNotNull(transform: (T) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each element in the original collection\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapNotNullTo(destination: C, transform: (T) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each element of the original collection\n * and appends the results to the given [destination].\n */\npublic inline fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapTo(destination: C, transform: (T) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each element of the original collection.\n */\npublic fun <T> Iterable<T>.withIndex(): Iterable<IndexedValue<T>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns a list containing only distinct elements from the given collection.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n */\npublic fun <T> Iterable<T>.distinct(): List<T> {\n    return this.toMutableSet().toList()\n}\n\n/**\n * Returns a list containing only elements from the given collection\n * having distinct keys returned by the given [selector] function.\n * \n * The elements in the resulting list are in the same order as they were in the source collection.\n */\npublic inline fun <T, K> Iterable<T>.distinctBy(selector: (T) -> K): List<T> {\n    val set = HashSet<K>()\n    val list = ArrayList<T>()\n    for (e in this) {\n        val key = selector(e)\n        if (set.add(key))\n            list.add(e)\n    }\n    return list\n}\n\n/**\n * Returns a set containing all elements that are contained by both this set and the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.intersect(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.retainAll(other)\n    return set\n}\n\n/**\n * Returns a set containing all elements that are contained by this collection and not contained by the specified collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic infix fun <T> Iterable<T>.subtract(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.removeAll(other)\n    return set\n}\n\n/**\n * Returns a mutable set containing all distinct elements from the given collection.\n * \n * The returned set preserves the element iteration order of the original collection.\n */\npublic fun <T> Iterable<T>.toMutableSet(): MutableSet<T> {\n    return when (this) {\n        is Collection<T> -> LinkedHashSet(this)\n        else -> toCollection(LinkedHashSet<T>())\n    }\n}\n\n/**\n * Returns a set containing all distinct elements from both collections.\n * \n * The returned set preserves the element iteration order of the original collection.\n * Those elements of the [other] collection that are unique are iterated in the end\n * in the order of the [other] collection.\n */\npublic infix fun <T> Iterable<T>.union(other: Iterable<T>): Set<T> {\n    val set = this.toMutableSet()\n    set.addAll(other)\n    return set\n}\n\n/**\n * Returns `true` if all elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun <T> Iterable<T>.all(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if collection has at least one element.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun <T> Iterable<T>.any(): Boolean {\n    if (this is Collection) return !isEmpty()\n    return iterator().hasNext()\n}\n\n/**\n * Returns `true` if at least one element matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun <T> Iterable<T>.any(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return false\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the number of elements in this collection.\n */\npublic fun <T> Iterable<T>.count(): Int {\n    if (this is Collection) return size\n    var count = 0\n    for (element in this) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Returns the number of elements in this collection.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.count(): Int {\n    return size\n}\n\n/**\n * Returns the number of elements matching the given [predicate].\n */\npublic inline fun <T> Iterable<T>.count(predicate: (T) -> Boolean): Int {\n    if (this is Collection && isEmpty()) return 0\n    var count = 0\n    for (element in this) if (predicate(element)) checkCountOverflow(++count)\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <T, R> Iterable<T>.fold(initial: R, operation: (acc: R, T) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself, and calculates the next accumulator value.\n */\npublic inline fun <T, R> Iterable<T>.foldIndexed(initial: R, operation: (index: Int, acc: R, T) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(checkIndexOverflow(index++), accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRight(initial: R, operation: (T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            accumulator = operation(iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <T, R> List<T>.foldRightIndexed(initial: R, operation: (index: Int, T, acc: R) -> R): R {\n    var accumulator = initial\n    if (!isEmpty()) {\n        val iterator = listIterator(size)\n        while (iterator.hasPrevious()) {\n            val index = iterator.previousIndex()\n            accumulator = operation(index, iterator.previous(), accumulator)\n        }\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each element.\n */\n@kotlin.internal.HidesMembers\npublic inline fun <T> Iterable<T>.forEach(action: (T) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each element, providing sequential index with the element.\n * @param [action] function that takes the index of an element and the element itself\n * and performs the desired action on the element.\n */\npublic inline fun <T> Iterable<T>.forEachIndexed(action: (index: Int, T) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(checkIndexOverflow(index++), item)\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.max(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.max(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    if (max.isNaN()) return max\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the largest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.max(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first element yielding the largest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.maxBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var maxElem = iterator.next()\n    var maxValue = selector(maxElem)\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first element having the largest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.maxWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var max = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Double>.min(): Double? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n * \n * If any of elements is `NaN` returns `NaN`.\n */\n@SinceKotlin(\"1.1\")\npublic fun Iterable<Float>.min(): Float? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    if (min.isNaN()) return min\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (e.isNaN()) return e\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the smallest element or `null` if there are no elements.\n */\npublic fun <T : Comparable<T>> Iterable<T>.min(): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first element yielding the smallest value of the given function or `null` if there are no elements.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <T, R : Comparable<R>> Iterable<T>.minBy(selector: (T) -> R): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var minElem = iterator.next()\n    var minValue = selector(minElem)\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first element having the smallest value according to the provided [comparator] or `null` if there are no elements.\n */\npublic fun <T> Iterable<T>.minWith(comparator: Comparator<in T>): T? {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return null\n    var min = iterator.next()\n    while (iterator.hasNext()) {\n        val e = iterator.next()\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the collection has no elements.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun <T> Iterable<T>.none(): Boolean {\n    if (this is Collection) return isEmpty()\n    return !iterator().hasNext()\n}\n\n/**\n * Returns `true` if no elements match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun <T> Iterable<T>.none(predicate: (T) -> Boolean): Boolean {\n    if (this is Collection && isEmpty()) return true\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each element and returns the collection itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <T, C : Iterable<T>> C.onEach(action: (T) -> Unit): C {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right to current accumulator value and each element.\n */\npublic inline fun <S, T : S> Iterable<T>.reduce(operation: (acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first element and applying [operation] from left to right\n * to current accumulator value and each element with its index in the original collection.\n * @param [operation] function that takes the index of an element, current accumulator value\n * and the element itself and calculates the next accumulator value.\n */\npublic inline fun <S, T : S> Iterable<T>.reduceIndexed(operation: (index: Int, acc: S, T) -> S): S {\n    val iterator = this.iterator()\n    if (!iterator.hasNext()) throw UnsupportedOperationException(\"Empty collection can't be reduced.\")\n    var index = 1\n    var accumulator: S = iterator.next()\n    while (iterator.hasNext()) {\n        accumulator = operation(checkIndexOverflow(index++), accumulator, iterator.next())\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left to each element and current accumulator value.\n */\npublic inline fun <S, T : S> List<T>.reduceRight(operation: (T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        accumulator = operation(iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last element and applying [operation] from right to left\n * to each element with its index in the original list and current accumulator value.\n * @param [operation] function that takes the index of an element, the element itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <S, T : S> List<T>.reduceRightIndexed(operation: (index: Int, T, acc: S) -> S): S {\n    val iterator = listIterator(size)\n    if (!iterator.hasPrevious())\n        throw UnsupportedOperationException(\"Empty list can't be reduced.\")\n    var accumulator: S = iterator.previous()\n    while (iterator.hasPrevious()) {\n        val index = iterator.previousIndex()\n        accumulator = operation(index, iterator.previous(), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumBy(selector: (T) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each element in the collection.\n */\npublic inline fun <T> Iterable<T>.sumByDouble(selector: (T) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> Iterable<T?>.requireNoNulls(): Iterable<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as Iterable<T>\n}\n\n/**\n * Returns an original collection containing all the non-`null` elements, throwing an [IllegalArgumentException] if there are any `null` elements.\n */\npublic fun <T : Any> List<T?>.requireNoNulls(): List<T> {\n    for (element in this) {\n        if (element == null) {\n            throw IllegalArgumentException(\"null element found in $this.\")\n        }\n    }\n    @Suppress(\"UNCHECKED_CAST\")\n    return this as List<T>\n}\n\n/**\n * Splits this collection into a list of lists each not exceeding the given [size].\n * \n * The last list in the resulting list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.chunked(size: Int): List<List<T>> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this collection into several lists each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each list.\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last list may have less elements than the given [size].\n * \n * @param size the number of elements to take in each list, must be positive and can be greater than the number of elements in this collection.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.chunked(size: Int, transform: (List<T>) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\npublic operator fun <T> Iterable<T>.minus(element: T): List<T> {\n    val result = ArrayList<T>(collectionSizeOrDefault(10))\n    var removed = false\n    return this.filterTo(result) { if (!removed && it == element) { removed = true; false } else true }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] array.\n * \n * The [elements] array may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Array<out T>): List<T> {\n    if (elements.isEmpty()) return this.toList()\n    val other = elements.toHashSet()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] collection.\n * \n * The [elements] collection may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Iterable<T>): List<T> {\n    val other = elements.convertToSetForSetOperationWith(this)\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection except the elements contained in the given [elements] sequence.\n * \n * The [elements] sequence may be converted to a [HashSet] to speed up the operation, thus the elements are required to have\n * a correct and stable implementation of `hashCode()` that doesn't change between successive invocations.\n */\npublic operator fun <T> Iterable<T>.minus(elements: Sequence<T>): List<T> {\n    val other = elements.toHashSet()\n    if (other.isEmpty())\n        return this.toList()\n    return this.filterNot { it in other }\n}\n\n/**\n * Returns a list containing all elements of the original collection without the first occurrence of the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.minusElement(element: T): List<T> {\n    return minus(element)\n}\n\n/**\n * Splits the original collection into pair of lists,\n * where *first* list contains elements for which [predicate] yielded `true`,\n * while *second* list contains elements for which [predicate] yielded `false`.\n */\npublic inline fun <T> Iterable<T>.partition(predicate: (T) -> Boolean): Pair<List<T>, List<T>> {\n    val first = ArrayList<T>()\n    val second = ArrayList<T>()\n    for (element in this) {\n        if (predicate(element)) {\n            first.add(element)\n        } else {\n            second.add(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Iterable<T>.plus(element: T): List<T> {\n    if (this is Collection) return this.plus(element)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\npublic operator fun <T> Collection<T>.plus(element: T): List<T> {\n    val result = ArrayList<T>(size + 1)\n    result.addAll(this)\n    result.add(element)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Array<out T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] array.\n */\npublic operator fun <T> Collection<T>.plus(elements: Array<out T>): List<T> {\n    val result = ArrayList<T>(this.size + elements.size)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Iterable<T>): List<T> {\n    if (this is Collection) return this.plus(elements)\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] collection.\n */\npublic operator fun <T> Collection<T>.plus(elements: Iterable<T>): List<T> {\n    if (elements is Collection) {\n        val result = ArrayList<T>(this.size + elements.size)\n        result.addAll(this)\n        result.addAll(elements)\n        return result\n    } else {\n        val result = ArrayList<T>(this)\n        result.addAll(elements)\n        return result\n    }\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Iterable<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>()\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then all elements of the given [elements] sequence.\n */\npublic operator fun <T> Collection<T>.plus(elements: Sequence<T>): List<T> {\n    val result = ArrayList<T>(this.size + 10)\n    result.addAll(this)\n    result.addAll(elements)\n    return result\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list containing all elements of the original collection and then the given [element].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Collection<T>.plusElement(element: T): List<T> {\n    return plus(element)\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this collection with the given [step], where each\n * snapshot is a list.\n * \n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<List<T>> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val result = ArrayList<List<T>>((thisSize + step - 1) / step)\n        var index = 0\n        while (index < thisSize) {\n            val windowSize = size.coerceAtMost(thisSize - index)\n            if (windowSize < size && !partialWindows) break\n            result.add(List(windowSize) { this[it + index] })\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<List<T>>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = false).forEach {\n        result.add(it)\n    }\n    return result\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each list representing a view over the window of the given [size]\n * sliding along this collection with the given [step].\n * \n * Note that the list passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last lists may have less elements than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this collection.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <T, R> Iterable<T>.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (List<T>) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    if (this is RandomAccess && this is List) {\n        val thisSize = this.size\n        val result = ArrayList<R>((thisSize + step - 1) / step)\n        val window = MovingSubList(this)\n        var index = 0\n        while (index < thisSize) {\n            window.move(index, (index + size).coerceAtMost(thisSize))\n            if (!partialWindows && window.size < size) break\n            result.add(transform(window))\n            index += step\n        }\n        return result\n    }\n    val result = ArrayList<R>()\n    windowedIterator(iterator(), size, step, partialWindows, reuseBuffer = true).forEach {\n        result.add(transform(it))\n    }\n    return result\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and the [other] array with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Array<out R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] array with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Array<out R>, transform: (a: T, b: R) -> V): List<V> {\n    val arraySize = other.size\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), arraySize))\n    var i = 0\n    for (element in this) {\n        if (i >= arraySize) break\n        list.add(transform(element, other[i++]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs built from the elements of `this` collection and [other] collection with the same index.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterable\n */\npublic infix fun <T, R> Iterable<T>.zip(other: Iterable<R>): List<Pair<T, R>> {\n    return zip(other) { t1, t2 -> t1 to t2 }\n}\n\n/**\n * Returns a list of values built from the elements of `this` collection and the [other] collection with the same index\n * using the provided [transform] function applied to each pair of elements.\n * The returned list has length of the shortest collection.\n * \n * @sample samples.collections.Iterables.Operations.zipIterableWithTransform\n */\npublic inline fun <T, R, V> Iterable<T>.zip(other: Iterable<R>, transform: (a: T, b: R) -> V): List<V> {\n    val first = iterator()\n    val second = other.iterator()\n    val list = ArrayList<V>(minOf(collectionSizeOrDefault(10), other.collectionSizeOrDefault(10)))\n    while (first.hasNext() && second.hasNext()) {\n        list.add(transform(first.next(), second.next()))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun <T> Iterable<T>.zipWithNext(): List<Pair<T, T>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent elements in this collection.\n * \n * The returned list is empty if this collection contains less than two elements.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <T, R> Iterable<T>.zipWithNext(transform: (a: T, b: T) -> R): List<R> {\n    val iterator = iterator()\n    if (!iterator.hasNext()) return emptyList()\n    val result = mutableListOf<R>()\n    var current = iterator.next()\n    while (iterator.hasNext()) {\n        val next = iterator.next()\n        result.add(transform(current, next))\n        current = next\n    }\n    return result\n}\n\n/**\n * Appends the string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinTo\n */\npublic fun <T, A : Appendable> Iterable<T>.joinTo(buffer: A, separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): A {\n    buffer.append(prefix)\n    var count = 0\n    for (element in this) {\n        if (++count > 1) buffer.append(separator)\n        if (limit < 0 || count <= limit) {\n            buffer.appendElement(element, transform)\n        } else break\n    }\n    if (limit >= 0 && count > limit) buffer.append(truncated)\n    buffer.append(postfix)\n    return buffer\n}\n\n/**\n * Creates a string from all the elements separated using [separator] and using the given [prefix] and [postfix] if supplied.\n * \n * If the collection could be huge, you can specify a non-negative value of [limit], in which case only the first [limit]\n * elements will be appended, followed by the [truncated] string (which defaults to \"...\").\n * \n * @sample samples.collections.Collections.Transformations.joinToString\n */\npublic fun <T> Iterable<T>.joinToString(separator: CharSequence = \", \", prefix: CharSequence = \"\", postfix: CharSequence = \"\", limit: Int = -1, truncated: CharSequence = \"...\", transform: ((T) -> CharSequence)? = null): String {\n    return joinTo(StringBuilder(), separator, prefix, postfix, limit, truncated, transform).toString()\n}\n\n/**\n * Returns this collection as an [Iterable].\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> Iterable<T>.asIterable(): Iterable<T> {\n    return this\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original collection returning its elements when being iterated.\n * \n * @sample samples.collections.Sequences.Building.sequenceFromCollection\n */\npublic fun <T> Iterable<T>.asSequence(): Sequence<T> {\n    return Sequence { this.iterator() }\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfByte\")\npublic fun Iterable<Byte>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfShort\")\npublic fun Iterable<Short>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfInt\")\npublic fun Iterable<Int>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfLong\")\npublic fun Iterable<Long>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfFloat\")\npublic fun Iterable<Float>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns an average value of elements in the collection.\n */\n@kotlin.jvm.JvmName(\"averageOfDouble\")\npublic fun Iterable<Double>.average(): Double {\n    var sum: Double = 0.0\n    var count: Int = 0\n    for (element in this) {\n        sum += element\n        checkCountOverflow(++count)\n    }\n    return if (count == 0) Double.NaN else sum / count\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfByte\")\npublic fun Iterable<Byte>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfShort\")\npublic fun Iterable<Short>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfInt\")\npublic fun Iterable<Int>.sum(): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfLong\")\npublic fun Iterable<Long>.sum(): Long {\n    var sum: Long = 0L\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfFloat\")\npublic fun Iterable<Float>.sum(): Float {\n    var sum: Float = 0.0f\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all elements in the collection.\n */\n@kotlin.jvm.JvmName(\"sumOfDouble\")\npublic fun Iterable<Double>.sum(): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += element\n    }\n    return sum\n}\n\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license \n * that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"UArraysKt\")\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.random(): UInt {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.random(): ULong {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.random(): UByte {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.random(): UShort {\n    return random(Random)\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.random(random: Random): UInt {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.random(random: Random): ULong {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.random(random: Random): UByte {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns a random element from this array using the specified source of randomness.\n * \n * @throws NoSuchElementException if this array is empty.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.random(random: Random): UShort {\n    if (isEmpty())\n        throw NoSuchElementException(\"Array is empty.\")\n    return get(random.nextInt(size))\n}\n\n/**\n * Returns an array of type [ByteArray], which is a view of this array where each element is a signed reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.asByteArray(): ByteArray {\n    return storage\n}\n\n/**\n * Returns an array of type [IntArray], which is a view of this array where each element is a signed reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.asIntArray(): IntArray {\n    return storage\n}\n\n/**\n * Returns an array of type [LongArray], which is a view of this array where each element is a signed reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.asLongArray(): LongArray {\n    return storage\n}\n\n/**\n * Returns an array of type [ShortArray], which is a view of this array where each element is a signed reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.asShortArray(): ShortArray {\n    return storage\n}\n\n/**\n * Returns an array of type [UByteArray], which is a view of this array where each element is an unsigned reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.asUByteArray(): UByteArray {\n    return UByteArray(this)\n}\n\n/**\n * Returns an array of type [UIntArray], which is a view of this array where each element is an unsigned reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.asUIntArray(): UIntArray {\n    return UIntArray(this)\n}\n\n/**\n * Returns an array of type [ULongArray], which is a view of this array where each element is an unsigned reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.asULongArray(): ULongArray {\n    return ULongArray(this)\n}\n\n/**\n * Returns an array of type [UShortArray], which is a view of this array where each element is an unsigned reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.asUShortArray(): UShortArray {\n    return UShortArray(this)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun UIntArray.contentEquals(other: UIntArray): Boolean {\n    return storage.contentEquals(other.storage)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun ULongArray.contentEquals(other: ULongArray): Boolean {\n    return storage.contentEquals(other.storage)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun UByteArray.contentEquals(other: UByteArray): Boolean {\n    return storage.contentEquals(other.storage)\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic infix fun UShortArray.contentEquals(other: UShortArray): Boolean {\n    return storage.contentEquals(other.storage)\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.contentHashCode(): Int {\n    return storage.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.contentHashCode(): Int {\n    return storage.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.contentHashCode(): Int {\n    return storage.contentHashCode()\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.contentHashCode(): Int {\n    return storage.contentHashCode()\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.contentToString(): String {\n    return joinToString(\", \", \"[\", \"]\")\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.contentToString(): String {\n    return joinToString(\", \", \"[\", \"]\")\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.contentToString(): String {\n    return joinToString(\", \", \"[\", \"]\")\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.contentToString(): String {\n    return joinToString(\", \", \"[\", \"]\")\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.copyInto(destination: UIntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): UIntArray {\n    storage.copyInto(destination.storage, destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.copyInto(destination: ULongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ULongArray {\n    storage.copyInto(destination.storage, destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.copyInto(destination: UByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): UByteArray {\n    storage.copyInto(destination.storage, destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.copyInto(destination: UShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): UShortArray {\n    storage.copyInto(destination.storage, destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.copyOf(): UIntArray {\n    return UIntArray(storage.copyOf())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.copyOf(): ULongArray {\n    return ULongArray(storage.copyOf())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.copyOf(): UByteArray {\n    return UByteArray(storage.copyOf())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.copyOf(): UShortArray {\n    return UShortArray(storage.copyOf())\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.copyOf(newSize: Int): UIntArray {\n    return UIntArray(storage.copyOf(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.copyOf(newSize: Int): ULongArray {\n    return ULongArray(storage.copyOf(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.copyOf(newSize: Int): UByteArray {\n    return UByteArray(storage.copyOf(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.copyOf(newSize: Int): UShortArray {\n    return UShortArray(storage.copyOf(newSize))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.copyOfRange(fromIndex: Int, toIndex: Int): UIntArray {\n    return UIntArray(storage.copyOfRange(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.copyOfRange(fromIndex: Int, toIndex: Int): ULongArray {\n    return ULongArray(storage.copyOfRange(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.copyOfRange(fromIndex: Int, toIndex: Int): UByteArray {\n    return UByteArray(storage.copyOfRange(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.copyOfRange(fromIndex: Int, toIndex: Int): UShortArray {\n    return UShortArray(storage.copyOfRange(fromIndex, toIndex))\n}\n\n/**\n * Returns an array of type [ByteArray], which is a copy of this array where each element is a signed reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UByteArray.toByteArray(): ByteArray {\n    return storage.copyOf()\n}\n\n/**\n * Returns an array of type [IntArray], which is a copy of this array where each element is a signed reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UIntArray.toIntArray(): IntArray {\n    return storage.copyOf()\n}\n\n/**\n * Returns an array of type [LongArray], which is a copy of this array where each element is a signed reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray.toLongArray(): LongArray {\n    return storage.copyOf()\n}\n\n/**\n * Returns an array of type [ShortArray], which is a copy of this array where each element is a signed reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun UShortArray.toShortArray(): ShortArray {\n    return storage.copyOf()\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UIntArray.toTypedArray(): Array<UInt> {\n    return Array(size) { index -> this[index] }\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun ULongArray.toTypedArray(): Array<ULong> {\n    return Array(size) { index -> this[index] }\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UByteArray.toTypedArray(): Array<UByte> {\n    return Array(size) { index -> this[index] }\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic fun UShortArray.toTypedArray(): Array<UShort> {\n    return Array(size) { index -> this[index] }\n}\n\n/**\n * Returns an array of type [UByteArray], which is a copy of this array where each element is an unsigned reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.toUByteArray(): UByteArray {\n    return UByteArray(this.copyOf())\n}\n\n/**\n * Returns an array of type [UIntArray], which is a copy of this array where each element is an unsigned reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.toUIntArray(): UIntArray {\n    return UIntArray(this.copyOf())\n}\n\n/**\n * Returns an array of type [ULongArray], which is a copy of this array where each element is an unsigned reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.toULongArray(): ULongArray {\n    return ULongArray(this.copyOf())\n}\n\n/**\n * Returns an array of type [UShortArray], which is a copy of this array where each element is an unsigned reinterpretation\n * of the corresponding element of this array.\n */\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.toUShortArray(): UShortArray {\n    return UShortArray(this.copyOf())\n}\n\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license \n * that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin\n\nimport kotlin.experimental.*\n\n@Suppress(\"NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS\")\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline class ULong @PublishedApi internal constructor(@PublishedApi internal val data: Long) : Comparable<ULong> {\n\n    companion object {\n        /**\n         * A constant holding the minimum value an instance of ULong can have.\n         */\n        public const val MIN_VALUE: ULong = ULong(0)\n\n        /**\n         * A constant holding the maximum value an instance of ULong can have.\n         */\n        public const val MAX_VALUE: ULong = ULong(-1)\n\n        /**\n         * The number of bytes used to represent an instance of ULong in a binary form.\n         */\n        public const val SIZE_BYTES: Int = 8\n\n        /**\n         * The number of bits used to represent an instance of ULong in a binary form.\n         */\n        public const val SIZE_BITS: Int = 64\n    }\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UByte): Int = this.compareTo(other.toULong())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UShort): Int = this.compareTo(other.toULong())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    public inline operator fun compareTo(other: UInt): Int = this.compareTo(other.toULong())\n\n    /**\n     * Compares this value with the specified value for order.\n     * Returns zero if this value is equal to the specified other value, a negative number if it's less than other,\n     * or a positive number if it's greater than other.\n     */\n    @kotlin.internal.InlineOnly\n    @Suppress(\"OVERRIDE_BY_INLINE\")\n    public override inline operator fun compareTo(other: ULong): Int = ulongCompare(this.data, other.data)\n\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UByte): ULong = this.plus(other.toULong())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UShort): ULong = this.plus(other.toULong())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: UInt): ULong = this.plus(other.toULong())\n    /** Adds the other value to this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun plus(other: ULong): ULong = ULong(this.data.plus(other.data))\n\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UByte): ULong = this.minus(other.toULong())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UShort): ULong = this.minus(other.toULong())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: UInt): ULong = this.minus(other.toULong())\n    /** Subtracts the other value from this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun minus(other: ULong): ULong = ULong(this.data.minus(other.data))\n\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UByte): ULong = this.times(other.toULong())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UShort): ULong = this.times(other.toULong())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: UInt): ULong = this.times(other.toULong())\n    /** Multiplies this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun times(other: ULong): ULong = ULong(this.data.times(other.data))\n\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UByte): ULong = this.div(other.toULong())\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UShort): ULong = this.div(other.toULong())\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: UInt): ULong = this.div(other.toULong())\n    /** Divides this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun div(other: ULong): ULong = ulongDivide(this, other)\n\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UByte): ULong = this.rem(other.toULong())\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UShort): ULong = this.rem(other.toULong())\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: UInt): ULong = this.rem(other.toULong())\n    /** Calculates the remainder of dividing this value by the other value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rem(other: ULong): ULong = ulongRemainder(this, other)\n\n    /** Increments this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun inc(): ULong = ULong(data.inc())\n    /** Decrements this value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun dec(): ULong = ULong(data.dec())\n\n    /** Creates a range from this value to the specified [other] value. */\n    @kotlin.internal.InlineOnly\n    public inline operator fun rangeTo(other: ULong): ULongRange = ULongRange(this, other)\n\n    /** Shifts this value left by the [bitCount] number of bits. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun shl(bitCount: Int): ULong = ULong(data shl bitCount)\n    /** Shifts this value right by the [bitCount] number of bits, filling the leftmost bits with zeros. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun shr(bitCount: Int): ULong = ULong(data ushr bitCount)\n    /** Performs a bitwise AND operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun and(other: ULong): ULong = ULong(this.data and other.data)\n    /** Performs a bitwise OR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun or(other: ULong): ULong = ULong(this.data or other.data)\n    /** Performs a bitwise XOR operation between the two values. */\n    @kotlin.internal.InlineOnly\n    public inline infix fun xor(other: ULong): ULong = ULong(this.data xor other.data)\n    /** Inverts the bits in this value. */\n    @kotlin.internal.InlineOnly\n    public inline fun inv(): ULong = ULong(data.inv())\n\n    @kotlin.internal.InlineOnly\n    public inline fun toByte(): Byte = data.toByte()\n    @kotlin.internal.InlineOnly\n    public inline fun toShort(): Short = data.toShort()\n    @kotlin.internal.InlineOnly\n    public inline fun toInt(): Int = data.toInt()\n    @kotlin.internal.InlineOnly\n    public inline fun toLong(): Long = data\n\n    @kotlin.internal.InlineOnly\n    public inline fun toUByte(): UByte = data.toUByte()\n    @kotlin.internal.InlineOnly\n    public inline fun toUShort(): UShort = data.toUShort()\n    @kotlin.internal.InlineOnly\n    public inline fun toUInt(): UInt = data.toUInt()\n    @kotlin.internal.InlineOnly\n    public inline fun toULong(): ULong = this\n\n    public override fun toString(): String = ulongToString(data)\n\n}\n\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Byte.toULong(): ULong = ULong(this.toLong())\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Short.toULong(): ULong = ULong(this.toLong())\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Int.toULong(): ULong = ULong(this.toLong())\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun Long.toULong(): ULong = ULong(this)\n","/*\n * Copyright 2010-2018 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license\n * that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StandardKt\")\npackage kotlin\n\nimport kotlin.contracts.*\n\n/**\n * An exception is thrown to indicate that a method body remains to be implemented.\n */\npublic class NotImplementedError(message: String = \"An operation is not implemented.\") : Error(message)\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n */\n\n@kotlin.internal.InlineOnly\npublic inline fun TODO(): Nothing = throw NotImplementedError()\n\n/**\n * Always throws [NotImplementedError] stating that operation is not implemented.\n *\n * @param reason a string explaining why the implementation is missing.\n */\n@kotlin.internal.InlineOnly\npublic inline fun TODO(reason: String): Nothing = throw NotImplementedError(\"An operation is not implemented: $reason\")\n\n\n\n/**\n * Calls the specified function [block] and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <R> run(block: () -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.run(block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block()\n}\n\n/**\n * Calls the specified function [block] with the given [receiver] as its receiver and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> with(receiver: T, block: T.() -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return receiver.block()\n}\n\n/**\n * Calls the specified function [block] with `this` value as its receiver and returns `this` value.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T> T.apply(block: T.() -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block()\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns `this` value.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.also(block: (T) -> Unit): T {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    block(this)\n    return this\n}\n\n/**\n * Calls the specified function [block] with `this` value as its argument and returns its result.\n */\n@kotlin.internal.InlineOnly\npublic inline fun <T, R> T.let(block: (T) -> R): R {\n    contract {\n        callsInPlace(block, InvocationKind.EXACTLY_ONCE)\n    }\n    return block(this)\n}\n\n/**\n * Returns `this` value if it satisfies the given [predicate] or `null`, if it doesn't.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeIf(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (predicate(this)) this else null\n}\n\n/**\n * Returns `this` value if it _does not_ satisfy the given [predicate] or `null`, if it does.\n */\n@kotlin.internal.InlineOnly\n@SinceKotlin(\"1.1\")\npublic inline fun <T> T.takeUnless(predicate: (T) -> Boolean): T? {\n    contract {\n        callsInPlace(predicate, InvocationKind.EXACTLY_ONCE)\n    }\n    return if (!predicate(this)) this else null\n}\n\n/**\n * Executes the given function [action] specified number of [times].\n *\n * A zero-based index of current iteration is passed as a parameter to [action].\n *\n * @sample samples.misc.ControlFlow.repeat\n */\n@kotlin.internal.InlineOnly\npublic inline fun repeat(times: Int, action: (Int) -> Unit) {\n    contract { callsInPlace(action) }\n\n    for (index in 0 until times) {\n        action(index)\n    }\n}\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license \n * that can be found in the license/LICENSE.txt file.\n */\n\n@file:kotlin.jvm.JvmMultifileClass\n@file:kotlin.jvm.JvmName(\"StringsKt\")\n\npackage kotlin.text\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.random.*\n\n/**\n * Returns a character at the given [index] or throws an [IndexOutOfBoundsException] if the [index] is out of bounds of this char sequence.\n * \n * @sample samples.collections.Collections.Elements.elementAt\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.elementAt(index: Int): Char {\n    return get(index)\n}\n\n/**\n * Returns a character at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this char sequence.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrElse\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.elementAtOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns a character at the given [index] or `null` if the [index] is out of bounds of this char sequence.\n * \n * @sample samples.collections.Collections.Elements.elementAtOrNull\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.elementAtOrNull(index: Int): Char? {\n    return this.getOrNull(index)\n}\n\n/**\n * Returns the first character matching the given [predicate], or `null` if no such character was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.find(predicate: (Char) -> Boolean): Char? {\n    return firstOrNull(predicate)\n}\n\n/**\n * Returns the last character matching the given [predicate], or `null` if no such character was found.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.findLast(predicate: (Char) -> Boolean): Char? {\n    return lastOrNull(predicate)\n}\n\n/**\n * Returns first character.\n * @throws [NoSuchElementException] if the char sequence is empty.\n */\npublic fun CharSequence.first(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Char sequence is empty.\")\n    return this[0]\n}\n\n/**\n * Returns the first character matching the given [predicate].\n * @throws [NoSuchElementException] if no such character is found.\n */\npublic inline fun CharSequence.first(predicate: (Char) -> Boolean): Char {\n    for (element in this) if (predicate(element)) return element\n    throw NoSuchElementException(\"Char sequence contains no character matching the predicate.\")\n}\n\n/**\n * Returns the first character, or `null` if the char sequence is empty.\n */\npublic fun CharSequence.firstOrNull(): Char? {\n    return if (isEmpty()) null else this[0]\n}\n\n/**\n * Returns the first character matching the given [predicate], or `null` if character was not found.\n */\npublic inline fun CharSequence.firstOrNull(predicate: (Char) -> Boolean): Char? {\n    for (element in this) if (predicate(element)) return element\n    return null\n}\n\n/**\n * Returns a character at the given [index] or the result of calling the [defaultValue] function if the [index] is out of bounds of this char sequence.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.getOrElse(index: Int, defaultValue: (Int) -> Char): Char {\n    return if (index >= 0 && index <= lastIndex) get(index) else defaultValue(index)\n}\n\n/**\n * Returns a character at the given [index] or `null` if the [index] is out of bounds of this char sequence.\n */\npublic fun CharSequence.getOrNull(index: Int): Char? {\n    return if (index >= 0 && index <= lastIndex) get(index) else null\n}\n\n/**\n * Returns index of the first character matching the given [predicate], or -1 if the char sequence does not contain such character.\n */\npublic inline fun CharSequence.indexOfFirst(predicate: (Char) -> Boolean): Int {\n    for (index in indices) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns index of the last character matching the given [predicate], or -1 if the char sequence does not contain such character.\n */\npublic inline fun CharSequence.indexOfLast(predicate: (Char) -> Boolean): Int {\n    for (index in indices.reversed()) {\n        if (predicate(this[index])) {\n            return index\n        }\n    }\n    return -1\n}\n\n/**\n * Returns the last character.\n * @throws [NoSuchElementException] if the char sequence is empty.\n */\npublic fun CharSequence.last(): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Char sequence is empty.\")\n    return this[lastIndex]\n}\n\n/**\n * Returns the last character matching the given [predicate].\n * @throws [NoSuchElementException] if no such character is found.\n */\npublic inline fun CharSequence.last(predicate: (Char) -> Boolean): Char {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    throw NoSuchElementException(\"Char sequence contains no character matching the predicate.\")\n}\n\n/**\n * Returns the last character, or `null` if the char sequence is empty.\n */\npublic fun CharSequence.lastOrNull(): Char? {\n    return if (isEmpty()) null else this[length - 1]\n}\n\n/**\n * Returns the last character matching the given [predicate], or `null` if no such character was found.\n */\npublic inline fun CharSequence.lastOrNull(predicate: (Char) -> Boolean): Char? {\n    for (index in this.indices.reversed()) {\n        val element = this[index]\n        if (predicate(element)) return element\n    }\n    return null\n}\n\n/**\n * Returns a random character from this char sequence.\n * \n * @throws NoSuchElementException if this char sequence is empty.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.random(): Char {\n    return random(Random)\n}\n\n/**\n * Returns a random character from this char sequence using the specified source of randomness.\n * \n * @throws NoSuchElementException if this char sequence is empty.\n */\n@SinceKotlin(\"1.3\")\npublic fun CharSequence.random(random: Random): Char {\n    if (isEmpty())\n        throw NoSuchElementException(\"Char sequence is empty.\")\n    return get(random.nextInt(length))\n}\n\n/**\n * Returns the single character, or throws an exception if the char sequence is empty or has more than one character.\n */\npublic fun CharSequence.single(): Char {\n    return when (length) {\n        0 -> throw NoSuchElementException(\"Char sequence is empty.\")\n        1 -> this[0]\n        else -> throw IllegalArgumentException(\"Char sequence has more than one element.\")\n    }\n}\n\n/**\n * Returns the single character matching the given [predicate], or throws exception if there is no or more than one matching character.\n */\npublic inline fun CharSequence.single(predicate: (Char) -> Boolean): Char {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) throw IllegalArgumentException(\"Char sequence contains more than one matching element.\")\n            single = element\n            found = true\n        }\n    }\n    if (!found) throw NoSuchElementException(\"Char sequence contains no character matching the predicate.\")\n    @Suppress(\"UNCHECKED_CAST\")\n    return single as Char\n}\n\n/**\n * Returns single character, or `null` if the char sequence is empty or has more than one character.\n */\npublic fun CharSequence.singleOrNull(): Char? {\n    return if (length == 1) this[0] else null\n}\n\n/**\n * Returns the single character matching the given [predicate], or `null` if character was not found or more than one character was found.\n */\npublic inline fun CharSequence.singleOrNull(predicate: (Char) -> Boolean): Char? {\n    var single: Char? = null\n    var found = false\n    for (element in this) {\n        if (predicate(element)) {\n            if (found) return null\n            single = element\n            found = true\n        }\n    }\n    if (!found) return null\n    return single\n}\n\n/**\n * Returns a subsequence of this char sequence with the first [n] characters removed.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharSequence.drop(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return subSequence(n.coerceAtMost(length), length)\n}\n\n/**\n * Returns a string with the first [n] characters removed.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun String.drop(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return substring(n.coerceAtMost(length))\n}\n\n/**\n * Returns a subsequence of this char sequence with the last [n] characters removed.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun CharSequence.dropLast(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return take((length - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a string with the last [n] characters removed.\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic fun String.dropLast(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return take((length - n).coerceAtLeast(0))\n}\n\n/**\n * Returns a subsequence of this char sequence containing all characters except last characters that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharSequence.dropLastWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in lastIndex downTo 0)\n        if (!predicate(this[index]))\n            return subSequence(0, index + 1)\n    return \"\"\n}\n\n/**\n * Returns a string containing all characters except last characters that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun String.dropLastWhile(predicate: (Char) -> Boolean): String {\n    for (index in lastIndex downTo 0)\n        if (!predicate(this[index]))\n            return substring(0, index + 1)\n    return \"\"\n}\n\n/**\n * Returns a subsequence of this char sequence containing all characters except first characters that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun CharSequence.dropWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return subSequence(index, length)\n    return \"\"\n}\n\n/**\n * Returns a string containing all characters except first characters that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.drop\n */\npublic inline fun String.dropWhile(predicate: (Char) -> Boolean): String {\n    for (index in this.indices)\n        if (!predicate(this[index]))\n            return substring(index)\n    return \"\"\n}\n\n/**\n * Returns a char sequence containing only those characters from the original char sequence that match the given [predicate].\n */\npublic inline fun CharSequence.filter(predicate: (Char) -> Boolean): CharSequence {\n    return filterTo(StringBuilder(), predicate)\n}\n\n/**\n * Returns a string containing only those characters from the original string that match the given [predicate].\n */\npublic inline fun String.filter(predicate: (Char) -> Boolean): String {\n    return filterTo(StringBuilder(), predicate).toString()\n}\n\n/**\n * Returns a char sequence containing only those characters from the original char sequence that match the given [predicate].\n * @param [predicate] function that takes the index of a character and the character itself\n * and returns the result of predicate evaluation on the character.\n */\npublic inline fun CharSequence.filterIndexed(predicate: (index: Int, Char) -> Boolean): CharSequence {\n    return filterIndexedTo(StringBuilder(), predicate)\n}\n\n/**\n * Returns a string containing only those characters from the original string that match the given [predicate].\n * @param [predicate] function that takes the index of a character and the character itself\n * and returns the result of predicate evaluation on the character.\n */\npublic inline fun String.filterIndexed(predicate: (index: Int, Char) -> Boolean): String {\n    return filterIndexedTo(StringBuilder(), predicate).toString()\n}\n\n/**\n * Appends all characters matching the given [predicate] to the given [destination].\n * @param [predicate] function that takes the index of a character and the character itself\n * and returns the result of predicate evaluation on the character.\n */\npublic inline fun <C : Appendable> CharSequence.filterIndexedTo(destination: C, predicate: (index: Int, Char) -> Boolean): C {\n    forEachIndexed { index, element ->\n        if (predicate(index, element)) destination.append(element)\n    }\n    return destination\n}\n\n/**\n * Returns a char sequence containing only those characters from the original char sequence that do not match the given [predicate].\n */\npublic inline fun CharSequence.filterNot(predicate: (Char) -> Boolean): CharSequence {\n    return filterNotTo(StringBuilder(), predicate)\n}\n\n/**\n * Returns a string containing only those characters from the original string that do not match the given [predicate].\n */\npublic inline fun String.filterNot(predicate: (Char) -> Boolean): String {\n    return filterNotTo(StringBuilder(), predicate).toString()\n}\n\n/**\n * Appends all characters not matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : Appendable> CharSequence.filterNotTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (element in this) if (!predicate(element)) destination.append(element)\n    return destination\n}\n\n/**\n * Appends all characters matching the given [predicate] to the given [destination].\n */\npublic inline fun <C : Appendable> CharSequence.filterTo(destination: C, predicate: (Char) -> Boolean): C {\n    for (index in 0 until length) {\n        val element = get(index)\n        if (predicate(element)) destination.append(element)\n    }\n    return destination\n}\n\n/**\n * Returns a char sequence containing characters of the original char sequence at the specified range of [indices].\n */\npublic fun CharSequence.slice(indices: IntRange): CharSequence {\n    if (indices.isEmpty()) return \"\"\n    return subSequence(indices)\n}\n\n/**\n * Returns a string containing characters of the original string at the specified range of [indices].\n */\npublic fun String.slice(indices: IntRange): String {\n    if (indices.isEmpty()) return \"\"\n    return substring(indices)\n}\n\n/**\n * Returns a char sequence containing characters of the original char sequence at specified [indices].\n */\npublic fun CharSequence.slice(indices: Iterable<Int>): CharSequence {\n    val size = indices.collectionSizeOrDefault(10)\n    if (size == 0) return \"\"\n    val result = StringBuilder(size)\n    for (i in indices) {\n        result.append(get(i))\n    }\n    return result\n}\n\n/**\n * Returns a string containing characters of the original string at specified [indices].\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.slice(indices: Iterable<Int>): String {\n    return (this as CharSequence).slice(indices).toString()\n}\n\n/**\n * Returns a subsequence of this char sequence containing the first [n] characters from this char sequence, or the entire char sequence if this char sequence is shorter.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharSequence.take(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return subSequence(0, n.coerceAtMost(length))\n}\n\n/**\n * Returns a string containing the first [n] characters from this string, or the entire string if this string is shorter.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun String.take(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    return substring(0, n.coerceAtMost(length))\n}\n\n/**\n * Returns a subsequence of this char sequence containing the last [n] characters from this char sequence, or the entire char sequence if this char sequence is shorter.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun CharSequence.takeLast(n: Int): CharSequence {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    val length = length\n    return subSequence(length - n.coerceAtMost(length), length)\n}\n\n/**\n * Returns a string containing the last [n] characters from this string, or the entire string if this string is shorter.\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic fun String.takeLast(n: Int): String {\n    require(n >= 0) { \"Requested character count $n is less than zero.\" }\n    val length = length\n    return substring(length - n.coerceAtMost(length))\n}\n\n/**\n * Returns a subsequence of this char sequence containing last characters that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharSequence.takeLastWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return subSequence(index + 1, length)\n        }\n    }\n    return subSequence(0, length)\n}\n\n/**\n * Returns a string containing last characters that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun String.takeLastWhile(predicate: (Char) -> Boolean): String {\n    for (index in lastIndex downTo 0) {\n        if (!predicate(this[index])) {\n            return substring(index + 1)\n        }\n    }\n    return this\n}\n\n/**\n * Returns a subsequence of this char sequence containing the first characters that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun CharSequence.takeWhile(predicate: (Char) -> Boolean): CharSequence {\n    for (index in 0 until length)\n        if (!predicate(get(index))) {\n            return subSequence(0, index)\n        }\n    return subSequence(0, length)\n}\n\n/**\n * Returns a string containing the first characters that satisfy the given [predicate].\n * \n * @sample samples.collections.Collections.Transformations.take\n */\npublic inline fun String.takeWhile(predicate: (Char) -> Boolean): String {\n    for (index in 0 until length)\n        if (!predicate(get(index))) {\n            return substring(0, index)\n        }\n    return this\n}\n\n/**\n * Returns a char sequence with characters in reversed order.\n */\npublic fun CharSequence.reversed(): CharSequence {\n    return StringBuilder(this).reverse()\n}\n\n/**\n * Returns a string with characters in reversed order.\n */\n@kotlin.internal.InlineOnly\npublic inline fun String.reversed(): String {\n    return (this as CharSequence).reversed().toString()\n}\n\n/**\n * Returns a [Map] containing key-value pairs provided by [transform] function\n * applied to characters of the given char sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n */\npublic inline fun <K, V> CharSequence.associate(transform: (Char) -> Pair<K, V>): Map<K, V> {\n    val capacity = mapCapacity(length).coerceAtLeast(16)\n    return associateTo(LinkedHashMap<K, V>(capacity), transform)\n}\n\n/**\n * Returns a [Map] containing the characters from the given char sequence indexed by the key\n * returned from [keySelector] function applied to each character.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n */\npublic inline fun <K> CharSequence.associateBy(keySelector: (Char) -> K): Map<K, Char> {\n    val capacity = mapCapacity(length).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, Char>(capacity), keySelector)\n}\n\n/**\n * Returns a [Map] containing the values provided by [valueTransform] and indexed by [keySelector] functions applied to characters of the given char sequence.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n */\npublic inline fun <K, V> CharSequence.associateBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, V> {\n    val capacity = mapCapacity(length).coerceAtLeast(16)\n    return associateByTo(LinkedHashMap<K, V>(capacity), keySelector, valueTransform)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function applied to each character of the given char sequence\n * and value is the character itself.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, M : MutableMap<in K, in Char>> CharSequence.associateByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        destination.put(keySelector(element), element)\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs,\n * where key is provided by the [keySelector] function and\n * and value is provided by the [valueTransform] function applied to characters of the given char sequence.\n * \n * If any two characters would have the same key returned by [keySelector] the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharSequence.associateByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        destination.put(keySelector(element), valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs\n * provided by [transform] function applied to each character of the given char sequence.\n * \n * If any of two pairs would have the same key the last one gets added to the map.\n */\npublic inline fun <K, V, M : MutableMap<in K, in V>> CharSequence.associateTo(destination: M, transform: (Char) -> Pair<K, V>): M {\n    for (element in this) {\n        destination += transform(element)\n    }\n    return destination\n}\n\n/**\n * Returns a [Map] where keys are characters from the given char sequence and values are\n * produced by the [valueSelector] function applied to each character.\n * \n * If any two characters are equal, the last one gets added to the map.\n * \n * The returned map preserves the entry iteration order of the original char sequence.\n * \n * @sample samples.text.Strings.associateWith\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <V> CharSequence.associateWith(valueSelector: (Char) -> V): Map<Char, V> {\n    val result = LinkedHashMap<Char, V>(mapCapacity(length).coerceAtLeast(16))\n    return associateWithTo(result, valueSelector)\n}\n\n/**\n * Populates and returns the [destination] mutable map with key-value pairs for each character of the given char sequence,\n * where key is the character itself and value is provided by the [valueSelector] function applied to that key.\n * \n * If any two characters are equal, the last one overwrites the former value in the map.\n */\n@SinceKotlin(\"1.3\")\npublic inline fun <V, M : MutableMap<in Char, in V>> CharSequence.associateWithTo(destination: M, valueSelector: (Char) -> V): M {\n    for (element in this) {\n        destination.put(element, valueSelector(element))\n    }\n    return destination\n}\n\n/**\n * Appends all characters to the given [destination] collection.\n */\npublic fun <C : MutableCollection<in Char>> CharSequence.toCollection(destination: C): C {\n    for (item in this) {\n        destination.add(item)\n    }\n    return destination\n}\n\n/**\n * Returns a [HashSet] of all characters.\n */\npublic fun CharSequence.toHashSet(): HashSet<Char> {\n    return toCollection(HashSet<Char>(mapCapacity(length)))\n}\n\n/**\n * Returns a [List] containing all characters.\n */\npublic fun CharSequence.toList(): List<Char> {\n    return when (length) {\n        0 -> emptyList()\n        1 -> listOf(this[0])\n        else -> this.toMutableList()\n    }\n}\n\n/**\n * Returns a [MutableList] filled with all characters of this char sequence.\n */\npublic fun CharSequence.toMutableList(): MutableList<Char> {\n    return toCollection(ArrayList<Char>(length))\n}\n\n/**\n * Returns a [Set] of all characters.\n * \n * The returned set preserves the element iteration order of the original char sequence.\n */\npublic fun CharSequence.toSet(): Set<Char> {\n    return when (length) {\n        0 -> emptySet()\n        1 -> setOf(this[0])\n        else -> toCollection(LinkedHashSet<Char>(mapCapacity(length)))\n    }\n}\n\n/**\n * Returns a single list of all elements yielded from results of [transform] function being invoked on each character of original char sequence.\n */\npublic inline fun <R> CharSequence.flatMap(transform: (Char) -> Iterable<R>): List<R> {\n    return flatMapTo(ArrayList<R>(), transform)\n}\n\n/**\n * Appends all elements yielded from results of [transform] function being invoked on each character of original char sequence, to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharSequence.flatMapTo(destination: C, transform: (Char) -> Iterable<R>): C {\n    for (element in this) {\n        val list = transform(element)\n        destination.addAll(list)\n    }\n    return destination\n}\n\n/**\n * Groups characters of the original char sequence by the key returned by the given [keySelector] function\n * applied to each character and returns a map where each group key is associated with a list of corresponding characters.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original char sequence.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K> CharSequence.groupBy(keySelector: (Char) -> K): Map<K, List<Char>> {\n    return groupByTo(LinkedHashMap<K, MutableList<Char>>(), keySelector)\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each character of the original char sequence\n * by the key returned by the given [keySelector] function applied to the character\n * and returns a map where each group key is associated with a list of corresponding values.\n * \n * The returned map preserves the entry iteration order of the keys produced from the original char sequence.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V> CharSequence.groupBy(keySelector: (Char) -> K, valueTransform: (Char) -> V): Map<K, List<V>> {\n    return groupByTo(LinkedHashMap<K, MutableList<V>>(), keySelector, valueTransform)\n}\n\n/**\n * Groups characters of the original char sequence by the key returned by the given [keySelector] function\n * applied to each character and puts to the [destination] map each group key associated with a list of corresponding characters.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupBy\n */\npublic inline fun <K, M : MutableMap<in K, MutableList<Char>>> CharSequence.groupByTo(destination: M, keySelector: (Char) -> K): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<Char>() }\n        list.add(element)\n    }\n    return destination\n}\n\n/**\n * Groups values returned by the [valueTransform] function applied to each character of the original char sequence\n * by the key returned by the given [keySelector] function applied to the character\n * and puts to the [destination] map each group key associated with a list of corresponding values.\n * \n * @return The [destination] map.\n * \n * @sample samples.collections.Collections.Transformations.groupByKeysAndValues\n */\npublic inline fun <K, V, M : MutableMap<in K, MutableList<V>>> CharSequence.groupByTo(destination: M, keySelector: (Char) -> K, valueTransform: (Char) -> V): M {\n    for (element in this) {\n        val key = keySelector(element)\n        val list = destination.getOrPut(key) { ArrayList<V>() }\n        list.add(valueTransform(element))\n    }\n    return destination\n}\n\n/**\n * Creates a [Grouping] source from a char sequence to be used later with one of group-and-fold operations\n * using the specified [keySelector] function to extract a key from each character.\n * \n * @sample samples.collections.Grouping.groupingByEachCount\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <K> CharSequence.groupingBy(crossinline keySelector: (Char) -> K): Grouping<Char, K> {\n    return object : Grouping<Char, K> {\n        override fun sourceIterator(): Iterator<Char> = this@groupingBy.iterator()\n        override fun keyOf(element: Char): K = keySelector(element)\n    }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each character in the original char sequence.\n */\npublic inline fun <R> CharSequence.map(transform: (Char) -> R): List<R> {\n    return mapTo(ArrayList<R>(length), transform)\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to each character and its index in the original char sequence.\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R> CharSequence.mapIndexed(transform: (index: Int, Char) -> R): List<R> {\n    return mapIndexedTo(ArrayList<R>(length), transform)\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each character and its index in the original char sequence.\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R : Any> CharSequence.mapIndexedNotNull(transform: (index: Int, Char) -> R?): List<R> {\n    return mapIndexedNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each character and its index in the original char sequence\n * and appends only the non-null results to the given [destination].\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R : Any, C : MutableCollection<in R>> CharSequence.mapIndexedNotNullTo(destination: C, transform: (index: Int, Char) -> R?): C {\n    forEachIndexed { index, element -> transform(index, element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each character and its index in the original char sequence\n * and appends the results to the given [destination].\n * @param [transform] function that takes the index of a character and the character itself\n * and returns the result of the transform applied to the character.\n */\npublic inline fun <R, C : MutableCollection<in R>> CharSequence.mapIndexedTo(destination: C, transform: (index: Int, Char) -> R): C {\n    var index = 0\n    for (item in this)\n        destination.add(transform(index++, item))\n    return destination\n}\n\n/**\n * Returns a list containing only the non-null results of applying the given [transform] function\n * to each character in the original char sequence.\n */\npublic inline fun <R : Any> CharSequence.mapNotNull(transform: (Char) -> R?): List<R> {\n    return mapNotNullTo(ArrayList<R>(), transform)\n}\n\n/**\n * Applies the given [transform] function to each character in the original char sequence\n * and appends only the non-null results to the given [destination].\n */\npublic inline fun <R : Any, C : MutableCollection<in R>> CharSequence.mapNotNullTo(destination: C, transform: (Char) -> R?): C {\n    forEach { element -> transform(element)?.let { destination.add(it) } }\n    return destination\n}\n\n/**\n * Applies the given [transform] function to each character of the original char sequence\n * and appends the results to the given [destination].\n */\npublic inline fun <R, C : MutableCollection<in R>> CharSequence.mapTo(destination: C, transform: (Char) -> R): C {\n    for (item in this)\n        destination.add(transform(item))\n    return destination\n}\n\n/**\n * Returns a lazy [Iterable] of [IndexedValue] for each character of the original char sequence.\n */\npublic fun CharSequence.withIndex(): Iterable<IndexedValue<Char>> {\n    return IndexingIterable { iterator() }\n}\n\n/**\n * Returns `true` if all characters match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.all\n */\npublic inline fun CharSequence.all(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (!predicate(element)) return false\n    return true\n}\n\n/**\n * Returns `true` if char sequence has at least one character.\n * \n * @sample samples.collections.Collections.Aggregates.any\n */\npublic fun CharSequence.any(): Boolean {\n    return !isEmpty()\n}\n\n/**\n * Returns `true` if at least one character matches the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.anyWithPredicate\n */\npublic inline fun CharSequence.any(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return true\n    return false\n}\n\n/**\n * Returns the length of this char sequence.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharSequence.count(): Int {\n    return length\n}\n\n/**\n * Returns the number of characters matching the given [predicate].\n */\npublic inline fun CharSequence.count(predicate: (Char) -> Boolean): Int {\n    var count = 0\n    for (element in this) if (predicate(element)) ++count\n    return count\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right to current accumulator value and each character.\n */\npublic inline fun <R> CharSequence.fold(initial: R, operation: (acc: R, Char) -> R): R {\n    var accumulator = initial\n    for (element in this) accumulator = operation(accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from left to right\n * to current accumulator value and each character with its index in the original char sequence.\n * @param [operation] function that takes the index of a character, current accumulator value\n * and the character itself, and calculates the next accumulator value.\n */\npublic inline fun <R> CharSequence.foldIndexed(initial: R, operation: (index: Int, acc: R, Char) -> R): R {\n    var index = 0\n    var accumulator = initial\n    for (element in this) accumulator = operation(index++, accumulator, element)\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left to each character and current accumulator value.\n */\npublic inline fun <R> CharSequence.foldRight(initial: R, operation: (Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with [initial] value and applying [operation] from right to left\n * to each character with its index in the original char sequence and current accumulator value.\n * @param [operation] function that takes the index of a character, the character itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun <R> CharSequence.foldRightIndexed(initial: R, operation: (index: Int, Char, acc: R) -> R): R {\n    var index = lastIndex\n    var accumulator = initial\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Performs the given [action] on each character.\n */\npublic inline fun CharSequence.forEach(action: (Char) -> Unit): Unit {\n    for (element in this) action(element)\n}\n\n/**\n * Performs the given [action] on each character, providing sequential index with the character.\n * @param [action] function that takes the index of a character and the character itself\n * and performs the desired action on the character.\n */\npublic inline fun CharSequence.forEachIndexed(action: (index: Int, Char) -> Unit): Unit {\n    var index = 0\n    for (item in this) action(index++, item)\n}\n\n/**\n * Returns the largest character or `null` if there are no characters.\n */\npublic fun CharSequence.max(): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (max < e) max = e\n    }\n    return max\n}\n\n/**\n * Returns the first character yielding the largest value of the given function or `null` if there are no characters.\n * \n * @sample samples.collections.Collections.Aggregates.maxBy\n */\npublic inline fun <R : Comparable<R>> CharSequence.maxBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var maxElem = this[0]\n    var maxValue = selector(maxElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (maxValue < v) {\n            maxElem = e\n            maxValue = v\n        }\n    }\n    return maxElem\n}\n\n/**\n * Returns the first character having the largest value according to the provided [comparator] or `null` if there are no characters.\n */\npublic fun CharSequence.maxWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var max = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(max, e) < 0) max = e\n    }\n    return max\n}\n\n/**\n * Returns the smallest character or `null` if there are no characters.\n */\npublic fun CharSequence.min(): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (min > e) min = e\n    }\n    return min\n}\n\n/**\n * Returns the first character yielding the smallest value of the given function or `null` if there are no characters.\n * \n * @sample samples.collections.Collections.Aggregates.minBy\n */\npublic inline fun <R : Comparable<R>> CharSequence.minBy(selector: (Char) -> R): Char? {\n    if (isEmpty()) return null\n    var minElem = this[0]\n    var minValue = selector(minElem)\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        val v = selector(e)\n        if (minValue > v) {\n            minElem = e\n            minValue = v\n        }\n    }\n    return minElem\n}\n\n/**\n * Returns the first character having the smallest value according to the provided [comparator] or `null` if there are no characters.\n */\npublic fun CharSequence.minWith(comparator: Comparator<in Char>): Char? {\n    if (isEmpty()) return null\n    var min = this[0]\n    for (i in 1..lastIndex) {\n        val e = this[i]\n        if (comparator.compare(min, e) > 0) min = e\n    }\n    return min\n}\n\n/**\n * Returns `true` if the char sequence has no characters.\n * \n * @sample samples.collections.Collections.Aggregates.none\n */\npublic fun CharSequence.none(): Boolean {\n    return isEmpty()\n}\n\n/**\n * Returns `true` if no characters match the given [predicate].\n * \n * @sample samples.collections.Collections.Aggregates.noneWithPredicate\n */\npublic inline fun CharSequence.none(predicate: (Char) -> Boolean): Boolean {\n    for (element in this) if (predicate(element)) return false\n    return true\n}\n\n/**\n * Performs the given [action] on each character and returns the char sequence itself afterwards.\n */\n@SinceKotlin(\"1.1\")\npublic inline fun <S : CharSequence> S.onEach(action: (Char) -> Unit): S {\n    return apply { for (element in this) action(element) }\n}\n\n/**\n * Accumulates value starting with the first character and applying [operation] from left to right to current accumulator value and each character.\n */\npublic inline fun CharSequence.reduce(operation: (acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with the first character and applying [operation] from left to right\n * to current accumulator value and each character with its index in the original char sequence.\n * @param [operation] function that takes the index of a character, current accumulator value\n * and the character itself and calculates the next accumulator value.\n */\npublic inline fun CharSequence.reduceIndexed(operation: (index: Int, acc: Char, Char) -> Char): Char {\n    if (isEmpty())\n        throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = this[0]\n    for (index in 1..lastIndex) {\n        accumulator = operation(index, accumulator, this[index])\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last character and applying [operation] from right to left to each character and current accumulator value.\n */\npublic inline fun CharSequence.reduceRight(operation: (Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(get(index--), accumulator)\n    }\n    return accumulator\n}\n\n/**\n * Accumulates value starting with last character and applying [operation] from right to left\n * to each character with its index in the original char sequence and current accumulator value.\n * @param [operation] function that takes the index of a character, the character itself\n * and current accumulator value, and calculates the next accumulator value.\n */\npublic inline fun CharSequence.reduceRightIndexed(operation: (index: Int, Char, acc: Char) -> Char): Char {\n    var index = lastIndex\n    if (index < 0) throw UnsupportedOperationException(\"Empty char sequence can't be reduced.\")\n    var accumulator = get(index--)\n    while (index >= 0) {\n        accumulator = operation(index, get(index), accumulator)\n        --index\n    }\n    return accumulator\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\npublic inline fun CharSequence.sumBy(selector: (Char) -> Int): Int {\n    var sum: Int = 0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Returns the sum of all values produced by [selector] function applied to each character in the char sequence.\n */\npublic inline fun CharSequence.sumByDouble(selector: (Char) -> Double): Double {\n    var sum: Double = 0.0\n    for (element in this) {\n        sum += selector(element)\n    }\n    return sum\n}\n\n/**\n * Splits this char sequence into a list of strings each not exceeding the given [size].\n * \n * The last string in the resulting list may have less characters than the given [size].\n * \n * @param size the number of elements to take in each string, must be positive and can be greater than the number of elements in this char sequence.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.chunked(size: Int): List<String> {\n    return windowed(size, size, partialWindows = true)\n}\n\n/**\n * Splits this char sequence into several char sequences each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return list of results of the [transform] applied to an each char sequence.\n * \n * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last char sequence may have less characters than the given [size].\n * \n * @param size the number of elements to take in each char sequence, must be positive and can be greater than the number of elements in this char sequence.\n * \n * @sample samples.text.Strings.chunkedTransform\n */\n@SinceKotlin(\"1.2\")\npublic fun <R> CharSequence.chunked(size: Int, transform: (CharSequence) -> R): List<R> {\n    return windowed(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Splits this char sequence into a sequence of strings each not exceeding the given [size].\n * \n * The last string in the resulting sequence may have less characters than the given [size].\n * \n * @param size the number of elements to take in each string, must be positive and can be greater than the number of elements in this char sequence.\n * \n * @sample samples.collections.Collections.Transformations.chunked\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.chunkedSequence(size: Int): Sequence<String> {\n    return chunkedSequence(size) { it.toString() }\n}\n\n/**\n * Splits this char sequence into several char sequences each not exceeding the given [size]\n * and applies the given [transform] function to an each.\n * \n * @return sequence of results of the [transform] applied to an each char sequence.\n * \n * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * The last char sequence may have less characters than the given [size].\n * \n * @param size the number of elements to take in each char sequence, must be positive and can be greater than the number of elements in this char sequence.\n * \n * @sample samples.text.Strings.chunkedTransformToSequence\n */\n@SinceKotlin(\"1.2\")\npublic fun <R> CharSequence.chunkedSequence(size: Int, transform: (CharSequence) -> R): Sequence<R> {\n    return windowedSequence(size, size, partialWindows = true, transform = transform)\n}\n\n/**\n * Splits the original char sequence into pair of char sequences,\n * where *first* char sequence contains characters for which [predicate] yielded `true`,\n * while *second* char sequence contains characters for which [predicate] yielded `false`.\n */\npublic inline fun CharSequence.partition(predicate: (Char) -> Boolean): Pair<CharSequence, CharSequence> {\n    val first = StringBuilder()\n    val second = StringBuilder()\n    for (element in this) {\n        if (predicate(element)) {\n            first.append(element)\n        } else {\n            second.append(element)\n        }\n    }\n    return Pair(first, second)\n}\n\n/**\n * Splits the original string into pair of strings,\n * where *first* string contains characters for which [predicate] yielded `true`,\n * while *second* string contains characters for which [predicate] yielded `false`.\n */\npublic inline fun String.partition(predicate: (Char) -> Boolean): Pair<String, String> {\n    val first = StringBuilder()\n    val second = StringBuilder()\n    for (element in this) {\n        if (predicate(element)) {\n            first.append(element)\n        } else {\n            second.append(element)\n        }\n    }\n    return Pair(first.toString(), second.toString())\n}\n\n/**\n * Returns a list of snapshots of the window of the given [size]\n * sliding along this char sequence with the given [step], where each\n * snapshot is a string.\n * \n * Several last strings may have less characters than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false): List<String> {\n    return windowed(size, step, partialWindows) { it.toString() }\n}\n\n/**\n * Returns a list of results of applying the given [transform] function to\n * an each char sequence representing a view over the window of the given [size]\n * sliding along this char sequence with the given [step].\n * \n * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last char sequences may have less characters than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <R> CharSequence.windowed(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (CharSequence) -> R): List<R> {\n    checkWindowSizeStep(size, step)\n    val thisSize = this.length\n    val result = ArrayList<R>((thisSize + step - 1) / step)\n    var index = 0\n    while (index < thisSize) {\n        val end = index + size\n        val coercedEnd = if (end > thisSize) { if (partialWindows) thisSize else break } else end\n        result.add(transform(subSequence(index, coercedEnd)))\n        index += step\n    }\n    return result\n}\n\n/**\n * Returns a sequence of snapshots of the window of the given [size]\n * sliding along this char sequence with the given [step], where each\n * snapshot is a string.\n * \n * Several last strings may have less characters than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.takeWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.windowedSequence(size: Int, step: Int = 1, partialWindows: Boolean = false): Sequence<String> {\n    return windowedSequence(size, step, partialWindows) { it.toString() }\n}\n\n/**\n * Returns a sequence of results of applying the given [transform] function to\n * an each char sequence representing a view over the window of the given [size]\n * sliding along this char sequence with the given [step].\n * \n * Note that the char sequence passed to the [transform] function is ephemeral and is valid only inside that function.\n * You should not store it or allow it to escape in some way, unless you made a snapshot of it.\n * Several last char sequences may have less characters than the given [size].\n * \n * Both [size] and [step] must be positive and can be greater than the number of elements in this char sequence.\n * @param size the number of elements to take in each window\n * @param step the number of elements to move the window forward by on an each step, by default 1\n * @param partialWindows controls whether or not to keep partial windows in the end if any,\n * by default `false` which means partial windows won't be preserved\n * \n * @sample samples.collections.Sequences.Transformations.averageWindows\n */\n@SinceKotlin(\"1.2\")\npublic fun <R> CharSequence.windowedSequence(size: Int, step: Int = 1, partialWindows: Boolean = false, transform: (CharSequence) -> R): Sequence<R> {\n    checkWindowSizeStep(size, step)\n    val windows = (if (partialWindows) indices else 0 until length - size + 1) step step\n    return windows.asSequence().map { index -> transform(subSequence(index, (index + size).coerceAtMost(length))) }\n}\n\n/**\n * Returns a list of pairs built from the characters of `this` and the [other] char sequences with the same index\n * The returned list has length of the shortest char sequence.\n * \n * @sample samples.text.Strings.zip\n */\npublic infix fun CharSequence.zip(other: CharSequence): List<Pair<Char, Char>> {\n    return zip(other) { c1, c2 -> c1 to c2 }\n}\n\n/**\n * Returns a list of values built from the characters of `this` and the [other] char sequences with the same index\n * using the provided [transform] function applied to each pair of characters.\n * The returned list has length of the shortest char sequence.\n * \n * @sample samples.text.Strings.zipWithTransform\n */\npublic inline fun <V> CharSequence.zip(other: CharSequence, transform: (a: Char, b: Char) -> V): List<V> {\n    val length = minOf(this.length, other.length)\n    val list = ArrayList<V>(length)\n    for (i in 0 until length) {\n        list.add(transform(this[i], other[i]))\n    }\n    return list\n}\n\n/**\n * Returns a list of pairs of each two adjacent characters in this char sequence.\n * \n * The returned list is empty if this char sequence contains less than two characters.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNext\n */\n@SinceKotlin(\"1.2\")\npublic fun CharSequence.zipWithNext(): List<Pair<Char, Char>> {\n    return zipWithNext { a, b -> a to b }\n}\n\n/**\n * Returns a list containing the results of applying the given [transform] function\n * to an each pair of two adjacent characters in this char sequence.\n * \n * The returned list is empty if this char sequence contains less than two characters.\n * \n * @sample samples.collections.Collections.Transformations.zipWithNextToFindDeltas\n */\n@SinceKotlin(\"1.2\")\npublic inline fun <R> CharSequence.zipWithNext(transform: (a: Char, b: Char) -> R): List<R> {\n    val size = length - 1\n    if (size < 1) return emptyList()\n    val result = ArrayList<R>(size)\n    for (index in 0 until size) {\n        result.add(transform(this[index], this[index + 1]))\n    }\n    return result\n}\n\n/**\n * Creates an [Iterable] instance that wraps the original char sequence returning its characters when being iterated.\n */\npublic fun CharSequence.asIterable(): Iterable<Char> {\n    if (this is String && isEmpty()) return emptyList()\n    return Iterable { this.iterator() }\n}\n\n/**\n * Creates a [Sequence] instance that wraps the original char sequence returning its characters when being iterated.\n */\npublic fun CharSequence.asSequence(): Sequence<Char> {\n    if (this is String && isEmpty()) return emptySequence()\n    return Sequence { this.iterator() }\n}\n\n","/*\n * Copyright 2010-2019 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license \n * that can be found in the license/LICENSE.txt file.\n */\n\npackage kotlin.collections\n\n//\n// NOTE: THIS FILE IS AUTO-GENERATED by the GenerateStandardLib.kt\n// See: https://github.com/JetBrains/kotlin/tree/master/libraries/stdlib\n//\n\nimport kotlin.js.*\nimport primitiveArrayConcat\nimport withType\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic actual fun <T> Array<out T>.asList(): List<T> {\n    return ArrayList<T>(this.unsafeCast<Array<Any?>>())\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun ByteArray.asList(): List<Byte> {\n    return this.unsafeCast<Array<Byte>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun ShortArray.asList(): List<Short> {\n    return this.unsafeCast<Array<Short>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun IntArray.asList(): List<Int> {\n    return this.unsafeCast<Array<Int>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun LongArray.asList(): List<Long> {\n    return this.unsafeCast<Array<Long>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun FloatArray.asList(): List<Float> {\n    return this.unsafeCast<Array<Float>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun DoubleArray.asList(): List<Double> {\n    return this.unsafeCast<Array<Double>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\n@kotlin.internal.InlineOnly\npublic actual inline fun BooleanArray.asList(): List<Boolean> {\n    return this.unsafeCast<Array<Boolean>>().asList()\n}\n\n/**\n * Returns a [List] that wraps the original array.\n */\npublic actual fun CharArray.asList(): List<Char> {\n    return object : AbstractList<Char>(), RandomAccess {\n        override val size: Int get() = this@asList.size\n        override fun isEmpty(): Boolean = this@asList.isEmpty()\n        override fun contains(element: Char): Boolean = this@asList.contains(element)\n        override fun get(index: Int): Char = this@asList[index]\n        override fun indexOf(element: Char): Int = this@asList.indexOf(element)\n        override fun lastIndexOf(element: Char): Int = this@asList.lastIndexOf(element)\n    }\n}\n\n/**\n * Returns `true` if the two specified arrays are *deeply* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * If two corresponding elements are nested arrays, they are also compared deeply.\n * If any of arrays contains itself on any nesting level the behavior is undefined.\n * \n * The elements of other types are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepEquals\")\npublic actual infix fun <T> Array<out T>.contentDeepEquals(other: Array<out T>): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level the behavior is undefined.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepHashCode\")\npublic actual fun <T> Array<out T>.contentDeepHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of this array as if it is a [List].\n * Nested arrays are treated as lists too.\n * \n * If any of arrays contains itself on any nesting level that reference\n * is rendered as `\"[...]\"` to prevent recursion.\n * \n * @sample samples.collections.Arrays.ContentOperations.contentDeepToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayDeepToString\")\npublic actual fun <T> Array<out T>.contentDeepToString(): String {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun <T> Array<out T>.contentEquals(other: Array<out T>): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun ByteArray.contentEquals(other: ByteArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun ShortArray.contentEquals(other: ShortArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun IntArray.contentEquals(other: IntArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun LongArray.contentEquals(other: LongArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun FloatArray.contentEquals(other: FloatArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun DoubleArray.contentEquals(other: DoubleArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun BooleanArray.contentEquals(other: BooleanArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns `true` if the two specified arrays are *structurally* equal to one another,\n * i.e. contain the same number of the same elements in the same order.\n * \n * The elements are compared for equality with the [equals][Any.equals] function.\n * For floating point numbers it means that `NaN` is equal to itself and `-0.0` is not equal to `0.0`.\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayEquals\")\npublic actual infix fun CharArray.contentEquals(other: CharArray): Boolean {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun <T> Array<out T>.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun ByteArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun ShortArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun IntArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun LongArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun FloatArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun DoubleArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun BooleanArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a hash code based on the contents of this array as if it is [List].\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayHashCode\")\npublic actual fun CharArray.contentHashCode(): Int {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun <T> Array<out T>.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun ByteArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun ShortArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun IntArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun LongArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun FloatArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun DoubleArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun BooleanArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Returns a string representation of the contents of the specified array as if it is [List].\n * \n * @sample samples.collections.Arrays.ContentOperations.contentToString\n */\n@SinceKotlin(\"1.1\")\n@library(\"arrayToString\")\npublic actual fun CharArray.contentToString(): String {\n    definedExternally\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun <T> Array<out T>.copyInto(destination: Array<T>, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): Array<T> {\n    arrayCopy(this, destination, destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun ByteArray.copyInto(destination: ByteArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ByteArray {\n    arrayCopy(this.unsafeCast<Array<Byte>>(), destination.unsafeCast<Array<Byte>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun ShortArray.copyInto(destination: ShortArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): ShortArray {\n    arrayCopy(this.unsafeCast<Array<Short>>(), destination.unsafeCast<Array<Short>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun IntArray.copyInto(destination: IntArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): IntArray {\n    arrayCopy(this.unsafeCast<Array<Int>>(), destination.unsafeCast<Array<Int>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun LongArray.copyInto(destination: LongArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): LongArray {\n    arrayCopy(this.unsafeCast<Array<Long>>(), destination.unsafeCast<Array<Long>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun FloatArray.copyInto(destination: FloatArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): FloatArray {\n    arrayCopy(this.unsafeCast<Array<Float>>(), destination.unsafeCast<Array<Float>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun DoubleArray.copyInto(destination: DoubleArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): DoubleArray {\n    arrayCopy(this.unsafeCast<Array<Double>>(), destination.unsafeCast<Array<Double>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun BooleanArray.copyInto(destination: BooleanArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): BooleanArray {\n    arrayCopy(this.unsafeCast<Array<Boolean>>(), destination.unsafeCast<Array<Boolean>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Copies this array or its subrange into the [destination] array and returns that array.\n * \n * It's allowed to pass the same array in the [destination] and even specify the subrange so that it overlaps with the destination range.\n * \n * @param destination the array to copy to.\n * @param destinationOffset the position in the [destination] array to copy to, 0 by default.\n * @param startIndex the beginning (inclusive) of the subrange to copy, 0 by default.\n * @param endIndex the end (exclusive) of the subrange to copy, size of this array by default.\n * \n * @throws IndexOutOfBoundsException or [IllegalArgumentException] when [startIndex] or [endIndex] is out of range of this array indices or when `startIndex > endIndex`.\n * @throws IndexOutOfBoundsException when the subrange doesn't fit into the [destination] array starting at the specified [destinationOffset],\n * or when that index is out of the [destination] array indices range.\n * \n * @return the [destination] array.\n */\n@SinceKotlin(\"1.3\")\n@kotlin.internal.InlineOnly\n@Suppress(\"ACTUAL_FUNCTION_WITH_DEFAULT_ARGUMENTS\")\npublic actual inline fun CharArray.copyInto(destination: CharArray, destinationOffset: Int = 0, startIndex: Int = 0, endIndex: Int = size): CharArray {\n    arrayCopy(this.unsafeCast<Array<Char>>(), destination.unsafeCast<Array<Char>>(), destinationOffset, startIndex, endIndex)\n    return destination\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline fun <T> Array<out T>.copyOf(): Array<T> {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun ByteArray.copyOf(): ByteArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun ShortArray.copyOf(): ShortArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun IntArray.copyOf(): IntArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun LongArray.copyOf(): LongArray {\n    return withType(\"LongArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun FloatArray.copyOf(): FloatArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline fun DoubleArray.copyOf(): DoubleArray {\n    return this.asDynamic().slice()\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun BooleanArray.copyOf(): BooleanArray {\n    return withType(\"BooleanArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.copyOf\n */\npublic actual fun CharArray.copyOf(): CharArray {\n    return withType(\"CharArray\", this.asDynamic().slice())\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun ByteArray.copyOf(newSize: Int): ByteArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, ByteArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun ShortArray.copyOf(newSize: Int): ShortArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, ShortArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun IntArray.copyOf(newSize: Int): IntArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, IntArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun LongArray.copyOf(newSize: Int): LongArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"LongArray\", arrayCopyResize(this, newSize, 0L))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun FloatArray.copyOf(newSize: Int): FloatArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, FloatArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with zero values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with zero values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun DoubleArray.copyOf(newSize: Int): DoubleArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return fillFrom(this, DoubleArray(newSize))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `false` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `false` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun BooleanArray.copyOf(newSize: Int): BooleanArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"BooleanArray\", arrayCopyResize(this, newSize, false))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with null char (`\\u0000`) values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with null char (`\\u0000`) values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizedPrimitiveCopyOf\n */\npublic actual fun CharArray.copyOf(newSize: Int): CharArray {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return withType(\"CharArray\", fillFrom(this, CharArray(newSize)))\n}\n\n/**\n * Returns new array which is a copy of the original array, resized to the given [newSize].\n * The copy is either truncated or padded at the end with `null` values if necessary.\n * \n * - If [newSize] is less than the size of the original array, the copy array is truncated to the [newSize].\n * - If [newSize] is greater than the size of the original array, the extra elements in the copy array are filled with `null` values.\n * \n * @sample samples.collections.Arrays.CopyOfOperations.resizingCopyOf\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual fun <T> Array<out T>.copyOf(newSize: Int): Array<T?> {\n    require(newSize >= 0) { \"Invalid new array size: $newSize.\" }\n    return arrayCopyResize(this, newSize, null)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual fun <T> Array<out T>.copyOfRange(fromIndex: Int, toIndex: Int): Array<T> {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun ByteArray.copyOfRange(fromIndex: Int, toIndex: Int): ByteArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun ShortArray.copyOfRange(fromIndex: Int, toIndex: Int): ShortArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun IntArray.copyOfRange(fromIndex: Int, toIndex: Int): IntArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun LongArray.copyOfRange(fromIndex: Int, toIndex: Int): LongArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"LongArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun FloatArray.copyOfRange(fromIndex: Int, toIndex: Int): FloatArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun DoubleArray.copyOfRange(fromIndex: Int, toIndex: Int): DoubleArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return this.asDynamic().slice(fromIndex, toIndex)\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun BooleanArray.copyOfRange(fromIndex: Int, toIndex: Int): BooleanArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"BooleanArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns a new array which is a copy of the specified range of the original array.\n * \n * @param fromIndex the start of the range (inclusive), must be in `0..array.size`\n * @param toIndex the end of the range (exclusive), must be in `fromIndex..array.size`\n */\npublic actual fun CharArray.copyOfRange(fromIndex: Int, toIndex: Int): CharArray {\n    AbstractList.checkRangeIndexes(fromIndex, toIndex, size)\n    return withType(\"CharArray\", this.asDynamic().slice(fromIndex, toIndex))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun <T> Array<out T>.plus(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ByteArray.plus(element: Byte): ByteArray {\n    return plus(byteArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ShortArray.plus(element: Short): ShortArray {\n    return plus(shortArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun IntArray.plus(element: Int): IntArray {\n    return plus(intArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun LongArray.plus(element: Long): LongArray {\n    return plus(longArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun FloatArray.plus(element: Float): FloatArray {\n    return plus(floatArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun DoubleArray.plus(element: Double): DoubleArray {\n    return plus(doubleArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun BooleanArray.plus(element: Boolean): BooleanArray {\n    return plus(booleanArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun CharArray.plus(element: Char): CharArray {\n    return plus(charArrayOf(element))\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\")\npublic actual operator fun <T> Array<out T>.plus(elements: Collection<T>): Array<T> {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun ByteArray.plus(elements: Collection<Byte>): ByteArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun ShortArray.plus(elements: Collection<Short>): ShortArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun IntArray.plus(elements: Collection<Int>): IntArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun LongArray.plus(elements: Collection<Long>): LongArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun FloatArray.plus(elements: Collection<Float>): FloatArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun DoubleArray.plus(elements: Collection<Double>): DoubleArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun BooleanArray.plus(elements: Collection<Boolean>): BooleanArray {\n    return arrayPlusCollection(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] collection.\n */\npublic actual operator fun CharArray.plus(elements: Collection<Char>): CharArray {\n    return fillFromCollection(this.copyOf(size + elements.size), this.size, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline operator fun <T> Array<out T>.plus(elements: Array<out T>): Array<T> {\n    return this.asDynamic().concat(elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ByteArray.plus(elements: ByteArray): ByteArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun ShortArray.plus(elements: ShortArray): ShortArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun IntArray.plus(elements: IntArray): IntArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun LongArray.plus(elements: LongArray): LongArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun FloatArray.plus(elements: FloatArray): FloatArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun DoubleArray.plus(elements: DoubleArray): DoubleArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun BooleanArray.plus(elements: BooleanArray): BooleanArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then all elements of the given [elements] array.\n */\n@Suppress(\"NOTHING_TO_INLINE\")\npublic actual inline operator fun CharArray.plus(elements: CharArray): CharArray {\n    return primitiveArrayConcat(this, elements)\n}\n\n/**\n * Returns an array containing all elements of the original array and then the given [element].\n */\n@Suppress(\"ACTUAL_WITHOUT_EXPECT\", \"NOTHING_TO_INLINE\")\npublic actual inline fun <T> Array<out T>.plusElement(element: T): Array<T> {\n    return this.asDynamic().concat(arrayOf(element))\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic actual fun IntArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\npublic actual fun LongArray.sort(): Unit {\n    if (size > 1) sort { a: Long, b: Long -> a.compareTo(b) }\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic actual fun ByteArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic actual fun ShortArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic actual fun DoubleArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic actual fun FloatArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place.\n */\n@library(\"primitiveArraySort\")\npublic actual fun CharArray.sort(): Unit {\n    definedExternally\n}\n\n/**\n * Sorts the array in-place according to the natural order of its elements.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T : Comparable<T>> Array<out T>.sort(): Unit {\n    if (size > 1) sortArray(this)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic fun <T> Array<out T>.sort(comparison: (a: T, b: T) -> Int): Unit {\n    if (size > 1) sortArrayWith(this, comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ByteArray.sort(noinline comparison: (a: Byte, b: Byte) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun ShortArray.sort(noinline comparison: (a: Short, b: Short) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun IntArray.sort(noinline comparison: (a: Int, b: Int) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun LongArray.sort(noinline comparison: (a: Long, b: Long) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun FloatArray.sort(noinline comparison: (a: Float, b: Float) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun DoubleArray.sort(noinline comparison: (a: Double, b: Double) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparison] function.\n */\n@kotlin.internal.InlineOnly\npublic inline fun CharArray.sort(noinline comparison: (a: Char, b: Char) -> Int): Unit {\n    asDynamic().sort(comparison)\n}\n\n/**\n * Sorts the array in-place according to the order specified by the given [comparator].\n * \n * The sort is _stable_. It means that equal elements preserve their order relative to each other after sorting.\n */\npublic actual fun <T> Array<out T>.sortWith(comparator: Comparator<in T>): Unit {\n    if (size > 1) sortArrayWith(this, comparator)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun ByteArray.toTypedArray(): Array<Byte> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun ShortArray.toTypedArray(): Array<Short> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun IntArray.toTypedArray(): Array<Int> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun LongArray.toTypedArray(): Array<Long> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun FloatArray.toTypedArray(): Array<Float> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun DoubleArray.toTypedArray(): Array<Double> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun BooleanArray.toTypedArray(): Array<Boolean> {\n    return js(\"[]\").slice.call(this)\n}\n\n/**\n * Returns a *typed* object array containing all of the elements of this primitive array.\n */\npublic actual fun CharArray.toTypedArray(): Array<Char> {\n    return Array(size) { index -> this[index] }\n}\n\n",null,"/*\n * Copyright 2010-2019 JetBrains s.r.o. Use of this source code is governed by the Apache 2.0 license \n * that can be found in the license/LICENSE.txt file.\n */\n\n// Auto-generated file. DO NOT EDIT!\n\npackage kotlin\n\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\npublic inline class ULongArray\n@Suppress(\"NON_PUBLIC_PRIMARY_CONSTRUCTOR_OF_INLINE_CLASS\")\n@PublishedApi\ninternal constructor(@PublishedApi internal val storage: LongArray) : Collection<ULong> {\n\n    /** Creates a new array of the specified [size], with all elements initialized to zero. */\n    public constructor(size: Int) : this(LongArray(size))\n\n    /** Returns the array element at the given [index]. This method can be called using the index operator. */\n    public operator fun get(index: Int): ULong = storage[index].toULong()\n\n    /** Sets the element at the given [index] to the given [value]. This method can be called using the index operator. */\n    public operator fun set(index: Int, value: ULong) {\n        storage[index] = value.toLong()\n    }\n\n    /** Returns the number of elements in the array. */\n    public override val size: Int get() = storage.size\n\n    /** Creates an iterator over the elements of the array. */\n    public override operator fun iterator(): ULongIterator = Iterator(storage)\n\n    private class Iterator(private val array: LongArray) : ULongIterator() {\n        private var index = 0\n        override fun hasNext() = index < array.size\n        override fun nextULong() = if (index < array.size) array[index++].toULong() else throw NoSuchElementException(index.toString())\n    }\n\n    override fun contains(element: ULong): Boolean = storage.contains(element.toLong())\n\n    override fun containsAll(elements: Collection<ULong>): Boolean = elements.all { storage.contains(it.toLong()) }\n\n    override fun isEmpty(): Boolean = this.storage.size == 0\n}\n\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ULongArray(size: Int, init: (Int) -> ULong): ULongArray {\n    return ULongArray(LongArray(size) { index -> init(index).toLong() })\n}\n\n@SinceKotlin(\"1.3\")\n@ExperimentalUnsignedTypes\n@kotlin.internal.InlineOnly\npublic inline fun ulongArrayOf(vararg elements: ULong): ULongArray = elements\n",null,null,null,null,null,null],"names":[],"mappings":"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UIyO5B,QJzOuC,KAAK,UIyOjC,SJzO6C,KAAZ,CAAhB,C;MI0OhD,iBJ9L4C,UI8L3B,YJ9LiC,yBI8LhB,EJ9LgB,CAAN,C;MI+L5B,6B;MAAsB,cAAiB,a;MAAvC,cJ5L2B,UI4LL,YJ5LgB,KAAL,KAAc,OAAM,KAApB,CAAN,C;MI4L3C,gBJrQ+C,UAAW,SAAK,KAAK,OAAM,KAAX,CAAhB,C;MIsQ/C,uB;MAAA,cJhM4C,UIgM9B,SJhMoC,yBIgMtB,EJhMsB,CAAN,C;MIgM5C,aJtQ+C,UAAW,WAAK,KAAK,OAAM,KAAX,CAAhB,C;MIuQnC,uB;MAAA,cAAc,a;MAA1B,YJ9L2C,UAAW,YAAL,KAAc,OAAM,KAApB,CAAN,C;MIiMvB,aJhP4B,UIgP5B,QJhPuC,KAAK,UIgPjC,UJhP6C,KAAZ,CAAhB,C;MIgP5B,cJhP4B,UIgPJ,SJhPe,KAAK,UIgPR,SJhPoB,KAAZ,CAAhB,C;MIgPhD,oBJ1Q+C,UAAW,WAAK,KAAK,OAAM,KAAX,CAAhB,C;MI2Q/C,kBAAkB,U;MAClB,wB;MAAA,cJtM4C,UIsM5B,aJtMkC,yBIsMhB,EJtMgB,CAAN,C;MIsM5C,cJ5Q+C,UAAW,WAAK,KAAK,OAAM,KAAX,CAAhB,C;MI6Q/C,sB;MAAa,cJ1M+B,UI0M9B,aJ1MoC,gBI0MlB,EJ1MkB,CAAN,C;MI0M/B,cAA2B,a;MAAxC,cJpM2C,UAAW,YAAL,KAAc,OAAM,KAApB,CAAN,C;MIoM3C,YJ7Q+C,UAAW,WAAK,KAAK,OAAM,KAAX,CAAhB,C;MI8Q/C,wB;MAAA,cJxM4C,UIwM5B,SJxMkC,yBIwMpB,EJxMoB,CAAN,C;MIwM5C,cJ9Q+C,UAAW,WAAK,KAAK,OAAM,KAAX,CAAhB,C;MIgRxC,c;MAAK,uB;MAAA,eAAc,a;MAA1B,2BJvM2C,UAAW,YAAL,KAAc,QAAM,KAApB,CAAN,CIuM3C,C;MAEA,iBAAiB,W;MACjB,oBJhN4C,UAAM,CAzCF,UIyP3B,SJzPsC,KAAK,UIyP/B,UJzP2C,KAAZ,CAAhB,CAyCE,iBIgND,CJhNC,CAAN,C;MIiN5C,aJpR+C,UIoRlC,UJpR6C,KAAK,KIoRrC,aJpRgD,KAAX,CAAhB,C;MIsR/C,qBAAqB,U;MACrB,a;;IAEJ,IAAI,yDAAsB,2BAAtB,SAAJ,C;MACI,mBAAO,CAAP,EAAY,kBAAZ,C;;IAEJ,OAAO,gCAAoB,MAApB,C;EAGX,C;;IAOmB,YAAU,Y;IAAzB,eJ7N+C,UI6NhC,KJ7N2C,KAAL,KAAc,KAAM,KAApB,CAAN,C;II8N/C,gBJjOgD,UIiOhC,KJjOsC,yBIiO5B,EJjO4B,CAAN,C;IIkOhC,cAAW,Y;IAA3B,gBJ/N+C,UI+N/B,MJ/N0C,KAAL,KAAc,OAAM,KAApB,CAAN,C;IIgO/C,iBJnOgD,UImO/B,MJnOqC,yBImO1B,EJnO0B,CAAN,C;IIuOhD,mBJnRoD,UImRjC,QJnR4C,KAAK,UImRtC,SJnRkD,KAAZ,CAAhB,C;IIoRpD,eJxOgD,UIwOjC,YJxOuC,yBIwOtB,EJxOsB,CAAN,C;IIyOhC,cAAiB,a;IAAjC,gBJtO+C,UIsO/B,YJtO0C,KAAL,KAAc,OAAM,KAApB,CAAN,C;IIyO3B,WJxRgC,UIwRhC,QJxR2C,KAAK,UIwRrC,UJxRiD,KAAZ,CAAhB,C;IIwRhC,cJxRgC,UIwRR,SJxRmB,KAAK,UIwRZ,SJxRwB,KAAZ,CAAhB,C;IIwRpD,oBJlTmD,UAAW,SAAK,KAAK,OAAM,KAAX,CAAhB,C;IImTnD,kBAAkB,Q;IAClB,wB;IAAA,cJ9OgD,UI8OhC,aJ9OsC,yBI8OpB,EJ9OoB,CAAN,C;II8OhD,cJpTmD,UAAW,WAAK,KAAK,OAAM,KAAX,CAAhB,C;IIqTnD,sB;IAAa,YJlPmC,UIkPlC,aJlPwC,gBIkPtB,EJlPsB,CAAN,C;IIkPnC,cAA2B,a;IAAxC,cJ5O+C,UAAW,UAAL,KAAc,OAAM,KAApB,CAAN,C;II4O/C,YJrTmD,UAAW,WAAK,KAAK,OAAM,KAAX,CAAhB,C;IIsTnD,wB;IAAA,cJhPgD,UIgPhC,SJhPsC,yBIgPxB,EJhPwB,CAAN,C;IIgPhD,cJtTmD,UAAW,WAAK,KAAK,OAAM,KAAX,CAAhB,C;IIyTnD,iBAAiB,W;IACjB,oBJvPgD,UAAM,CAzCF,UIgS/B,SJhS0C,KAAK,UIgSnC,UJhS+C,KAAZ,CAAhB,CAyCE,iBIuPL,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AAiB,mBAAO,EAAP,GAAa,EAAb,I;SACjB,KAAG,qBAAY,KAAZ,CAAH,mBAJS,SAIT,E;MAA2B,mBAAO,KAAP,GAAkB,EAAlB,I;SAC3B,KAAG,qBAAY,KAAZ,CAAH,mBALS,SAKT,E;MAA2B,mBAAO,KAAP,GAAkB,EAAlB,I;;MACnB,MAAM,0BAAsB,0BAAtB,C;IANlB,W;EAQJ,C;;IAGI,OAAY,QAAL,SAAK,EAAQ,EAAR,C;EAChB,C;;IjBlBA,0C;IAeI,2B;EAfJ,C;;;MWUkD,MAAM,6BAAoB,sCXHvD,qBWGmC,C;IXHxC,C;;;;MWGkC,MAAM,6BAAoB,sCXDvD,qBWCmC,C;IXDxC,C;;;;MWCkC,MAAM,6BAAoB,sCXCvD,qBWDmC,C;IXCxC,C;;;;MWDkC,MAAM,6BAAoB,sCXGvD,qBWHmC,C;IXGxC,C;;;IWHkC,MAAM,6BAAoB,sCXQ/D,qBWR2C,C;EXSpD,C;;IWT8C,MAAM,6BAAoB,sCXY/D,qBWZ2C,C;EXapD,C;;IWb8C,MAAM,6BAAoB,sCXgB/D,qBWhB2C,C;EXiBpD,C;;IWjB8C,MAAM,6BAAoB,sCXoB/D,qBWpB2C,C;EXqBpD,C;;IWrB8C,MAAM,6BAAoB,sCXwB/D,qBWxB2C,C;EXyBpD,C;;IWzB8C,MAAM,6BAAoB,sCX4B/D,qBW5B2C,C;EX6BpD,C;;IW7B8C,MAAM,6BAAoB,sCXgC/D,qBWhC2C,C;EXiCpD,C;;IWjC8C,MAAM,6BAAoB,sCXoC/D,qBWpC2C,C;EXqCpD,C;;IWrC8C,MAAM,6BAAoB,sCXwC/D,qBWxC2C,C;EXyCpD,C;;IWzC8C,MAAM,6BAAoB,sCX4C/D,qBW5C2C,C;EX6CpD,C;;IW7C8C,MAAM,6BAAoB,sCXgD/D,qBWhD2C,C;EXiDpD,C;;IAE8C,uBAAY,SAAS,aAAT,CAAmB,QAA/B,EAAyC,gBAAS,mBAAT,CAAyB,QAAlE,E;EAAA,C;;IAEH,uBAAW,GAAX,E;EAAA,C;;IAEM,uBAAiB,KAAjB,E;EAAA,C;;IAEH,uBAAgB,IAAhB,E;EAAA,C;;IWzDA,MAAM,6BAAoB,sCX4D/D,qBW5D2C,C;EX6DpD,C;;IW7D8C,MAAM,6BAAoB,sCXgE/D,qBWhE2C,C;EXiEpD,C;;IWjE8C,MAAM,6BAAoB,sCXoE/D,qBWpE2C,C;EXqEpD,C;;IWrE8C,MAAM,6BAAoB,sCXwE/D,qBWxE2C,C;EXyEpD,C;;;;;;;;IAnFJ,iD;MAAA,gC;;IAAA,0C;EAAA,C;;IkBQ6E,wC;IAAA,6B;IAAA,yB;IAAA,0C;EAAU,C;;;;;;;;;;;;;YAAR,gB;4BAAA,8B;gBAAA,kBC1B/E,mB;qBD0B+E,mB;YAAA,Q;;;;YAAA,oB;;;;;;;;;;;;;;;;EAAQ,C;;IAAV,yD;qBAAA,8E;UAAA,S;eAAA,Q;;eAAA,uB;IAAA,C;EAAA,C;;IAApB,OAAY,QAAZ,sBAAY,kBAAQ,mBAAR,C;EAAZ,C;;IEAsB,wC;IAAA,6B;IAAA,yB;IAAA,0C;EAAU,C;;;;;;;;;;;;;YAAR,gB;4BAAA,8B;gBAAA,kBD1BjF,mB;qBC0BiF,mB;YAAA,Q;;;;YAAA,oB;;;;;;;;;;;;;;;;EAAQ,C;;IAAV,yD;qBAAA,gF;UAAA,S;eAAA,Q;;eAAA,uB;IAAA,C;EAAA,C;;IAApB,OAAY,QAAZ,sBAAY,kBAAQ,qBAAR,C;EAAZ,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;qBCE3B,oC;;;;"}