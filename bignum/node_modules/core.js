(function (_, Kotlin, $module$kotlinx_coroutines_core) {
  'use strict';
  var $$importsForInline$$ = _.$$importsForInline$$ || (_.$$importsForInline$$ = {});
  var Enum = Kotlin.kotlin.Enum;
  var Kind_CLASS = Kotlin.Kind.CLASS;
  var throwISE = Kotlin.throwISE;
  var NumberFormatException = Kotlin.kotlin.NumberFormatException;
  var getKClass = Kotlin.getKClass;
  var throwCCE = Kotlin.throwCCE;
  var Long = Kotlin.Long;
  var equals = Kotlin.equals;
  var PrimitiveClasses$intClass = Kotlin.kotlin.reflect.js.internal.PrimitiveClasses.intClass;
  var PrimitiveClasses$shortClass = Kotlin.kotlin.reflect.js.internal.PrimitiveClasses.shortClass;
  var PrimitiveClasses$byteClass = Kotlin.kotlin.reflect.js.internal.PrimitiveClasses.byteClass;
  var toString = Kotlin.toString;
  var RuntimeException_init = Kotlin.kotlin.RuntimeException_init_pdl1vj$;
  var Int = Number;
  var Kind_OBJECT = Kotlin.Kind.OBJECT;
  var ArithmeticException = Kotlin.kotlin.ArithmeticException;
  var Pair = Kotlin.kotlin.Pair;
  var Comparable = Kotlin.kotlin.Comparable;
  var Kind_INTERFACE = Kotlin.Kind.INTERFACE;
  var UInt = Kotlin.kotlin.UInt;
  var UIntArray = Kotlin.kotlin.UIntArray;
  var Triple = Kotlin.kotlin.Triple;
  var ULong = Kotlin.kotlin.ULong;
  var UIntArray_init = Kotlin.kotlin.UIntArray_init_za3lpa$;
  var unboxChar = Kotlin.unboxChar;
  var StringBuilder_init = Kotlin.kotlin.text.StringBuilder_init;
  var toString_0 = Kotlin.kotlin.text.toString_k13f4a$;
  var joinToString = Kotlin.kotlin.collections.joinToString_fmv235$;
  var ULongArray = Kotlin.kotlin.ULongArray;
  var ULongArray_init = Kotlin.kotlin.ULongArray_init_za3lpa$;
  var toString_1 = Kotlin.kotlin.text.toString_hc3rh$;
  var COROUTINE_SUSPENDED = Kotlin.kotlin.coroutines.intrinsics.COROUTINE_SUSPENDED;
  var CoroutineImpl = Kotlin.kotlin.coroutines.CoroutineImpl;
  var toChar = Kotlin.toChar;
  var CharRange = Kotlin.kotlin.ranges.CharRange;
  var L2147483647 = Kotlin.Long.fromInt(2147483647);
  var coroutines = $module$kotlinx_coroutines_core.kotlinx.coroutines;
  var promise = $module$kotlinx_coroutines_core.kotlinx.coroutines.promise_pda6u4$;
  Sign.prototype = Object.create(Enum.prototype);
  Sign.prototype.constructor = Sign;
  function Sign(name, ordinal) {
    Enum.call(this);
    this.name$ = name;
    this.ordinal$ = ordinal;
  }
  function Sign_initFields() {
    Sign_initFields = function () {
    };
    Sign$POSITIVE_instance = new Sign('POSITIVE', 0);
    Sign$NEGATIVE_instance = new Sign('NEGATIVE', 1);
    Sign$ZERO_instance = new Sign('ZERO', 2);
  }
  var Sign$POSITIVE_instance;
  function Sign$POSITIVE_getInstance() {
    Sign_initFields();
    return Sign$POSITIVE_instance;
  }
  var Sign$NEGATIVE_instance;
  function Sign$NEGATIVE_getInstance() {
    Sign_initFields();
    return Sign$NEGATIVE_instance;
  }
  var Sign$ZERO_instance;
  function Sign$ZERO_getInstance() {
    Sign_initFields();
    return Sign$ZERO_instance;
  }
  Sign.prototype.not = function () {
    var tmp$;
    switch (this.name) {
      case 'POSITIVE':
        tmp$ = Sign$NEGATIVE_getInstance();
        break;
      case 'NEGATIVE':
        tmp$ = Sign$POSITIVE_getInstance();
        break;
      case 'ZERO':
        tmp$ = Sign$ZERO_getInstance();
        break;
      default:tmp$ = Kotlin.noWhenBranchMatched();
        break;
    }
    return tmp$;
  };
  Sign.prototype.toInt = function () {
    var tmp$;
    switch (this.name) {
      case 'POSITIVE':
        tmp$ = 1;
        break;
      case 'NEGATIVE':
        tmp$ = -1;
        break;
      case 'ZERO':
        tmp$ = 0;
        break;
      default:tmp$ = Kotlin.noWhenBranchMatched();
        break;
    }
    return tmp$;
  };
  Sign.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Sign',
    interfaces: [Enum]
  };
  function Sign$values() {
    return [Sign$POSITIVE_getInstance(), Sign$NEGATIVE_getInstance(), Sign$ZERO_getInstance()];
  }
  Sign.values = Sign$values;
  function Sign$valueOf(name) {
    switch (name) {
      case 'POSITIVE':
        return Sign$POSITIVE_getInstance();
      case 'NEGATIVE':
        return Sign$NEGATIVE_getInstance();
      case 'ZERO':
        return Sign$ZERO_getInstance();
      default:throwISE('No enum constant com.ionspin.kotlin.bignum.biginteger.Sign.' + name);
    }
  }
  Sign.valueOf_61zpoe$ = Sign$valueOf;
  function BigInteger(wordArray, sign) {
    BigInteger$Companion_getInstance();
    this.sign = sign;
    this.magnitude_8be2vx$ = wordArray;
  }
  function BigInteger$Companion() {
    BigInteger$Companion_instance = this;
    this.arithmetic_0 = chosenArithmetic;
    this.ZERO = new BigInteger(this.arithmetic_0.ZERO, Sign$ZERO_getInstance());
    this.ONE = new BigInteger(this.arithmetic_0.ONE, Sign$POSITIVE_getInstance());
  }
  BigInteger$Companion.prototype.parseString_bm4lxs$ = function (string, base) {
    if (base === void 0)
      base = 10;
    var tmp$, tmp$_0;
    var signed = string.charCodeAt(0) === 45 || string.charCodeAt(0) === 43;
    if (signed) {
      if (string.length === 1) {
        throw new NumberFormatException('Invalid big integer: ' + string);
      }
      if (string.charCodeAt(0) === 45) {
        tmp$ = Sign$NEGATIVE_getInstance();
      }
       else {
        tmp$ = Sign$POSITIVE_getInstance();
      }
      var isNegative = tmp$;
      if (string.length === 2 && string.charCodeAt(1) === 48) {
        return this.ZERO;
      }
      var tmp$_1 = this.arithmetic_0;
      var endIndex = string.length;
      tmp$_0 = new BigInteger(tmp$_1.parseForBase_bm4lxs$(string.substring(1, endIndex), base), isNegative);
    }
     else {
      if (string.length === 1 && string.charCodeAt(0) === 48) {
        return this.ZERO;
      }
      tmp$_0 = new BigInteger(this.arithmetic_0.parseForBase_bm4lxs$(string, base), Sign$POSITIVE_getInstance());
    }
    return tmp$_0;
  };
  BigInteger$Companion.prototype.determinSignFromNumber_0 = function (T_0, isT, number) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4;
    tmp$ = getKClass(T_0);
    if (equals(tmp$, getKClass(Long))) {
      Kotlin.isType(tmp$_0 = number, Kotlin.Long) ? tmp$_0 : throwCCE();
      if (number.toNumber() < 0)
        tmp$_4 = Sign$NEGATIVE_getInstance();
      else if (number.toNumber() > 0)
        tmp$_4 = Sign$POSITIVE_getInstance();
      else
        tmp$_4 = Sign$ZERO_getInstance();
    }
     else if (equals(tmp$, PrimitiveClasses$intClass)) {
      typeof (tmp$_1 = number) === 'number' ? tmp$_1 : throwCCE();
      if (number < 0)
        tmp$_4 = Sign$NEGATIVE_getInstance();
      else if (number > 0)
        tmp$_4 = Sign$POSITIVE_getInstance();
      else
        tmp$_4 = Sign$ZERO_getInstance();
    }
     else if (equals(tmp$, PrimitiveClasses$shortClass)) {
      typeof (tmp$_2 = number) === 'number' ? tmp$_2 : throwCCE();
      if (number < 0)
        tmp$_4 = Sign$NEGATIVE_getInstance();
      else if (number > 0)
        tmp$_4 = Sign$POSITIVE_getInstance();
      else
        tmp$_4 = Sign$ZERO_getInstance();
    }
     else if (equals(tmp$, PrimitiveClasses$byteClass)) {
      typeof (tmp$_3 = number) === 'number' ? tmp$_3 : throwCCE();
      if (number < 0)
        tmp$_4 = Sign$NEGATIVE_getInstance();
      else if (number > 0)
        tmp$_4 = Sign$POSITIVE_getInstance();
      else
        tmp$_4 = Sign$ZERO_getInstance();
    }
     else
      throw RuntimeException_init('Unsupported type ' + toString(getKClass(T_0).simpleName));
    return tmp$_4;
  };
  BigInteger$Companion.prototype.fromLong_s8cxhz$ = function (long) {
    var tmp$ = this.arithmetic_0.fromLong_s8cxhz$(long);
    var tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5;
    tmp$_0 = getKClass(Long);
    if (equals(tmp$_0, getKClass(Long))) {
      Kotlin.isType(tmp$_1 = long, Kotlin.Long) ? tmp$_1 : throwCCE();
      if (long.toNumber() < 0)
        tmp$_5 = Sign$NEGATIVE_getInstance();
      else if (long.toNumber() > 0)
        tmp$_5 = Sign$POSITIVE_getInstance();
      else
        tmp$_5 = Sign$ZERO_getInstance();
    }
     else if (equals(tmp$_0, PrimitiveClasses$intClass)) {
      typeof (tmp$_2 = long) === 'number' ? tmp$_2 : throwCCE();
      if (long < 0)
        tmp$_5 = Sign$NEGATIVE_getInstance();
      else if (long > 0)
        tmp$_5 = Sign$POSITIVE_getInstance();
      else
        tmp$_5 = Sign$ZERO_getInstance();
    }
     else if (equals(tmp$_0, PrimitiveClasses$shortClass)) {
      typeof (tmp$_3 = long) === 'number' ? tmp$_3 : throwCCE();
      if (long < 0)
        tmp$_5 = Sign$NEGATIVE_getInstance();
      else if (long > 0)
        tmp$_5 = Sign$POSITIVE_getInstance();
      else
        tmp$_5 = Sign$ZERO_getInstance();
    }
     else if (equals(tmp$_0, PrimitiveClasses$byteClass)) {
      typeof (tmp$_4 = long) === 'number' ? tmp$_4 : throwCCE();
      if (long < 0)
        tmp$_5 = Sign$NEGATIVE_getInstance();
      else if (long > 0)
        tmp$_5 = Sign$POSITIVE_getInstance();
      else
        tmp$_5 = Sign$ZERO_getInstance();
    }
     else
      throw RuntimeException_init('Unsupported type ' + toString(getKClass(Long).simpleName));
    return new BigInteger(tmp$, tmp$_5);
  };
  BigInteger$Companion.prototype.fromInt_za3lpa$ = function (int) {
    var tmp$ = this.arithmetic_0.fromInt_za3lpa$(int);
    var tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5;
    tmp$_0 = getKClass(Int);
    if (equals(tmp$_0, getKClass(Long))) {
      Kotlin.isType(tmp$_1 = int, Kotlin.Long) ? tmp$_1 : throwCCE();
      if (int.toNumber() < 0)
        tmp$_5 = Sign$NEGATIVE_getInstance();
      else if (int.toNumber() > 0)
        tmp$_5 = Sign$POSITIVE_getInstance();
      else
        tmp$_5 = Sign$ZERO_getInstance();
    }
     else if (equals(tmp$_0, PrimitiveClasses$intClass)) {
      typeof (tmp$_2 = int) === 'number' ? tmp$_2 : throwCCE();
      if (int < 0)
        tmp$_5 = Sign$NEGATIVE_getInstance();
      else if (int > 0)
        tmp$_5 = Sign$POSITIVE_getInstance();
      else
        tmp$_5 = Sign$ZERO_getInstance();
    }
     else if (equals(tmp$_0, PrimitiveClasses$shortClass)) {
      typeof (tmp$_3 = int) === 'number' ? tmp$_3 : throwCCE();
      if (int < 0)
        tmp$_5 = Sign$NEGATIVE_getInstance();
      else if (int > 0)
        tmp$_5 = Sign$POSITIVE_getInstance();
      else
        tmp$_5 = Sign$ZERO_getInstance();
    }
     else if (equals(tmp$_0, PrimitiveClasses$byteClass)) {
      typeof (tmp$_4 = int) === 'number' ? tmp$_4 : throwCCE();
      if (int < 0)
        tmp$_5 = Sign$NEGATIVE_getInstance();
      else if (int > 0)
        tmp$_5 = Sign$POSITIVE_getInstance();
      else
        tmp$_5 = Sign$ZERO_getInstance();
    }
     else
      throw RuntimeException_init('Unsupported type ' + toString(getKClass(Int).simpleName));
    return new BigInteger(tmp$, tmp$_5);
  };
  BigInteger$Companion.prototype.fromShort_mq22fl$ = function (short) {
    var tmp$ = this.arithmetic_0.fromShort_mq22fl$(short);
    var tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5;
    tmp$_0 = getKClass(Int);
    if (equals(tmp$_0, getKClass(Long))) {
      Kotlin.isType(tmp$_1 = short, Kotlin.Long) ? tmp$_1 : throwCCE();
      if (short.toNumber() < 0)
        tmp$_5 = Sign$NEGATIVE_getInstance();
      else if (short.toNumber() > 0)
        tmp$_5 = Sign$POSITIVE_getInstance();
      else
        tmp$_5 = Sign$ZERO_getInstance();
    }
     else if (equals(tmp$_0, PrimitiveClasses$intClass)) {
      typeof (tmp$_2 = short) === 'number' ? tmp$_2 : throwCCE();
      if (short < 0)
        tmp$_5 = Sign$NEGATIVE_getInstance();
      else if (short > 0)
        tmp$_5 = Sign$POSITIVE_getInstance();
      else
        tmp$_5 = Sign$ZERO_getInstance();
    }
     else if (equals(tmp$_0, PrimitiveClasses$shortClass)) {
      typeof (tmp$_3 = short) === 'number' ? tmp$_3 : throwCCE();
      if (short < 0)
        tmp$_5 = Sign$NEGATIVE_getInstance();
      else if (short > 0)
        tmp$_5 = Sign$POSITIVE_getInstance();
      else
        tmp$_5 = Sign$ZERO_getInstance();
    }
     else if (equals(tmp$_0, PrimitiveClasses$byteClass)) {
      typeof (tmp$_4 = short) === 'number' ? tmp$_4 : throwCCE();
      if (short < 0)
        tmp$_5 = Sign$NEGATIVE_getInstance();
      else if (short > 0)
        tmp$_5 = Sign$POSITIVE_getInstance();
      else
        tmp$_5 = Sign$ZERO_getInstance();
    }
     else
      throw RuntimeException_init('Unsupported type ' + toString(getKClass(Int).simpleName));
    return new BigInteger(tmp$, tmp$_5);
  };
  BigInteger$Companion.prototype.fromByte_s8j3t7$ = function (byte) {
    var tmp$ = this.arithmetic_0.fromByte_s8j3t7$(byte);
    var tmp$_0, tmp$_1, tmp$_2, tmp$_3, tmp$_4, tmp$_5;
    tmp$_0 = getKClass(Int);
    if (equals(tmp$_0, getKClass(Long))) {
      Kotlin.isType(tmp$_1 = byte, Kotlin.Long) ? tmp$_1 : throwCCE();
      if (byte.toNumber() < 0)
        tmp$_5 = Sign$NEGATIVE_getInstance();
      else if (byte.toNumber() > 0)
        tmp$_5 = Sign$POSITIVE_getInstance();
      else
        tmp$_5 = Sign$ZERO_getInstance();
    }
     else if (equals(tmp$_0, PrimitiveClasses$intClass)) {
      typeof (tmp$_2 = byte) === 'number' ? tmp$_2 : throwCCE();
      if (byte < 0)
        tmp$_5 = Sign$NEGATIVE_getInstance();
      else if (byte > 0)
        tmp$_5 = Sign$POSITIVE_getInstance();
      else
        tmp$_5 = Sign$ZERO_getInstance();
    }
     else if (equals(tmp$_0, PrimitiveClasses$shortClass)) {
      typeof (tmp$_3 = byte) === 'number' ? tmp$_3 : throwCCE();
      if (byte < 0)
        tmp$_5 = Sign$NEGATIVE_getInstance();
      else if (byte > 0)
        tmp$_5 = Sign$POSITIVE_getInstance();
      else
        tmp$_5 = Sign$ZERO_getInstance();
    }
     else if (equals(tmp$_0, PrimitiveClasses$byteClass)) {
      typeof (tmp$_4 = byte) === 'number' ? tmp$_4 : throwCCE();
      if (byte < 0)
        tmp$_5 = Sign$NEGATIVE_getInstance();
      else if (byte > 0)
        tmp$_5 = Sign$POSITIVE_getInstance();
      else
        tmp$_5 = Sign$ZERO_getInstance();
    }
     else
      throw RuntimeException_init('Unsupported type ' + toString(getKClass(Int).simpleName));
    return new BigInteger(tmp$, tmp$_5);
  };
  BigInteger$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var BigInteger$Companion_instance = null;
  function BigInteger$Companion_getInstance() {
    if (BigInteger$Companion_instance === null) {
      new BigInteger$Companion();
    }
    return BigInteger$Companion_instance;
  }
  BigInteger.prototype.isResultZero_0 = function (resultMagnitude) {
    return BigInteger$Companion_getInstance().arithmetic_0.compare_xwzc9q$(resultMagnitude, BigInteger$Companion_getInstance().arithmetic_0.ZERO) === 0;
  };
  BigInteger.prototype.add_h9ne0y$ = function (other) {
    var tmp$;
    var comparison = BigInteger$Companion_getInstance().arithmetic_0.compare_xwzc9q$(this.magnitude_8be2vx$, other.magnitude_8be2vx$);
    if (other.sign === this.sign) {
      return new BigInteger(BigInteger$Companion_getInstance().arithmetic_0.add_xwzc9q$(this.magnitude_8be2vx$, other.magnitude_8be2vx$), this.sign);
    }
     else {
      if (comparison > 0)
        tmp$ = new BigInteger(BigInteger$Companion_getInstance().arithmetic_0.substract_xwzc9q$(this.magnitude_8be2vx$, other.magnitude_8be2vx$), this.sign);
      else if (comparison < 0)
        tmp$ = new BigInteger(BigInteger$Companion_getInstance().arithmetic_0.substract_xwzc9q$(other.magnitude_8be2vx$, this.magnitude_8be2vx$), other.sign);
      else {
        tmp$ = BigInteger$Companion_getInstance().ZERO;
      }
    }
    return tmp$;
  };
  BigInteger.prototype.subtract_h9ne0y$ = function (other) {
    var tmp$;
    var comparison = BigInteger$Companion_getInstance().arithmetic_0.compare_xwzc9q$(this.magnitude_8be2vx$, other.magnitude_8be2vx$);
    if (other.sign === this.sign) {
      if (comparison > 0)
        tmp$ = new BigInteger(BigInteger$Companion_getInstance().arithmetic_0.substract_xwzc9q$(this.magnitude_8be2vx$, other.magnitude_8be2vx$), this.sign);
      else if (comparison < 0)
        tmp$ = new BigInteger(BigInteger$Companion_getInstance().arithmetic_0.substract_xwzc9q$(other.magnitude_8be2vx$, this.magnitude_8be2vx$), this.sign.not());
      else {
        tmp$ = BigInteger$Companion_getInstance().ZERO;
      }
    }
     else {
      return new BigInteger(BigInteger$Companion_getInstance().arithmetic_0.add_xwzc9q$(this.magnitude_8be2vx$, other.magnitude_8be2vx$), this.sign);
    }
    return tmp$;
  };
  BigInteger.prototype.multiply_h9ne0y$ = function (other) {
    var tmp$, tmp$_0;
    if (this.isZero() || other.isZero()) {
      return BigInteger$Companion_getInstance().ZERO;
    }
    if (this.sign !== other.sign) {
      tmp$ = Sign$NEGATIVE_getInstance();
    }
     else {
      tmp$ = Sign$POSITIVE_getInstance();
    }
    var sign = tmp$;
    if (sign === Sign$POSITIVE_getInstance()) {
      tmp$_0 = new BigInteger(BigInteger$Companion_getInstance().arithmetic_0.multiply_xwzc9q$(this.magnitude_8be2vx$, other.magnitude_8be2vx$), sign);
    }
     else {
      tmp$_0 = new BigInteger(BigInteger$Companion_getInstance().arithmetic_0.multiply_xwzc9q$(this.magnitude_8be2vx$, other.magnitude_8be2vx$), sign);
    }
    return tmp$_0;
  };
  BigInteger.prototype.divide_h9ne0y$ = function (other) {
    var tmp$;
    if (other.isZero()) {
      throw new ArithmeticException('Division by zero! ' + this + ' / ' + other);
    }
    if (this.sign !== other.sign) {
      tmp$ = Sign$NEGATIVE_getInstance();
    }
     else {
      tmp$ = Sign$POSITIVE_getInstance();
    }
    var sign = tmp$;
    return new BigInteger(BigInteger$Companion_getInstance().arithmetic_0.divide_xwzc9q$(this.magnitude_8be2vx$, other.magnitude_8be2vx$).first, sign);
  };
  BigInteger.prototype.remainder_h9ne0y$ = function (other) {
    var tmp$;
    if (other.isZero()) {
      throw new ArithmeticException('Division by zero! ' + this + ' / ' + other);
    }
    if (this.sign !== other.sign) {
      tmp$ = Sign$NEGATIVE_getInstance();
    }
     else {
      tmp$ = Sign$POSITIVE_getInstance();
    }
    var sign = tmp$;
    return new BigInteger(BigInteger$Companion_getInstance().arithmetic_0.divide_xwzc9q$(this.magnitude_8be2vx$, other.magnitude_8be2vx$).second, sign);
  };
  BigInteger.prototype.divideAndRemainder_h9ne0y$ = function (other) {
    var tmp$;
    if (other.isZero()) {
      throw new ArithmeticException('Division by zero! ' + this + ' / ' + other);
    }
    if (this.sign !== other.sign) {
      tmp$ = Sign$NEGATIVE_getInstance();
    }
     else {
      tmp$ = Sign$POSITIVE_getInstance();
    }
    var sign = tmp$;
    return new Pair(new BigInteger(BigInteger$Companion_getInstance().arithmetic_0.divide_xwzc9q$(this.magnitude_8be2vx$, other.magnitude_8be2vx$).first, sign), new BigInteger(BigInteger$Companion_getInstance().arithmetic_0.divide_xwzc9q$(this.magnitude_8be2vx$, other.magnitude_8be2vx$).second, sign));
  };
  BigInteger.prototype.compare_h9ne0y$ = function (other) {
    if (this.isZero() && other.isZero())
      return 0;
    if (other.isZero())
      return 1;
    if (this.isZero())
      return -1;
    if (this.sign !== other.sign)
      return this.sign === Sign$POSITIVE_getInstance() ? 1 : -1;
    return BigInteger$Companion_getInstance().arithmetic_0.compare_xwzc9q$(this.magnitude_8be2vx$, other.magnitude_8be2vx$);
  };
  BigInteger.prototype.isZero = function () {
    return this.sign === Sign$ZERO_getInstance();
  };
  BigInteger.prototype.shl_za3lpa$ = function (places) {
    return new BigInteger(BigInteger$Companion_getInstance().arithmetic_0.shiftLeft_dpg1yx$(this.magnitude_8be2vx$, places), this.sign);
  };
  BigInteger.prototype.shr_za3lpa$ = function (places) {
    return new BigInteger(BigInteger$Companion_getInstance().arithmetic_0.shiftRight_dpg1yx$(this.magnitude_8be2vx$, places), this.sign);
  };
  BigInteger.prototype.plus_h9ne0y$ = function (other) {
    return this.add_h9ne0y$(other);
  };
  BigInteger.prototype.minus_h9ne0y$ = function (other) {
    return this.subtract_h9ne0y$(other);
  };
  BigInteger.prototype.times_h9ne0y$ = function (other) {
    return this.multiply_h9ne0y$(other);
  };
  BigInteger.prototype.div_h9ne0y$ = function (other) {
    return this.divide_h9ne0y$(other);
  };
  BigInteger.prototype.rem_h9ne0y$ = function (other) {
    return this.remainder_h9ne0y$(other);
  };
  BigInteger.prototype.divrem_h9ne0y$ = function (other) {
    var result = this.divideAndRemainder_h9ne0y$(other);
    return new BigInteger$QuotientAndRemainder(result.first, result.second);
  };
  BigInteger.prototype.and_h9ne0y$ = function (other) {
    return new BigInteger(BigInteger$Companion_getInstance().arithmetic_0.and_xwzc9q$(this.magnitude_8be2vx$, other.magnitude_8be2vx$), this.sign);
  };
  BigInteger.prototype.or_h9ne0y$ = function (other) {
    return new BigInteger(BigInteger$Companion_getInstance().arithmetic_0.or_xwzc9q$(this.magnitude_8be2vx$, other.magnitude_8be2vx$), this.sign);
  };
  BigInteger.prototype.xor_h9ne0y$ = function (other) {
    return new BigInteger(BigInteger$Companion_getInstance().arithmetic_0.xor_xwzc9q$(this.magnitude_8be2vx$, other.magnitude_8be2vx$), this.sign);
  };
  BigInteger.prototype.invPrecise = function () {
    return new BigInteger(BigInteger$Companion_getInstance().arithmetic_0.inv_11rb$(this.magnitude_8be2vx$), this.sign);
  };
  BigInteger.prototype.compareTo_11rb$ = function (other) {
    var tmp$;
    if (Kotlin.isType(other, BigInteger))
      tmp$ = this.compare_h9ne0y$(other);
    else if (Kotlin.isType(other, Kotlin.Long))
      tmp$ = this.compare_h9ne0y$(BigInteger$Companion_getInstance().fromLong_s8cxhz$(other));
    else if (typeof other === 'number')
      tmp$ = this.compare_h9ne0y$(BigInteger$Companion_getInstance().fromInt_za3lpa$(other));
    else if (typeof other === 'number')
      tmp$ = this.compare_h9ne0y$(BigInteger$Companion_getInstance().fromShort_mq22fl$(other));
    else if (typeof other === 'number')
      tmp$ = this.compare_h9ne0y$(BigInteger$Companion_getInstance().fromByte_s8j3t7$(other));
    else
      throw RuntimeException_init('Invalid comparison type for BigInteger: ' + toString(Kotlin.getKClassFromExpression(other).simpleName));
    return tmp$;
  };
  BigInteger.prototype.equals = function (other) {
    var tmp$;
    if (Kotlin.isType(other, BigInteger))
      tmp$ = this.compare_h9ne0y$(other);
    else if (Kotlin.isType(other, Kotlin.Long))
      tmp$ = this.compare_h9ne0y$(BigInteger$Companion_getInstance().fromLong_s8cxhz$(other));
    else if (typeof other === 'number')
      tmp$ = this.compare_h9ne0y$(BigInteger$Companion_getInstance().fromInt_za3lpa$(other));
    else if (typeof other === 'number')
      tmp$ = this.compare_h9ne0y$(BigInteger$Companion_getInstance().fromShort_mq22fl$(other));
    else if (typeof other === 'number')
      tmp$ = this.compare_h9ne0y$(BigInteger$Companion_getInstance().fromByte_s8j3t7$(other));
    else
      tmp$ = -1;
    var comparison = tmp$;
    return comparison === 0;
  };
  BigInteger.prototype.toString = function () {
    return this.toString_za3lpa$(10);
  };
  BigInteger.prototype.toString_za3lpa$ = function (base) {
    var tmp$;
    if (this.sign === Sign$NEGATIVE_getInstance()) {
      tmp$ = '-';
    }
     else {
      tmp$ = '';
    }
    var sign = tmp$;
    return sign + BigInteger$Companion_getInstance().arithmetic_0.toString_dpg1yx$(this.magnitude_8be2vx$, base);
  };
  function BigInteger$QuotientAndRemainder(quotient, remainder) {
    this.quotient = quotient;
    this.remainder = remainder;
  }
  BigInteger$QuotientAndRemainder.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'QuotientAndRemainder',
    interfaces: []
  };
  BigInteger$QuotientAndRemainder.prototype.component1 = function () {
    return this.quotient;
  };
  BigInteger$QuotientAndRemainder.prototype.component2 = function () {
    return this.remainder;
  };
  BigInteger$QuotientAndRemainder.prototype.copy_u68je0$ = function (quotient, remainder) {
    return new BigInteger$QuotientAndRemainder(quotient === void 0 ? this.quotient : quotient, remainder === void 0 ? this.remainder : remainder);
  };
  BigInteger$QuotientAndRemainder.prototype.toString = function () {
    return 'QuotientAndRemainder(quotient=' + Kotlin.toString(this.quotient) + (', remainder=' + Kotlin.toString(this.remainder)) + ')';
  };
  BigInteger$QuotientAndRemainder.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.quotient) | 0;
    result = result * 31 + Kotlin.hashCode(this.remainder) | 0;
    return result;
  };
  BigInteger$QuotientAndRemainder.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.quotient, other.quotient) && Kotlin.equals(this.remainder, other.remainder)))));
  };
  BigInteger.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BigInteger',
    interfaces: [Comparable]
  };
  function BigIntegerArithmetic() {
  }
  BigIntegerArithmetic.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'BigIntegerArithmetic',
    interfaces: []
  };
  function ConversionExtensions() {
  }
  ConversionExtensions.prototype.toBigInteger_mts6qi$ = function ($receiver) {
    return BigInteger$Companion_getInstance().fromLong_s8cxhz$($receiver);
  };
  ConversionExtensions.prototype.toBigInteger_s8ev3n$ = function ($receiver) {
    return BigInteger$Companion_getInstance().fromInt_za3lpa$($receiver);
  };
  ConversionExtensions.prototype.toBigInteger_5vcgdc$ = function ($receiver) {
    return BigInteger$Companion_getInstance().fromShort_mq22fl$($receiver);
  };
  ConversionExtensions.prototype.toBigInteger_mz3mee$ = function ($receiver) {
    return BigInteger$Companion_getInstance().fromByte_s8j3t7$($receiver);
  };
  ConversionExtensions.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'ConversionExtensions',
    interfaces: []
  };
  var chosenArithmetic;
  function Quadruple(a, b, c, d) {
    this.a = a;
    this.b = b;
    this.c = c;
    this.d = d;
  }
  Quadruple.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Quadruple',
    interfaces: []
  };
  Quadruple.prototype.component1 = function () {
    return this.a;
  };
  Quadruple.prototype.component2 = function () {
    return this.b;
  };
  Quadruple.prototype.component3 = function () {
    return this.c;
  };
  Quadruple.prototype.component4 = function () {
    return this.d;
  };
  Quadruple.prototype.copy_18alr2$ = function (a, b, c, d) {
    return new Quadruple(a === void 0 ? this.a : a, b === void 0 ? this.b : b, c === void 0 ? this.c : c, d === void 0 ? this.d : d);
  };
  Quadruple.prototype.toString = function () {
    return 'Quadruple(a=' + Kotlin.toString(this.a) + (', b=' + Kotlin.toString(this.b)) + (', c=' + Kotlin.toString(this.c)) + (', d=' + Kotlin.toString(this.d)) + ')';
  };
  Quadruple.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.a) | 0;
    result = result * 31 + Kotlin.hashCode(this.b) | 0;
    result = result * 31 + Kotlin.hashCode(this.c) | 0;
    result = result * 31 + Kotlin.hashCode(this.d) | 0;
    return result;
  };
  Quadruple.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.a, other.a) && Kotlin.equals(this.b, other.b) && Kotlin.equals(this.c, other.c) && Kotlin.equals(this.d, other.d)))));
  };
  function UIntArray$lambda(closure$init) {
    return function (index) {
      return closure$init(index).data;
    };
  }
  function BigInteger32Arithmetic() {
    BigInteger32Arithmetic_instance = this;
    this.baseMask = new ULong(new Kotlin.Long(-1, 0));
    this.overflowMask = new ULong(new Kotlin.Long(0, 1));
    this.lowerMask = new ULong(Kotlin.Long.fromInt(65535));
    this.base = new UInt(-1);
    this.basePowerOfTwo_pofd4c$_0 = 32;
    this.ZERO_n9hbgb$_0 = UIntArray_init(0);
    this.ONE_ei4pgf$_0 = new UIntArray(Kotlin.fillArray(new Int32Array(1), UIntArray$lambda(BigInteger32Arithmetic$ONE$lambda)));
  }
  Object.defineProperty(BigInteger32Arithmetic.prototype, 'basePowerOfTwo', {
    get: function () {
      return this.basePowerOfTwo_pofd4c$_0;
    }
  });
  Object.defineProperty(BigInteger32Arithmetic.prototype, 'ZERO', {
    get: function () {
      return this.ZERO_n9hbgb$_0;
    }
  });
  Object.defineProperty(BigInteger32Arithmetic.prototype, 'ONE', {
    get: function () {
      return this.ONE_ei4pgf$_0;
    }
  });
  BigInteger32Arithmetic.prototype.numberOfLeadingZeroes_11rc$ = function (value) {
    var x = value;
    var y;
    var n = this.basePowerOfTwo;
    y = new UInt(x.data >>> 16);
    if (!(y != null ? y.equals(new UInt(0)) : null)) {
      n = n - 16 | 0;
      x = y;
    }
    y = new UInt(x.data >>> 8);
    if (!(y != null ? y.equals(new UInt(0)) : null)) {
      n = n - 8 | 0;
      x = y;
    }
    y = new UInt(x.data >>> 4);
    if (!(y != null ? y.equals(new UInt(0)) : null)) {
      n = n - 4 | 0;
      x = y;
    }
    y = new UInt(x.data >>> 2);
    if (!(y != null ? y.equals(new UInt(0)) : null)) {
      n = n - 2 | 0;
      x = y;
    }
    y = new UInt(x.data >>> 1);
    if (!(y != null ? y.equals(new UInt(0)) : null)) {
      return n - 2 | 0;
    }
    return n - x.data | 0;
  };
  BigInteger32Arithmetic.prototype.bitLength_11rb$ = function (value) {
    var mostSignificant = value.get_za3lpa$(value.size - 1 | 0);
    return this.bitLength_s87ys9$(mostSignificant) + Kotlin.imul(value.size - 1 | 0, this.basePowerOfTwo) | 0;
  };
  BigInteger32Arithmetic.prototype.bitLength_s87ys9$ = function (value) {
    return this.basePowerOfTwo - this.numberOfLeadingZeroes_11rc$(value) | 0;
  };
  var checkIndexOverflow = Kotlin.kotlin.collections.checkIndexOverflow_za3lpa$;
  var copyOfRange = Kotlin.kotlin.collections.copyOfRange_6pxxqk$;
  BigInteger32Arithmetic.prototype.removeLeadingZeroes_rsvixa$ = function (bigInteger) {
    var tmp$;
    var lastIndex = -1;
    var index = 0;
    tmp$ = bigInteger.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      checkIndexOverflow(index);
      if (!(item != null ? item.equals(new UInt(0)) : null))
        lastIndex = index;
      index = index + 1 | 0;
    }
    var firstEmpty = lastIndex + 1 | 0;
    if (firstEmpty === -1 || firstEmpty === 0) {
      return this.ZERO;
    }
    return new UIntArray(copyOfRange(bigInteger.storage, 0, firstEmpty));
  };
  function BigInteger32Arithmetic$shiftLeft$lambda(closure$shiftWords, closure$operand) {
    return function (it) {
      if (0 <= it && it < closure$shiftWords)
        return new UInt(0);
      else
        return closure$operand.get_za3lpa$(it - closure$shiftWords | 0);
    };
  }
  function BigInteger32Arithmetic$shiftLeft$lambda_0(closure$shiftWords, closure$operand, closure$shiftBits, this$BigInteger32Arithmetic, closure$originalSize, closure$wordsNeeded) {
    return function (it) {
      if (0 <= it && it < closure$shiftWords)
        return new UInt(0);
      else if (it === closure$shiftWords) {
        var $this = closure$operand.get_za3lpa$(it - closure$shiftWords | 0);
        var bitCount = closure$shiftBits;
        return new UInt($this.data << bitCount);
      }
       else if ((closure$shiftWords + 1 | 0) <= it && it < (closure$originalSize + closure$shiftWords | 0)) {
        var $this_0 = closure$operand.get_za3lpa$(it - closure$shiftWords | 0);
        var bitCount_0 = closure$shiftBits;
        var tmp$ = new UInt($this_0.data << bitCount_0);
        var $this_1 = closure$operand.get_za3lpa$(it - closure$shiftWords - 1 | 0);
        var bitCount_1 = this$BigInteger32Arithmetic.basePowerOfTwo - closure$shiftBits | 0;
        var other = new UInt($this_1.data >>> bitCount_1);
        return new UInt(tmp$.data | other.data);
      }
       else if (it === (closure$originalSize + closure$wordsNeeded - 1 | 0)) {
        var $this_2 = closure$operand.get_za3lpa$(it - closure$wordsNeeded | 0);
        var bitCount_2 = this$BigInteger32Arithmetic.basePowerOfTwo - closure$shiftBits | 0;
        return new UInt($this_2.data >>> bitCount_2);
      }
       else {
        throw RuntimeException_init('Invalid case ' + it);
      }
    };
  }
  BigInteger32Arithmetic.prototype.shiftLeft_dpg1yx$ = function (operand, places) {
    var tmp$;
    if (operand.isEmpty() || places === 0) {
      return operand;
    }
    var originalSize = operand.size;
    var leadingZeroes = this.numberOfLeadingZeroes_11rc$(operand.get_za3lpa$(operand.size - 1 | 0));
    var shiftWords = places / this.basePowerOfTwo | 0;
    var shiftBits = places % this.basePowerOfTwo;
    if (shiftBits > leadingZeroes) {
      tmp$ = shiftWords + 1 | 0;
    }
     else {
      tmp$ = shiftWords;
    }
    var wordsNeeded = tmp$;
    if (shiftBits === 0) {
      var size = operand.size + wordsNeeded | 0;
      return new UIntArray(Kotlin.fillArray(new Int32Array(size), UIntArray$lambda(BigInteger32Arithmetic$shiftLeft$lambda(shiftWords, operand))));
    }
    var size_0 = operand.size + wordsNeeded | 0;
    return new UIntArray(Kotlin.fillArray(new Int32Array(size_0), UIntArray$lambda(BigInteger32Arithmetic$shiftLeft$lambda_0(shiftWords, operand, shiftBits, this, originalSize, wordsNeeded))));
  };
  function BigInteger32Arithmetic$shiftRight$lambda(closure$operand, closure$wordsToDiscard, closure$shiftBits, this$BigInteger32Arithmetic) {
    return function (it) {
      var tmp$;
      tmp$ = closure$operand.size - 1 - closure$wordsToDiscard | 0;
      if (0 <= it && it < tmp$) {
        var $this = closure$operand.get_za3lpa$(it + closure$wordsToDiscard | 0);
        var bitCount = closure$shiftBits;
        var tmp$_0 = new UInt($this.data >>> bitCount);
        var $this_0 = closure$operand.get_za3lpa$(it + closure$wordsToDiscard + 1 | 0);
        var bitCount_0 = this$BigInteger32Arithmetic.basePowerOfTwo - closure$shiftBits | 0;
        var other = new UInt($this_0.data << bitCount_0);
        return new UInt(tmp$_0.data | other.data);
      }
       else if (it === (closure$operand.size - 1 - closure$wordsToDiscard | 0)) {
        var $this_1 = closure$operand.get_za3lpa$(it + closure$wordsToDiscard | 0);
        var bitCount_1 = closure$shiftBits;
        return new UInt($this_1.data >>> bitCount_1);
      }
       else {
        throw RuntimeException_init('Invalid case ' + it);
      }
    };
  }
  BigInteger32Arithmetic.prototype.shiftRight_dpg1yx$ = function (operand, places) {
    if (operand.isEmpty() || places === 0) {
      return operand;
    }
    var shiftBits = places % this.basePowerOfTwo;
    var wordsToDiscard = places / this.basePowerOfTwo | 0;
    if (wordsToDiscard >= operand.size) {
      return this.ZERO;
    }
    if (shiftBits === 0) {
      var fromIndex = operand.size - wordsToDiscard | 0;
      var toIndex = operand.size;
      new UIntArray(copyOfRange(operand.storage, fromIndex, toIndex));
    }
    if (operand.size > 1 && (operand.size - wordsToDiscard | 0) === 1) {
      return new UIntArray(new Int32Array([(new UInt(operand.get_za3lpa$(operand.size - 1 | 0).data >>> shiftBits)).toInt()]));
    }
    var size = operand.size - wordsToDiscard | 0;
    var result = new UIntArray(Kotlin.fillArray(new Int32Array(size), UIntArray$lambda(BigInteger32Arithmetic$shiftRight$lambda(operand, wordsToDiscard, shiftBits, this))));
    return result;
  };
  BigInteger32Arithmetic.prototype.normalize_uzv4wk$ = function (dividend, divisor) {
    var divisorSize = divisor.size;
    var normalizationShift = this.numberOfLeadingZeroes_11rc$(divisor.get_za3lpa$(divisorSize - 1 | 0));
    var divisorNormalized = this.shl_ap2q72$(divisor, normalizationShift);
    var dividendNormalized = this.shl_ap2q72$(dividend, normalizationShift);
    return new Triple(dividendNormalized, divisorNormalized, normalizationShift);
  };
  BigInteger32Arithmetic.prototype.normalize_rsvixa$ = function (operand) {
    var normalizationShift = this.numberOfLeadingZeroes_11rc$(operand.get_za3lpa$(operand.size - 1 | 0));
    return new Pair(this.shl_ap2q72$(operand, normalizationShift), normalizationShift);
  };
  BigInteger32Arithmetic.prototype.denormalize_vxzh8$ = function (remainderNormalized, normalizationShift) {
    var remainder = this.shr_ap2q72$(remainderNormalized, normalizationShift);
    return remainder;
  };
  var uintCompare = Kotlin.kotlin.uintCompare_vux9f0$;
  BigInteger32Arithmetic.prototype.compare_xwzc9q$ = function (first, second) {
    if (first.size > second.size) {
      return 1;
    }
    if (second.size > first.size) {
      return -1;
    }
    var counter = first.size - 1 | 0;
    var firstIsLarger = false;
    var bothAreEqual = true;
    while (counter >= 0) {
      var $this = first.get_za3lpa$(counter);
      var other = second.get_za3lpa$(counter);
      if (uintCompare($this.data, other.data) > 0) {
        firstIsLarger = true;
        bothAreEqual = false;
        break;
      }
      var $this_0 = first.get_za3lpa$(counter);
      var other_0 = second.get_za3lpa$(counter);
      if (uintCompare($this_0.data, other_0.data) < 0) {
        firstIsLarger = false;
        bothAreEqual = false;
        break;
      }
      counter = counter - 1 | 0;
    }
    if (bothAreEqual) {
      return 0;
    }
    if (firstIsLarger) {
      return 1;
    }
     else {
      return -1;
    }
  };
  function BigInteger32Arithmetic$add$lambda(it) {
    return new UInt(0);
  }
  var L4294967295 = new Kotlin.Long(-1, 0);
  BigInteger32Arithmetic.prototype.add_xwzc9q$ = function (first, second) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    if (first.size === 1 && ((tmp$ = first.get_za3lpa$(0)) != null ? tmp$.equals(new UInt(0)) : null))
      return second;
    if (second.size === 1 && ((tmp$_0 = second.get_za3lpa$(0)) != null ? tmp$_0.equals(new UInt(0)) : null))
      return first;
    if (first.size > second.size) {
      tmp$_1 = new Quadruple(first.size, second.size, first, second);
    }
     else {
      tmp$_1 = new Quadruple(second.size, first.size, second, first);
    }
    var tmp$_4 = tmp$_1;
    var maxLength = tmp$_4.component1()
    , minLength = tmp$_4.component2()
    , largerData = tmp$_4.component3()
    , smallerData = tmp$_4.component4();
    var size = maxLength + 1 | 0;
    var result = new UIntArray(Kotlin.fillArray(new Int32Array(size), UIntArray$lambda(BigInteger32Arithmetic$add$lambda)));
    var i = 0;
    var sum = new ULong(Kotlin.Long.ZERO);
    while (i < minLength) {
      var $this = sum;
      var other = largerData.get_za3lpa$(i);
      var $this_0 = new ULong($this.data.add((new ULong(Kotlin.Long.fromInt(other.data).and(L4294967295))).data));
      var other_0 = smallerData.get_za3lpa$(i);
      sum = new ULong($this_0.data.add((new ULong(Kotlin.Long.fromInt(other_0.data).and(L4294967295))).data));
      var tmp$_5 = i;
      var $this_1 = sum;
      var other_1 = this.baseMask;
      result.set_6sqrdv$(tmp$_5, new UInt((new ULong($this_1.data.and(other_1.data))).data.toInt()));
      var $this_2 = sum;
      var bitCount = this.basePowerOfTwo;
      sum = new ULong($this_2.data.shiftRightUnsigned(bitCount));
      i = i + 1 | 0;
    }
    while (true) {
      if (sum != null ? sum.equals(new ULong(Kotlin.Long.ZERO)) : null) {
        while (i < maxLength) {
          result.set_6sqrdv$(i, largerData.get_za3lpa$(i));
          i = i + 1 | 0;
        }
        if ((tmp$_2 = result.get_za3lpa$(result.size - 1 | 0)) != null ? tmp$_2.equals(new UInt(0)) : null) {
          var toIndex = result.size - 1 | 0;
          tmp$_3 = new UIntArray(copyOfRange(result.storage, 0, toIndex));
        }
         else {
          tmp$_3 = result;
        }
        return tmp$_3;
      }
      if (i === maxLength) {
        result.set_6sqrdv$(maxLength, new UInt(sum.data.toInt()));
        return result;
      }
      var $this_3 = sum;
      var other_2 = largerData.get_za3lpa$(i);
      sum = new ULong($this_3.data.add((new ULong(Kotlin.Long.fromInt(other_2.data).and(L4294967295))).data));
      var tmp$_6 = i;
      var $this_4 = sum;
      var other_3 = this.baseMask;
      result.set_6sqrdv$(tmp$_6, new UInt((new ULong($this_4.data.and(other_3.data))).data.toInt()));
      var $this_5 = sum;
      var bitCount_0 = this.basePowerOfTwo;
      sum = new ULong($this_5.data.shiftRightUnsigned(bitCount_0));
      i = i + 1 | 0;
    }
  };
  function BigInteger32Arithmetic$substract$lambda(it) {
    return new UInt(0);
  }
  var ArrayList_init = Kotlin.kotlin.collections.ArrayList_init_287e2$;
  BigInteger32Arithmetic.prototype.substract_xwzc9q$ = function (first, second) {
    var tmp$, tmp$_0;
    var firstIsLarger = this.compare_xwzc9q$(first, second) === 1;
    if (firstIsLarger) {
      tmp$ = new Quadruple(first.size, second.size, first, second);
    }
     else {
      tmp$ = new Quadruple(second.size, first.size, second, first);
    }
    var tmp$_1 = tmp$;
    var largerLength = tmp$_1.component1()
    , smallerLength = tmp$_1.component2()
    , largerData = tmp$_1.component3()
    , smallerData = tmp$_1.component4();
    var size = largerLength + 1 | 0;
    var result = new UIntArray(Kotlin.fillArray(new Int32Array(size), UIntArray$lambda(BigInteger32Arithmetic$substract$lambda)));
    var i = 0;
    var diff = new ULong(Kotlin.Long.ZERO);
    while (i < smallerLength) {
      var $this = largerData.get_za3lpa$(i).toULong();
      var other = smallerData.get_za3lpa$(i);
      var $this_0 = new ULong($this.data.subtract((new ULong(Kotlin.Long.fromInt(other.data).and(L4294967295))).data));
      var other_0 = diff;
      diff = new ULong($this_0.data.subtract(other_0.data));
      result.set_6sqrdv$(i, new UInt(diff.data.toInt()));
      var $this_1 = diff;
      var other_1 = this.overflowMask;
      var $this_2 = new ULong($this_1.data.and(other_1.data));
      var bitCount = this.basePowerOfTwo;
      diff = new ULong($this_2.data.shiftRightUnsigned(bitCount));
      i = i + 1 | 0;
    }
    while (!(diff != null ? diff.equals(new ULong(Kotlin.Long.ZERO)) : null)) {
      var $this_3 = largerData.get_za3lpa$(i);
      var $this_4 = new ULong(Kotlin.Long.fromInt($this_3.data).and(L4294967295));
      var other_2 = diff;
      diff = new ULong($this_4.data.subtract(other_2.data));
      var $this_5 = diff;
      var other_3 = this.overflowMask;
      var $this_6 = new ULong($this_5.data.and(other_3.data));
      var bitCount_0 = this.basePowerOfTwo;
      if ((tmp$_0 = new ULong($this_6.data.shiftRightUnsigned(bitCount_0))) != null ? tmp$_0.equals(new ULong(Kotlin.Long.ONE)) : null) {
        var tmp$_2 = i;
        var $this_7 = diff;
        var other_4 = new ULong(Kotlin.Long.ONE);
        result.set_6sqrdv$(tmp$_2, new UInt((new ULong($this_7.data.subtract(other_4.data))).data.toInt()));
      }
       else {
        result.set_6sqrdv$(i, new UInt(diff.data.toInt()));
        diff = new ULong(Kotlin.Long.ZERO);
      }
      diff = new ULong(diff.data.shiftRightUnsigned(63));
      i = i + 1 | 0;
    }
    while (i < largerLength) {
      result.set_6sqrdv$(i, largerData.get_za3lpa$(i));
      i = i + 1 | 0;
    }
    var destination = ArrayList_init();
    var tmp$_3;
    tmp$_3 = result.iterator();
    while (tmp$_3.hasNext()) {
      var element = tmp$_3.next();
      if (element != null ? element.equals(new UInt(0)) : null)
        destination.add_11rb$(element);
    }
    if (destination.isEmpty()) {
      return this.ZERO;
    }
    var tmp$_4;
    var lastIndex = -1;
    var index = 0;
    tmp$_4 = result.iterator();
    while (tmp$_4.hasNext()) {
      var item = tmp$_4.next();
      checkIndexOverflow(index);
      if (!(item != null ? item.equals(new UInt(0)) : null))
        lastIndex = index;
      index = index + 1 | 0;
    }
    var firstEmpty = lastIndex + 1 | 0;
    return new UIntArray(copyOfRange(result.storage, 0, firstEmpty));
  };
  BigInteger32Arithmetic.prototype.multiply_oqfnby$ = function (first, second) {
    var result = new UInt(Kotlin.imul(first.data, second.data));
    var bitCount = this.basePowerOfTwo;
    var high = new UInt(result.data >>> bitCount);
    var low = result;
    return this.removeLeadingZeroes_rsvixa$(new UIntArray(new Int32Array([low.toInt(), high.toInt()])));
  };
  BigInteger32Arithmetic.prototype.multiply_rigg6l$ = function (first, second) {
    var tmp$;
    var result = UIntArray_init(first.size + 1 | 0);
    var product;
    var sum;
    tmp$ = first.size;
    for (var i = 0; i < tmp$; i++) {
      var $this = first.get_za3lpa$(i);
      product = new ULong((new ULong(Kotlin.Long.fromInt($this.data).and(L4294967295))).data.multiply((new ULong(Kotlin.Long.fromInt(second.data).and(L4294967295))).data));
      var $this_0 = result.get_za3lpa$(i);
      var tmp$_0 = new ULong(Kotlin.Long.fromInt($this_0.data).and(L4294967295));
      var other = this.baseMask;
      var other_0 = new UInt((new ULong(product.data.and(other.data))).data.toInt());
      sum = new ULong(tmp$_0.data.add((new ULong(Kotlin.Long.fromInt(other_0.data).and(L4294967295))).data));
      var $this_1 = sum;
      var other_1 = this.baseMask;
      result.set_6sqrdv$(i, new UInt((new ULong($this_1.data.and(other_1.data))).data.toInt()));
      var $this_2 = sum;
      var bitCount = this.basePowerOfTwo;
      sum = new ULong($this_2.data.shiftRightUnsigned(bitCount));
      var tmp$_1 = i + 1 | 0;
      var bitCount_0 = this.basePowerOfTwo;
      var tmp$_2 = new UInt((new ULong(product.data.shiftRightUnsigned(bitCount_0))).data.toInt());
      var other_2 = new UInt(sum.data.toInt());
      result.set_6sqrdv$(tmp$_1, new UInt(tmp$_2.data + other_2.data | 0));
    }
    return this.removeLeadingZeroes_rsvixa$(result);
  };
  BigInteger32Arithmetic.prototype.multiply_xwzc9q$ = function (first, second) {
    var tmp$, tmp$_0;
    var index = 0;
    var accumulator = this.ZERO;
    tmp$ = second.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var index_0 = checkIndexOverflow((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0));
      accumulator = this.plus_daxkpa$(accumulator, this.shl_ap2q72$(this.multiply_rigg6l$(first, element), Kotlin.imul(index_0, this.basePowerOfTwo)));
    }
    return accumulator;
  };
  BigInteger32Arithmetic.prototype.divide_xwzc9q$ = function (first, second) {
    return this.basicDivide_uzv4wk$(first, second);
  };
  var uintDivide = Kotlin.kotlin.uintDivide_oqfnby$;
  var uintRemainder = Kotlin.kotlin.uintRemainder_oqfnby$;
  var ulongDivide = Kotlin.kotlin.ulongDivide_jpm79w$;
  var ulongCompare = Kotlin.kotlin.ulongCompare_3pjtqy$;
  BigInteger32Arithmetic.prototype.basicDivide_uzv4wk$ = function (unnormalizedDividend, unnormalizedDivisor) {
    var tmp$, tmp$_0;
    if (this.compareTo_daxkpa$(unnormalizedDivisor, unnormalizedDividend) > 0) {
      return new Pair(this.ZERO, unnormalizedDividend);
    }
    if (unnormalizedDivisor.size === 1 && unnormalizedDividend.size === 1) {
      return new Pair(this.removeLeadingZeroes_rsvixa$(new UIntArray(new Int32Array([uintDivide(unnormalizedDividend.get_za3lpa$(0), unnormalizedDivisor.get_za3lpa$(0)).toInt()]))), this.removeLeadingZeroes_rsvixa$(new UIntArray(new Int32Array([uintRemainder(unnormalizedDividend.get_za3lpa$(0), unnormalizedDivisor.get_za3lpa$(0)).toInt()]))));
    }
    var bitPrecision = this.bitLength_11rb$(unnormalizedDividend) - this.bitLength_11rb$(unnormalizedDivisor) | 0;
    if (bitPrecision === 0) {
      return new Pair(new UIntArray(new Int32Array([(new UInt(1)).toInt()])), this.minus_daxkpa$(unnormalizedDividend, unnormalizedDivisor));
    }
    var tmp$_1 = this.normalize_uzv4wk$(unnormalizedDividend, unnormalizedDivisor);
    var dividend = tmp$_1.component1()
    , divisor = tmp$_1.component2()
    , normalizationShift = tmp$_1.component3();
    var dividendSize = dividend.size;
    var divisorSize = divisor.size;
    var wordPrecision = dividendSize - divisorSize | 0;
    var qjhat;
    var reconstructedQuotient;
    var quotient = UIntArray_init(wordPrecision);
    var divisorTimesBaseToPowerOfM = this.shl_ap2q72$(divisor, Kotlin.imul(wordPrecision, this.basePowerOfTwo));
    if (this.compareTo_daxkpa$(dividend, divisorTimesBaseToPowerOfM) >= 0) {
      quotient = UIntArray_init(wordPrecision + 1 | 0);
      quotient.set_6sqrdv$(wordPrecision, new UInt(1));
      dividend = this.minus_daxkpa$(dividend, divisorTimesBaseToPowerOfM);
    }
    for (var j = wordPrecision - 1 | 0; j >= 0; j--) {
      if ((divisorSize + j | 0) < dividend.size) {
        var $this = dividend.get_za3lpa$(divisorSize + j | 0).toULong();
        var bitCount = this.basePowerOfTwo;
        var $this_0 = new ULong($this.data.shiftLeft(bitCount));
        var other = dividend.get_za3lpa$(divisorSize + j - 1 | 0);
        var $this_1 = new ULong($this_0.data.add((new ULong(Kotlin.Long.fromInt(other.data).and(L4294967295))).data));
        var other_0 = divisor.get_za3lpa$(divisorSize - 1 | 0);
        tmp$ = ulongDivide($this_1, new ULong(Kotlin.Long.fromInt(other_0.data).and(L4294967295)));
      }
       else {
        if ((divisorSize + j | 0) === dividend.size) {
          var $this_2 = uintDivide(dividend.get_za3lpa$(divisorSize + j - 1 | 0), divisor.get_za3lpa$(divisorSize - 1 | 0));
          tmp$ = new ULong(Kotlin.Long.fromInt($this_2.data).and(L4294967295));
        }
         else {
          tmp$ = new ULong(Kotlin.Long.ZERO);
        }
      }
      qjhat = tmp$;
      var $this_3 = this.base;
      var other_1 = new ULong(Kotlin.Long.ONE);
      var other_2 = new ULong((new ULong(Kotlin.Long.fromInt($this_3.data).and(L4294967295))).data.subtract(other_1.data));
      if (ulongCompare(qjhat.data, other_2.data) < 0) {
        tmp$_0 = new UInt(qjhat.data.toInt());
      }
       else {
        var $this_4 = this.base;
        var other_3 = new UInt(1);
        tmp$_0 = new UInt($this_4.data - other_3.data | 0);
      }
      quotient.set_6sqrdv$(j, tmp$_0);
      reconstructedQuotient = this.shl_ap2q72$(this.times_nkem5j$(divisor, quotient.get_za3lpa$(j)), Kotlin.imul(j, this.basePowerOfTwo));
      while (this.compareTo_daxkpa$(reconstructedQuotient, dividend) > 0) {
        var tmp$_2 = quotient;
        var $this_5 = quotient.get_za3lpa$(j);
        var other_4 = new UInt(1);
        tmp$_2.set_6sqrdv$(j, new UInt($this_5.data - other_4.data | 0));
        reconstructedQuotient = this.shl_ap2q72$(this.times_nkem5j$(divisor, quotient.get_za3lpa$(j)), Kotlin.imul(j, this.basePowerOfTwo));
      }
      dividend = this.minus_daxkpa$(dividend, reconstructedQuotient);
    }
    while (this.compareTo_daxkpa$(dividend, divisor) >= 0) {
      quotient = this.plus_nkem5j$(quotient, new UInt(1));
      dividend = this.minus_daxkpa$(dividend, divisor);
    }
    var denormRemainder = this.denormalize_vxzh8$(dividend, normalizationShift);
    return new Pair(this.removeLeadingZeroes_rsvixa$(quotient), denormRemainder);
  };
  var NotImplementedError_init = Kotlin.kotlin.NotImplementedError;
  BigInteger32Arithmetic.prototype.baseReciprocal_vxzh8$ = function (unnormalized, precision) {
    var operand = this.normalize_rsvixa$(unnormalized).component1();
    var operandSize = operand.size;
    if (operandSize <= 2) {
      return this.minus_nkem5j$(this.div_daxkpa$(this.shl_ap2q72$(new UIntArray(new Int32Array([(new UInt(1)).toInt()])), 2 * this.basePowerOfTwo | 0), operand), new UInt(1));
    }
    throw new NotImplementedError_init('An operation is not implemented: ' + 'Soon');
  };
  var iterator = Kotlin.kotlin.text.iterator_gw00vp$;
  var toBoxedChar = Kotlin.toBoxedChar;
  BigInteger32Arithmetic.prototype.parseForBase_bm4lxs$ = function (number, base) {
    var parsed = {v: this.ZERO};
    var tmp$;
    tmp$ = iterator(number);
    while (tmp$.hasNext()) {
      var element = unboxChar(tmp$.next());
      var char = toBoxedChar(element);
      parsed.v = this.plus_nkem5j$(this.times_nkem5j$(parsed.v, new UInt(base)), new UInt(toDigit_0(unboxChar(char))));
    }
    return parsed.v;
  };
  var reversed = Kotlin.kotlin.text.reversed_gw00vp$;
  BigInteger32Arithmetic.prototype.toString_dpg1yx$ = function (operand, base) {
    var copy = new UIntArray(operand.storage.slice());
    var baseArray = new UIntArray(new Int32Array([(new UInt(base)).toInt()]));
    var stringBuilder = StringBuilder_init();
    while (!(copy != null ? copy.equals(this.ZERO) : null)) {
      var divremResult = this.divrem_daxkpa$(copy, baseArray);
      if (divremResult.second.isEmpty()) {
        stringBuilder.append_s8jyv4$(0);
      }
       else {
        stringBuilder.append_gw00v9$(toString_0(divremResult.second.get_za3lpa$(0), base));
      }
      copy = divremResult.first;
    }
    var $receiver = stringBuilder.toString();
    var tmp$;
    return reversed(Kotlin.isCharSequence(tmp$ = $receiver) ? tmp$ : throwCCE()).toString();
  };
  function BigInteger32Arithmetic$and$lambda(closure$mask, closure$operand) {
    return function (it) {
      if (it < closure$mask.size) {
        var $this = closure$operand.get_za3lpa$(it);
        var other = closure$mask.get_za3lpa$(it);
        return new UInt($this.data & other.data);
      }
       else {
        return new UInt(0);
      }
    };
  }
  BigInteger32Arithmetic.prototype.and_xwzc9q$ = function (operand, mask) {
    var size = operand.size;
    return new UIntArray(Kotlin.fillArray(new Int32Array(size), UIntArray$lambda(BigInteger32Arithmetic$and$lambda(mask, operand))));
  };
  function BigInteger32Arithmetic$or$lambda(closure$mask, closure$operand) {
    return function (it) {
      if (it < closure$mask.size) {
        var $this = closure$operand.get_za3lpa$(it);
        var other = closure$mask.get_za3lpa$(it);
        return new UInt($this.data | other.data);
      }
       else {
        return closure$operand.get_za3lpa$(it);
      }
    };
  }
  BigInteger32Arithmetic.prototype.or_xwzc9q$ = function (operand, mask) {
    var size = operand.size;
    return new UIntArray(Kotlin.fillArray(new Int32Array(size), UIntArray$lambda(BigInteger32Arithmetic$or$lambda(mask, operand))));
  };
  function BigInteger32Arithmetic$xor$lambda(closure$mask, closure$operand) {
    return function (it) {
      if (it < closure$mask.size) {
        var $this = closure$operand.get_za3lpa$(it);
        var other = closure$mask.get_za3lpa$(it);
        return new UInt($this.data ^ other.data);
      }
       else {
        var $this_0 = closure$operand.get_za3lpa$(it);
        var other_0 = new UInt(0);
        return new UInt($this_0.data ^ other_0.data);
      }
    };
  }
  BigInteger32Arithmetic.prototype.xor_xwzc9q$ = function (operand, mask) {
    var size = operand.size;
    return new UIntArray(Kotlin.fillArray(new Int32Array(size), UIntArray$lambda(BigInteger32Arithmetic$xor$lambda(mask, operand))));
  };
  function BigInteger32Arithmetic$inv$lambda(closure$operand) {
    return function (it) {
      return new UInt(~closure$operand.get_za3lpa$(it).data);
    };
  }
  BigInteger32Arithmetic.prototype.inv_11rb$ = function (operand) {
    var size = operand.size;
    return new UIntArray(Kotlin.fillArray(new Int32Array(size), UIntArray$lambda(BigInteger32Arithmetic$inv$lambda(operand))));
  };
  BigInteger32Arithmetic.prototype.shl_ap2q72$ = function ($receiver, places) {
    return this.shiftLeft_dpg1yx$($receiver, places);
  };
  BigInteger32Arithmetic.prototype.shr_ap2q72$ = function ($receiver, places) {
    return this.shiftRight_dpg1yx$($receiver, places);
  };
  BigInteger32Arithmetic.prototype.plus_daxkpa$ = function ($receiver, other) {
    return this.add_xwzc9q$($receiver, other);
  };
  BigInteger32Arithmetic.prototype.minus_daxkpa$ = function ($receiver, other) {
    return this.substract_xwzc9q$($receiver, other);
  };
  BigInteger32Arithmetic.prototype.times_daxkpa$ = function ($receiver, other) {
    return this.multiply_xwzc9q$($receiver, other);
  };
  BigInteger32Arithmetic.prototype.plus_nkem5j$ = function ($receiver, other) {
    return this.add_xwzc9q$($receiver, new UIntArray(new Int32Array([other.toInt()])));
  };
  BigInteger32Arithmetic.prototype.minus_nkem5j$ = function ($receiver, other) {
    return this.substract_xwzc9q$($receiver, new UIntArray(new Int32Array([other.toInt()])));
  };
  BigInteger32Arithmetic.prototype.times_nkem5j$ = function ($receiver, other) {
    return this.multiply_rigg6l$($receiver, other);
  };
  BigInteger32Arithmetic.prototype.div_nkem5j$ = function ($receiver, other) {
    return this.basicDivide_uzv4wk$($receiver, new UIntArray(new Int32Array([other.toInt()]))).first;
  };
  BigInteger32Arithmetic.prototype.rem_nkem5j$ = function ($receiver, other) {
    return this.basicDivide_uzv4wk$($receiver, new UIntArray(new Int32Array([other.toInt()]))).second;
  };
  BigInteger32Arithmetic.prototype.div_daxkpa$ = function ($receiver, other) {
    return this.basicDivide_uzv4wk$($receiver, other).first;
  };
  BigInteger32Arithmetic.prototype.rem_daxkpa$ = function ($receiver, other) {
    return this.basicDivide_uzv4wk$($receiver, other).second;
  };
  BigInteger32Arithmetic.prototype.divrem_daxkpa$ = function ($receiver, other) {
    return this.basicDivide_uzv4wk$($receiver, other);
  };
  BigInteger32Arithmetic.prototype.compareTo_daxkpa$ = function ($receiver, other) {
    return this.compare_xwzc9q$($receiver, other);
  };
  BigInteger32Arithmetic.prototype.compareTo_nkem5j$ = function ($receiver, other) {
    return this.compare_xwzc9q$($receiver, new UIntArray(new Int32Array([other.toInt()])));
  };
  function BigInteger32Arithmetic$toUnsignedIntArrayCodeFormat$lambda(it) {
    return it.toString() + 'U';
  }
  BigInteger32Arithmetic.prototype.toUnsignedIntArrayCodeFormat_rsvixa$ = function (array) {
    return joinToString(array, ', ', 'uintArrayOf(', ')', void 0, void 0, BigInteger32Arithmetic$toUnsignedIntArrayCodeFormat$lambda);
  };
  BigInteger32Arithmetic.prototype.fromLong_s8cxhz$ = function (long) {
    return new UIntArray(new Int32Array([(new UInt(long.toInt())).toInt()]));
  };
  BigInteger32Arithmetic.prototype.fromInt_za3lpa$ = function (int) {
    return new UIntArray(new Int32Array([(new UInt(int)).toInt()]));
  };
  BigInteger32Arithmetic.prototype.fromShort_mq22fl$ = function (short) {
    return new UIntArray(new Int32Array([(new UInt(short)).toInt()]));
  };
  BigInteger32Arithmetic.prototype.fromByte_s8j3t7$ = function (byte) {
    return new UIntArray(new Int32Array([(new UInt(byte)).toInt()]));
  };
  function BigInteger32Arithmetic$ONE$lambda(it) {
    return new UInt(1);
  }
  BigInteger32Arithmetic.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'BigInteger32Arithmetic',
    interfaces: [BigIntegerArithmetic]
  };
  var BigInteger32Arithmetic_instance = null;
  function BigInteger32Arithmetic_getInstance() {
    if (BigInteger32Arithmetic_instance === null) {
      new BigInteger32Arithmetic();
    }
    return BigInteger32Arithmetic_instance;
  }
  function BigInteger63Arithmetic() {
    BigInteger63Arithmetic_instance = this;
    this.ZERO_wrc8e3$_0 = new ULongArray(Kotlin.longArrayOf((new ULong(Kotlin.Long.ZERO)).toLong()));
    this.ONE_et5pcv$_0 = new ULongArray(Kotlin.longArrayOf((new ULong(Kotlin.Long.ONE)).toLong()));
    this.basePowerOfTwo_s3xgj0$_0 = 63;
    this.baseMask = new ULong(Kotlin.Long.MAX_VALUE);
    this.lowMask = new ULong(new Kotlin.Long(-1, 0));
    this.highMask = new ULong(new Kotlin.Long(0, 2147483647));
    this.overflowMask = new ULong(Kotlin.Long.MIN_VALUE);
  }
  Object.defineProperty(BigInteger63Arithmetic.prototype, 'ZERO', {
    get: function () {
      return this.ZERO_wrc8e3$_0;
    }
  });
  Object.defineProperty(BigInteger63Arithmetic.prototype, 'ONE', {
    get: function () {
      return this.ONE_et5pcv$_0;
    }
  });
  Object.defineProperty(BigInteger63Arithmetic.prototype, 'basePowerOfTwo', {
    get: function () {
      return this.basePowerOfTwo_s3xgj0$_0;
    }
  });
  BigInteger63Arithmetic.prototype.numberOfLeadingZeroes_11rc$ = function (value) {
    var x = value;
    var y;
    var n = 63;
    y = new ULong(x.data.shiftRightUnsigned(32));
    if (!(y != null ? y.equals(new ULong(Kotlin.Long.ZERO)) : null)) {
      n = n - 32 | 0;
      x = y;
    }
    y = new ULong(x.data.shiftRightUnsigned(16));
    if (!(y != null ? y.equals(new ULong(Kotlin.Long.ZERO)) : null)) {
      n = n - 16 | 0;
      x = y;
    }
    y = new ULong(x.data.shiftRightUnsigned(8));
    if (!(y != null ? y.equals(new ULong(Kotlin.Long.ZERO)) : null)) {
      n = n - 8 | 0;
      x = y;
    }
    y = new ULong(x.data.shiftRightUnsigned(4));
    if (!(y != null ? y.equals(new ULong(Kotlin.Long.ZERO)) : null)) {
      n = n - 4 | 0;
      x = y;
    }
    y = new ULong(x.data.shiftRightUnsigned(2));
    if (!(y != null ? y.equals(new ULong(Kotlin.Long.ZERO)) : null)) {
      n = n - 2 | 0;
      x = y;
    }
    y = new ULong(x.data.shiftRightUnsigned(1));
    if (!(y != null ? y.equals(new ULong(Kotlin.Long.ZERO)) : null)) {
      return n - 2 | 0;
    }
    return n - x.data.toInt() | 0;
  };
  BigInteger63Arithmetic.prototype.bitLength_11rb$ = function (value) {
    var mostSignificant = value.get_za3lpa$(value.size - 1 | 0);
    return this.bitLength_mpgczg$(mostSignificant) + ((value.size - 1 | 0) * 63 | 0) | 0;
  };
  BigInteger63Arithmetic.prototype.bitLength_mpgczg$ = function (value) {
    return 63 - this.numberOfLeadingZeroes_11rc$(value) | 0;
  };
  var copyOfRange_0 = Kotlin.kotlin.collections.copyOfRange_2n8m0j$;
  BigInteger63Arithmetic.prototype.removeLeadingZeroes_w48dx$ = function (bigInteger) {
    var tmp$;
    var lastIndex = -1;
    var index = 0;
    tmp$ = bigInteger.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      checkIndexOverflow(index);
      if (!(item != null ? item.equals(new ULong(Kotlin.Long.ZERO)) : null))
        lastIndex = index;
      index = index + 1 | 0;
    }
    var firstEmpty = lastIndex + 1 | 0;
    if (firstEmpty === -1 || firstEmpty === 0) {
      return this.ZERO;
    }
    return new ULongArray(copyOfRange_0(bigInteger.storage, 0, firstEmpty));
  };
  function BigInteger63Arithmetic$shiftLeft$lambda(closure$shiftWords, closure$operand) {
    return function (it) {
      if (0 <= it && it < closure$shiftWords)
        return new ULong(Kotlin.Long.ZERO);
      else
        return closure$operand.get_za3lpa$(it - closure$shiftWords | 0);
    };
  }
  function BigInteger63Arithmetic$shiftLeft$lambda_0(closure$shiftWords, closure$operand, closure$shiftBits, this$BigInteger63Arithmetic, closure$originalSize, closure$wordsNeeded) {
    return function (it) {
      if (0 <= it && it < closure$shiftWords)
        return new ULong(Kotlin.Long.ZERO);
      else if (it === closure$shiftWords) {
        var $this = closure$operand.get_za3lpa$(it - closure$shiftWords | 0);
        var bitCount = closure$shiftBits;
        var $this_0 = new ULong($this.data.shiftLeft(bitCount));
        var other = this$BigInteger63Arithmetic.baseMask;
        return new ULong($this_0.data.and(other.data));
      }
       else if ((closure$shiftWords + 1 | 0) <= it && it < (closure$originalSize + closure$shiftWords | 0)) {
        var $this_1 = closure$operand.get_za3lpa$(it - closure$shiftWords | 0);
        var bitCount_0 = closure$shiftBits;
        var $this_2 = new ULong($this_1.data.shiftLeft(bitCount_0));
        var other_0 = this$BigInteger63Arithmetic.baseMask;
        var tmp$ = new ULong($this_2.data.and(other_0.data));
        var $this_3 = closure$operand.get_za3lpa$(it - closure$shiftWords - 1 | 0);
        var bitCount_1 = this$BigInteger63Arithmetic.basePowerOfTwo - closure$shiftBits | 0;
        var other_1 = new ULong($this_3.data.shiftRightUnsigned(bitCount_1));
        return new ULong(tmp$.data.or(other_1.data));
      }
       else if (it === (closure$originalSize + closure$wordsNeeded - 1 | 0)) {
        var $this_4 = closure$operand.get_za3lpa$(it - closure$wordsNeeded | 0);
        var bitCount_2 = this$BigInteger63Arithmetic.basePowerOfTwo - closure$shiftBits | 0;
        return new ULong($this_4.data.shiftRightUnsigned(bitCount_2));
      }
       else {
        throw RuntimeException_init('Invalid case ' + it);
      }
    };
  }
  function ULongArray$lambda(closure$init) {
    return function (index) {
      return closure$init(index).data;
    };
  }
  BigInteger63Arithmetic.prototype.shiftLeft_dpg1yx$ = function (operand, places) {
    var tmp$;
    if (operand.isEmpty() || places === 0) {
      return operand;
    }
    var originalSize = operand.size;
    var leadingZeroes = this.numberOfLeadingZeroes_11rc$(operand.get_za3lpa$(operand.size - 1 | 0));
    var shiftWords = places / this.basePowerOfTwo | 0;
    var shiftBits = places % this.basePowerOfTwo;
    if (shiftBits > leadingZeroes) {
      tmp$ = shiftWords + 1 | 0;
    }
     else {
      tmp$ = shiftWords;
    }
    var wordsNeeded = tmp$;
    if (shiftBits === 0) {
      var size = operand.size + wordsNeeded | 0;
      return new ULongArray(Kotlin.longArrayF(size, ULongArray$lambda(BigInteger63Arithmetic$shiftLeft$lambda(shiftWords, operand))));
    }
    var size_0 = operand.size + wordsNeeded | 0;
    return new ULongArray(Kotlin.longArrayF(size_0, ULongArray$lambda(BigInteger63Arithmetic$shiftLeft$lambda_0(shiftWords, operand, shiftBits, this, originalSize, wordsNeeded))));
  };
  function BigInteger63Arithmetic$shiftRight$lambda(closure$operand, closure$wordsToDiscard, closure$shiftBits, this$BigInteger63Arithmetic) {
    return function (it) {
      var tmp$;
      tmp$ = closure$operand.size - 1 - closure$wordsToDiscard | 0;
      if (0 <= it && it < tmp$) {
        var $this = closure$operand.get_za3lpa$(it + closure$wordsToDiscard | 0);
        var bitCount = closure$shiftBits;
        var tmp$_0 = new ULong($this.data.shiftRightUnsigned(bitCount));
        var $this_0 = closure$operand.get_za3lpa$(it + closure$wordsToDiscard + 1 | 0);
        var bitCount_0 = this$BigInteger63Arithmetic.basePowerOfTwo - closure$shiftBits | 0;
        var $this_1 = new ULong($this_0.data.shiftLeft(bitCount_0));
        var other = this$BigInteger63Arithmetic.baseMask;
        var other_0 = new ULong($this_1.data.and(other.data));
        return new ULong(tmp$_0.data.or(other_0.data));
      }
       else if (it === (closure$operand.size - 1 - closure$wordsToDiscard | 0)) {
        var $this_2 = closure$operand.get_za3lpa$(it + closure$wordsToDiscard | 0);
        var bitCount_1 = closure$shiftBits;
        return new ULong($this_2.data.shiftRightUnsigned(bitCount_1));
      }
       else {
        throw RuntimeException_init('Invalid case ' + it);
      }
    };
  }
  BigInteger63Arithmetic.prototype.shiftRight_dpg1yx$ = function (operand, places) {
    if (operand.isEmpty() || places === 0) {
      return operand;
    }
    var shiftBits = places % this.basePowerOfTwo;
    var wordsToDiscard = places / this.basePowerOfTwo | 0;
    if (wordsToDiscard >= operand.size) {
      return this.ZERO;
    }
    if (shiftBits === 0) {
      var fromIndex = operand.size - wordsToDiscard | 0;
      var toIndex = operand.size;
      new ULongArray(copyOfRange_0(operand.storage, fromIndex, toIndex));
    }
    if (operand.size > 1 && (operand.size - wordsToDiscard | 0) === 1) {
      return new ULongArray(Kotlin.longArrayOf((new ULong(operand.get_za3lpa$(operand.size - 1 | 0).data.shiftRightUnsigned(shiftBits))).toLong()));
    }
    var size = operand.size - wordsToDiscard | 0;
    var result = new ULongArray(Kotlin.longArrayF(size, ULongArray$lambda(BigInteger63Arithmetic$shiftRight$lambda(operand, wordsToDiscard, shiftBits, this))));
    return this.removeLeadingZeroes_w48dx$(result);
  };
  BigInteger63Arithmetic.prototype.compare_xwzc9q$ = function (first, second) {
    if (first.size > second.size) {
      return 1;
    }
    if (second.size > first.size) {
      return -1;
    }
    var counter = first.size - 1 | 0;
    var firstIsLarger = false;
    var bothAreEqual = true;
    while (counter >= 0) {
      var $this = first.get_za3lpa$(counter);
      var other = second.get_za3lpa$(counter);
      if (ulongCompare($this.data, other.data) > 0) {
        firstIsLarger = true;
        bothAreEqual = false;
        break;
      }
      var $this_0 = first.get_za3lpa$(counter);
      var other_0 = second.get_za3lpa$(counter);
      if (ulongCompare($this_0.data, other_0.data) < 0) {
        firstIsLarger = false;
        bothAreEqual = false;
        break;
      }
      counter = counter - 1 | 0;
    }
    if (bothAreEqual) {
      return 0;
    }
    if (firstIsLarger) {
      return 1;
    }
     else {
      return -1;
    }
  };
  function BigInteger63Arithmetic$add$lambda(it) {
    return new ULong(Kotlin.Long.ZERO);
  }
  BigInteger63Arithmetic.prototype.add_xwzc9q$ = function (first, second) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    if (first.size === 1 && ((tmp$ = first.get_za3lpa$(0)) != null ? tmp$.equals(new ULong(Kotlin.Long.ZERO)) : null))
      return second;
    if (second.size === 1 && ((tmp$_0 = second.get_za3lpa$(0)) != null ? tmp$_0.equals(new ULong(Kotlin.Long.ZERO)) : null))
      return first;
    if (first.size > second.size) {
      tmp$_1 = new Quadruple(first.size, second.size, first, second);
    }
     else {
      tmp$_1 = new Quadruple(second.size, first.size, second, first);
    }
    var tmp$_4 = tmp$_1;
    var maxLength = tmp$_4.component1()
    , minLength = tmp$_4.component2()
    , largerData = tmp$_4.component3()
    , smallerData = tmp$_4.component4();
    var size = maxLength + 1 | 0;
    var result = new ULongArray(Kotlin.longArrayF(size, ULongArray$lambda(BigInteger63Arithmetic$add$lambda)));
    var i = 0;
    var sum = new ULong(Kotlin.Long.ZERO);
    while (i < minLength) {
      var $this = sum;
      var other = largerData.get_za3lpa$(i);
      var $this_0 = new ULong($this.data.add(other.data));
      var other_0 = smallerData.get_za3lpa$(i);
      sum = new ULong($this_0.data.add(other_0.data));
      var tmp$_5 = i;
      var $this_1 = sum;
      var other_1 = this.baseMask;
      result.set_2ccimm$(tmp$_5, new ULong($this_1.data.and(other_1.data)));
      sum = new ULong(sum.data.shiftRightUnsigned(63));
      i = i + 1 | 0;
    }
    while (true) {
      if (sum != null ? sum.equals(new ULong(Kotlin.Long.ZERO)) : null) {
        while (i < maxLength) {
          result.set_2ccimm$(i, largerData.get_za3lpa$(i));
          i = i + 1 | 0;
        }
        if ((tmp$_2 = result.get_za3lpa$(result.size - 1 | 0)) != null ? tmp$_2.equals(new ULong(Kotlin.Long.ZERO)) : null) {
          var toIndex = result.size - 1 | 0;
          tmp$_3 = new ULongArray(copyOfRange_0(result.storage, 0, toIndex));
        }
         else {
          tmp$_3 = result;
        }
        var final = tmp$_3;
        return this.removeLeadingZeroes_w48dx$(final);
      }
      if (i === maxLength) {
        result.set_2ccimm$(maxLength, sum);
        return this.removeLeadingZeroes_w48dx$(result);
      }
      var $this_2 = sum;
      var other_2 = largerData.get_za3lpa$(i);
      sum = new ULong($this_2.data.add(other_2.data));
      var tmp$_6 = i;
      var $this_3 = sum;
      var other_3 = this.baseMask;
      result.set_2ccimm$(tmp$_6, new ULong($this_3.data.and(other_3.data)));
      sum = new ULong(sum.data.shiftRightUnsigned(63));
      i = i + 1 | 0;
    }
  };
  function BigInteger63Arithmetic$substract$lambda(it) {
    return new ULong(Kotlin.Long.ZERO);
  }
  BigInteger63Arithmetic.prototype.substract_xwzc9q$ = function (first, second) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2;
    var firstPrepared = this.removeLeadingZeroes_w48dx$(first);
    var secondPrepared = this.removeLeadingZeroes_w48dx$(second);
    var comparison = this.compare_xwzc9q$(firstPrepared, secondPrepared);
    var firstIsLarger = comparison === 1;
    if (comparison === 0)
      return this.ZERO;
    if (second.size === 1 && ((tmp$ = second.get_za3lpa$(0)) != null ? tmp$.equals(new ULong(Kotlin.Long.ZERO)) : null)) {
      return first;
    }
    if (!firstIsLarger) {
      throw RuntimeException_init('subtraction result less than zero');
    }
    if (firstIsLarger) {
      tmp$_0 = new Quadruple(firstPrepared.size, secondPrepared.size, firstPrepared, secondPrepared);
    }
     else {
      tmp$_0 = new Quadruple(secondPrepared.size, firstPrepared.size, secondPrepared, firstPrepared);
    }
    var tmp$_3 = tmp$_0;
    var largerLength = tmp$_3.component1()
    , smallerLength = tmp$_3.component2()
    , largerData = tmp$_3.component3()
    , smallerData = tmp$_3.component4();
    var size = largerLength + 1 | 0;
    var result = new ULongArray(Kotlin.longArrayF(size, ULongArray$lambda(BigInteger63Arithmetic$substract$lambda)));
    var i = 0;
    var diff = new ULong(Kotlin.Long.ZERO);
    while (i < smallerLength) {
      var $this = largerData.get_za3lpa$(i);
      var other = smallerData.get_za3lpa$(i);
      var $this_0 = new ULong($this.data.subtract(other.data));
      var other_0 = diff;
      diff = new ULong($this_0.data.subtract(other_0.data));
      var $this_1 = diff;
      var other_1 = this.overflowMask;
      if ((tmp$_1 = new ULong((new ULong($this_1.data.and(other_1.data))).data.shiftRightUnsigned(63))) != null ? tmp$_1.equals(new ULong(Kotlin.Long.ONE)) : null) {
        var tmp$_4 = i;
        var $this_2 = diff;
        var other_2 = this.baseMask;
        result.set_2ccimm$(tmp$_4, new ULong($this_2.data.and(other_2.data)));
      }
       else {
        var tmp$_5 = i;
        var $this_3 = diff;
        var other_3 = this.baseMask;
        result.set_2ccimm$(tmp$_5, new ULong($this_3.data.and(other_3.data)));
      }
      diff = new ULong(diff.data.shiftRightUnsigned(63));
      i = i + 1 | 0;
    }
    while (!(diff != null ? diff.equals(new ULong(Kotlin.Long.ZERO)) : null)) {
      var $this_4 = largerData.get_za3lpa$(i);
      var other_4 = diff;
      diff = new ULong($this_4.data.subtract(other_4.data));
      var $this_5 = diff;
      var other_5 = this.overflowMask;
      if ((tmp$_2 = new ULong((new ULong($this_5.data.and(other_5.data))).data.shiftRightUnsigned(63))) != null ? tmp$_2.equals(new ULong(Kotlin.Long.ONE)) : null) {
        var tmp$_6 = i;
        var $this_6 = diff;
        var other_6 = new ULong(Kotlin.Long.ONE);
        var $this_7 = new ULong($this_6.data.subtract(other_6.data));
        var other_7 = this.baseMask;
        result.set_2ccimm$(tmp$_6, new ULong($this_7.data.and(other_7.data)));
      }
       else {
        var tmp$_7 = i;
        var $this_8 = diff;
        var other_8 = this.baseMask;
        result.set_2ccimm$(tmp$_7, new ULong($this_8.data.and(other_8.data)));
        diff = new ULong(Kotlin.Long.ZERO);
      }
      diff = new ULong(diff.data.shiftRightUnsigned(63));
      i = i + 1 | 0;
    }
    while (i < largerLength) {
      result.set_2ccimm$(i, largerData.get_za3lpa$(i));
      i = i + 1 | 0;
    }
    var destination = ArrayList_init();
    var tmp$_8;
    tmp$_8 = result.iterator();
    while (tmp$_8.hasNext()) {
      var element = tmp$_8.next();
      if (element != null ? element.equals(new ULong(Kotlin.Long.ZERO)) : null)
        destination.add_11rb$(element);
    }
    if (destination.isEmpty()) {
      return ULongArray_init(0);
    }
    return this.removeLeadingZeroes_w48dx$(result);
  };
  BigInteger63Arithmetic.prototype.multiply_xwzc9q$ = function (first, second) {
    var resultArray = {v: new ULongArray(Kotlin.longArrayOf())};
    var tmp$, tmp$_0;
    var index = 0;
    tmp$ = second.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      var index_0 = checkIndexOverflow((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0));
      resultArray.v = this.plus_rgttk2$(resultArray.v, this.shl_9x0255$(this.multiply_ssjnkr$(first, item), Kotlin.imul(index_0, this.basePowerOfTwo)));
    }
    return this.removeLeadingZeroes_w48dx$(resultArray.v);
  };
  BigInteger63Arithmetic.prototype.multiply_ssjnkr$ = function (first, second) {
    var other = this.lowMask;
    var secondLow = new ULong(second.data.and(other.data));
    var secondHigh = new ULong(second.data.shiftRightUnsigned(32));
    var result = ULongArray_init(first.size + 1 | 0);
    var carryIntoNextRound = new ULong(Kotlin.Long.ZERO);
    var i = 0;
    var j = 0;
    while (i < first.size) {
      var $this = first.get_za3lpa$(i);
      var other_0 = this.lowMask;
      var firstLow = new ULong($this.data.and(other_0.data));
      var firstHigh = new ULong(first.get_za3lpa$(i).data.shiftRightUnsigned(32));
      i = i + 1 | 0;
      var lowerProduct = new ULong(firstLow.data.multiply(secondLow.data));
      var lowerCarry = new ULong(lowerProduct.data.shiftRightUnsigned(63));
      var tmp$ = carryIntoNextRound;
      var other_1 = this.baseMask;
      var other_2 = new ULong(lowerProduct.data.and(other_1.data));
      var lowResult = new ULong(tmp$.data.add(other_2.data));
      var tmp$_0 = lowerCarry;
      var other_3 = new ULong(lowResult.data.shiftRightUnsigned(63));
      lowerCarry = new ULong(tmp$_0.data.add(other_3.data));
      var $this_0 = lowResult;
      var other_4 = this.baseMask;
      lowResult = new ULong($this_0.data.and(other_4.data));
      var tmp$_1 = new ULong(firstLow.data.multiply(secondHigh.data));
      var other_5 = new ULong(secondLow.data.multiply(firstHigh.data));
      var middleProduct = new ULong(tmp$_1.data.add(other_5.data));
      var middleCarry = lowerCarry;
      var tmp$_2 = middleCarry;
      var other_6 = new ULong(middleProduct.data.shiftRightUnsigned(31));
      middleCarry = new ULong(tmp$_2.data.add(other_6.data));
      var tmp$_3 = lowResult;
      var $this_1 = new ULong(middleProduct.data.shiftLeft(32));
      var other_7 = this.baseMask;
      var other_8 = new ULong($this_1.data.and(other_7.data));
      lowResult = new ULong(tmp$_3.data.add(other_8.data));
      var tmp$_4 = middleCarry;
      var other_9 = new ULong(lowResult.data.shiftRightUnsigned(63));
      middleCarry = new ULong(tmp$_4.data.add(other_9.data));
      var tmp$_5 = j;
      var $this_2 = lowResult;
      var other_10 = this.baseMask;
      result.set_2ccimm$(tmp$_5, new ULong($this_2.data.and(other_10.data)));
      var highResult = middleCarry;
      var higherProduct = new ULong((new ULong(firstHigh.data.multiply(secondHigh.data))).data.shiftLeft(1));
      highResult = new ULong(highResult.data.add(higherProduct.data));
      carryIntoNextRound = highResult;
      j = j + 1 | 0;
    }
    if (!(carryIntoNextRound != null ? carryIntoNextRound.equals(new ULong(Kotlin.Long.ZERO)) : null)) {
      result.set_2ccimm$(j, carryIntoNextRound);
    }
    return this.removeLeadingZeroes_w48dx$(result);
  };
  BigInteger63Arithmetic.prototype.multiply_jpm79w$ = function (first, second) {
    var other = this.lowMask;
    var firstLow = new ULong(first.data.and(other.data));
    var firstHigh = new ULong(first.data.shiftRightUnsigned(32));
    var other_0 = this.lowMask;
    var secondLow = new ULong(second.data.and(other_0.data));
    var secondHigh = new ULong(second.data.shiftRightUnsigned(32));
    var lowerProduct = new ULong(firstLow.data.multiply(secondLow.data));
    var lowCarry = new ULong(lowerProduct.data.shiftRightUnsigned(63));
    var other_1 = this.baseMask;
    var lowResult = new ULong(lowerProduct.data.and(other_1.data));
    var tmp$ = new ULong(firstLow.data.multiply(secondHigh.data));
    var other_2 = new ULong(secondLow.data.multiply(firstHigh.data));
    var middleProduct = new ULong(tmp$.data.add(other_2.data));
    var middleCarry = lowCarry;
    var tmp$_0 = middleCarry;
    var other_3 = new ULong(middleProduct.data.shiftRightUnsigned(31));
    middleCarry = new ULong(tmp$_0.data.add(other_3.data));
    var tmp$_1 = lowResult;
    var $this = new ULong(middleProduct.data.shiftLeft(32));
    var other_4 = this.baseMask;
    var other_5 = new ULong($this.data.and(other_4.data));
    lowResult = new ULong(tmp$_1.data.add(other_5.data));
    var tmp$_2 = middleCarry;
    var other_6 = new ULong(lowResult.data.shiftRightUnsigned(63));
    middleCarry = new ULong(tmp$_2.data.add(other_6.data));
    var highResult = middleCarry;
    var higherProduct = new ULong((new ULong(firstHigh.data.multiply(secondHigh.data))).data.shiftLeft(1));
    highResult = new ULong(highResult.data.add(higherProduct.data));
    var $this_0 = lowResult;
    var other_7 = this.baseMask;
    return this.removeLeadingZeroes_w48dx$(new ULongArray(Kotlin.longArrayOf((new ULong($this_0.data.and(other_7.data))).toLong(), highResult.toLong())));
  };
  BigInteger63Arithmetic.prototype.normalize_oyvc3i$ = function (dividend, divisor) {
    var divisorSize = divisor.size;
    var normalizationShift = this.numberOfLeadingZeroes_11rc$(divisor.get_za3lpa$(divisorSize - 1 | 0));
    var divisorNormalized = this.shl_9x0255$(divisor, normalizationShift);
    var dividendNormalized = this.shl_9x0255$(dividend, normalizationShift);
    return new Triple(dividendNormalized, divisorNormalized, normalizationShift);
  };
  BigInteger63Arithmetic.prototype.normalize_w48dx$ = function (operand) {
    var normalizationShift = this.numberOfLeadingZeroes_11rc$(operand.get_za3lpa$(operand.size - 1 | 0));
    return new Pair(this.shl_9x0255$(operand, normalizationShift), normalizationShift);
  };
  BigInteger63Arithmetic.prototype.denormalize_wn1fk7$ = function (remainderNormalized, normalizationShift) {
    var remainder = this.shr_9x0255$(remainderNormalized, normalizationShift);
    return remainder;
  };
  var ulongRemainder = Kotlin.kotlin.ulongRemainder_jpm79w$;
  BigInteger63Arithmetic.prototype.baseDivide_oyvc3i$ = function (unnormalizedDividend, unnormalizedDivisor) {
    var tmp$, tmp$_0;
    if (this.compareTo_rgttk2$(unnormalizedDivisor, unnormalizedDividend) > 0) {
      return new Pair(this.ZERO, unnormalizedDividend);
    }
    if (unnormalizedDivisor.size === 1 && unnormalizedDividend.size === 1) {
      return new Pair(this.removeLeadingZeroes_w48dx$(new ULongArray(Kotlin.longArrayOf(ulongDivide(unnormalizedDividend.get_za3lpa$(0), unnormalizedDivisor.get_za3lpa$(0)).toLong()))), this.removeLeadingZeroes_w48dx$(new ULongArray(Kotlin.longArrayOf(ulongRemainder(unnormalizedDividend.get_za3lpa$(0), unnormalizedDivisor.get_za3lpa$(0)).toLong()))));
    }
    var bitPrecision = this.bitLength_11rb$(unnormalizedDividend) - this.bitLength_11rb$(unnormalizedDivisor) | 0;
    if (bitPrecision === 0) {
      return new Pair(this.ONE, this.minus_rgttk2$(unnormalizedDividend, unnormalizedDivisor));
    }
    var tmp$_1 = this.normalize_oyvc3i$(unnormalizedDividend, unnormalizedDivisor);
    var dividend = tmp$_1.component1()
    , divisor = tmp$_1.component2()
    , normalizationShift = tmp$_1.component3();
    var dividendSize = dividend.size;
    var divisorSize = divisor.size;
    var wordPrecision = dividendSize - divisorSize | 0;
    var qjhat;
    var reconstructedQuotient;
    var quotient = ULongArray_init(wordPrecision);
    var divisorTimesBaseToPowerOfM = this.shl_9x0255$(divisor, Kotlin.imul(wordPrecision, this.basePowerOfTwo));
    if (this.compareTo_rgttk2$(dividend, divisorTimesBaseToPowerOfM) >= 0) {
      quotient = ULongArray_init(wordPrecision + 1 | 0);
      quotient.set_2ccimm$(wordPrecision, new ULong(Kotlin.Long.ONE));
      dividend = this.minus_rgttk2$(dividend, divisorTimesBaseToPowerOfM);
    }
    for (var j = wordPrecision - 1 | 0; j >= 0; j--) {
      if ((divisorSize + j | 0) < dividend.size) {
        tmp$ = this.plus_bzhn23$(this.shl_9x0255$(new ULongArray(Kotlin.longArrayOf(dividend.get_za3lpa$(divisorSize + j | 0).toLong())), this.basePowerOfTwo), dividend.get_za3lpa$(divisorSize + j - 1 | 0));
      }
       else {
        if ((divisorSize + j | 0) === dividend.size) {
          tmp$ = new ULongArray(Kotlin.longArrayOf(dividend.get_za3lpa$(divisorSize + j - 1 | 0).toLong()));
        }
         else {
          tmp$ = this.ZERO;
        }
      }
      var twoDigit = tmp$;
      var convertedResult = BigInteger32Arithmetic_getInstance().divide_xwzc9q$(this.to32Bit_3tx87d$(twoDigit), this.to32Bit_3tx87d$(new ULongArray(Kotlin.longArrayOf(divisor.get_za3lpa$(divisorSize - 1 | 0).toLong()))));
      qjhat = this.from32Bit_j9z43k$(convertedResult.first);
      var $this = this.baseMask;
      var other = new ULong(Kotlin.Long.ONE);
      if (this.compareTo_bzhn23$(qjhat, new ULong($this.data.subtract(other.data))) < 0) {
        tmp$_0 = qjhat.get_za3lpa$(0);
      }
       else {
        var $this_0 = this.baseMask;
        var other_0 = new UInt(1);
        tmp$_0 = new ULong($this_0.data.subtract((new ULong(Kotlin.Long.fromInt(other_0.data).and(L4294967295))).data));
      }
      quotient.set_2ccimm$(j, tmp$_0);
      reconstructedQuotient = this.shl_9x0255$(this.times_bzhn23$(divisor, quotient.get_za3lpa$(j)), Kotlin.imul(j, this.basePowerOfTwo));
      while (this.compareTo_rgttk2$(reconstructedQuotient, dividend) > 0) {
        var tmp$_2 = quotient;
        var $this_1 = quotient.get_za3lpa$(j);
        var other_1 = new UInt(1);
        tmp$_2.set_2ccimm$(j, new ULong($this_1.data.subtract((new ULong(Kotlin.Long.fromInt(other_1.data).and(L4294967295))).data)));
        reconstructedQuotient = this.shl_9x0255$(this.times_bzhn23$(divisor, quotient.get_za3lpa$(j)), Kotlin.imul(j, this.basePowerOfTwo));
      }
      dividend = this.minus_rgttk2$(dividend, reconstructedQuotient);
    }
    while (this.compareTo_rgttk2$(dividend, divisor) >= 0) {
      quotient = this.plus_bzhn23$(quotient, new ULong(Kotlin.Long.ONE));
      dividend = this.minus_rgttk2$(dividend, divisor);
    }
    var denormRemainder = this.denormalize_wn1fk7$(dividend, normalizationShift);
    return new Pair(this.removeLeadingZeroes_w48dx$(quotient), denormRemainder);
  };
  BigInteger63Arithmetic.prototype.convertTo64BitRepresentation_w48dx$ = function (operand) {
    var tmp$;
    if (operand != null ? operand.equals(this.ZERO) : null)
      return this.ZERO;
    var length = this.bitLength_11rb$(operand);
    if (length % 64 === 0) {
      tmp$ = length / 64 | 0;
    }
     else {
      tmp$ = (length / 64 | 0) + 1 | 0;
    }
    var requiredLength = tmp$;
    var wordStep;
    var shiftAmount;
    var result = ULongArray_init(requiredLength);
    for (var i = 0; i < requiredLength; i++) {
      wordStep = i / 63 | 0;
      shiftAmount = i % 63;
      if ((i + wordStep + 1 | 0) < operand.size) {
        var tmp$_0 = new ULong(operand.get_za3lpa$(i + wordStep | 0).data.shiftRightUnsigned(shiftAmount));
        var $this = operand.get_za3lpa$(i + wordStep + 1 | 0);
        var bitCount = 63 - shiftAmount | 0;
        var other = new ULong($this.data.shiftLeft(bitCount));
        result.set_2ccimm$(i, new ULong(tmp$_0.data.or(other.data)));
      }
       else {
        result.set_2ccimm$(i, new ULong(operand.get_za3lpa$(i + wordStep | 0).data.shiftRightUnsigned(shiftAmount)));
      }
    }
    return result;
  };
  BigInteger63Arithmetic.prototype.convertTo32BitRepresentation_w48dx$ = function (operand) {
    var tmp$;
    var power64Representation = this.convertTo64BitRepresentation_w48dx$(operand);
    var result = UIntArray_init(power64Representation.size * 2 | 0);
    tmp$ = power64Representation.size;
    for (var i = 0; i < tmp$; i++) {
      var tmp$_0 = 2 * i | 0;
      var tmp$_1 = power64Representation.get_za3lpa$(i);
      var $this = BigInteger32Arithmetic_getInstance().base;
      var other = new ULong(Kotlin.Long.fromInt($this.data).and(L4294967295));
      result.set_6sqrdv$(tmp$_0, new UInt((new ULong(tmp$_1.data.and(other.data))).data.toInt()));
      result.set_6sqrdv$((2 * i | 0) + 1 | 0, new UInt((new ULong(power64Representation.get_za3lpa$(i).data.shiftRightUnsigned(32))).data.toInt()));
    }
    return BigInteger32Arithmetic_getInstance().removeLeadingZeroes_rsvixa$(result);
  };
  BigInteger63Arithmetic.prototype.convertFrom32BitRepresentation_rsvixa$ = function (operand) {
    var tmp$;
    if (operand.size === 0) {
      return this.ZERO;
    }
    if (operand.size === 1) {
      var $this = operand.get_za3lpa$(0);
      return new ULongArray(Kotlin.longArrayOf((new ULong(Kotlin.Long.fromInt($this.data).and(L4294967295))).toLong()));
    }
    var length = BigInteger32Arithmetic_getInstance().bitLength_11rb$(operand);
    if (length % 63 === 0) {
      tmp$ = length / 63 | 0;
    }
     else {
      tmp$ = (length / 63 | 0) + 1 | 0;
    }
    var requiredLength = tmp$;
    var result = ULongArray_init(requiredLength);
    var skipWordCount;
    for (var i = 0; i < requiredLength; i++) {
      skipWordCount = i / 32 | 0;
      var shiftAmount = i % 32;
      var position = (i * 2 | 0) - skipWordCount | 0;
      if (i === 0) {
        var $this_0 = operand.get_za3lpa$(i * 2 | 0);
        var tmp$_0 = new ULong(Kotlin.Long.fromInt($this_0.data).and(L4294967295));
        var $this_1 = operand.get_za3lpa$((i * 2 | 0) + 1 | 0);
        var $this_2 = new ULong((new ULong(Kotlin.Long.fromInt($this_1.data).and(L4294967295))).data.shiftLeft(32));
        var other = this.highMask;
        var other_0 = new ULong($this_2.data.and(other.data));
        result.set_2ccimm$(i, new ULong(tmp$_0.data.or(other_0.data)));
      }
       else if (1 <= i && i < (requiredLength - 1 | 0)) {
        var $this_3 = operand.get_za3lpa$(position - 1 | 0);
        var $this_4 = new ULong(Kotlin.Long.fromInt($this_3.data).and(L4294967295));
        var bitCount = 32 - shiftAmount | 0;
        var tmp$_1 = new ULong($this_4.data.shiftRightUnsigned(bitCount));
        var $this_5 = operand.get_za3lpa$(position);
        var other_1 = new ULong((new ULong(Kotlin.Long.fromInt($this_5.data).and(L4294967295))).data.shiftLeft(shiftAmount));
        var tmp$_2 = new ULong(tmp$_1.data.or(other_1.data));
        var $this_6 = operand.get_za3lpa$(position + 1 | 0);
        var $this_7 = new ULong(Kotlin.Long.fromInt($this_6.data).and(L4294967295));
        var bitCount_0 = 32 + shiftAmount | 0;
        var $this_8 = new ULong($this_7.data.shiftLeft(bitCount_0));
        var other_2 = this.highMask;
        var other_3 = new ULong($this_8.data.and(other_2.data));
        result.set_2ccimm$(i, new ULong(tmp$_2.data.or(other_3.data)));
      }
       else if (i === (requiredLength - 1 | 0))
        if (position < operand.size) {
          var $this_9 = operand.get_za3lpa$(position - 1 | 0);
          var $this_10 = new ULong(Kotlin.Long.fromInt($this_9.data).and(L4294967295));
          var bitCount_1 = 32 - shiftAmount | 0;
          var tmp$_3 = new ULong($this_10.data.shiftRightUnsigned(bitCount_1));
          var $this_11 = operand.get_za3lpa$(position);
          var other_4 = new ULong((new ULong(Kotlin.Long.fromInt($this_11.data).and(L4294967295))).data.shiftLeft(shiftAmount));
          result.set_2ccimm$(i, new ULong(tmp$_3.data.or(other_4.data)));
        }
         else {
          var $this_12 = operand.get_za3lpa$(position - 1 | 0);
          var $this_13 = new ULong(Kotlin.Long.fromInt($this_12.data).and(L4294967295));
          var bitCount_2 = 32 - shiftAmount | 0;
          result.set_2ccimm$(i, new ULong($this_13.data.shiftRightUnsigned(bitCount_2)));
        }
    }
    return result;
  };
  BigInteger63Arithmetic.prototype.divide_xwzc9q$ = function (first, second) {
    return this.baseDivide_oyvc3i$(first, second);
  };
  BigInteger63Arithmetic.prototype.parseForBase_bm4lxs$ = function (number, base) {
    var parsed = {v: this.ZERO};
    var tmp$;
    tmp$ = iterator(number.toLowerCase());
    while (tmp$.hasNext()) {
      var element = unboxChar(tmp$.next());
      var char = toBoxedChar(element);
      var tmp$_0 = this.times_bzhn23$(parsed.v, new ULong(Kotlin.Long.fromInt(base)));
      var $receiver = toDigit_0(unboxChar(char));
      parsed.v = this.plus_bzhn23$(tmp$_0, new ULong(Kotlin.Long.fromInt($receiver)));
    }
    return this.removeLeadingZeroes_w48dx$(parsed.v);
  };
  var copyOf = Kotlin.kotlin.collections.copyOf_se6h4x$;
  BigInteger63Arithmetic.prototype.toString_dpg1yx$ = function (operand, base) {
    var copy = new ULongArray(copyOf(operand.storage));
    var baseArray = new ULongArray(Kotlin.longArrayOf((new ULong(Kotlin.Long.fromInt(base))).toLong()));
    var stringBuilder = StringBuilder_init();
    while (!(copy != null ? copy.equals(this.ZERO) : null)) {
      var divremResult = this.divrem_rgttk2$(copy, baseArray);
      if (divremResult.second.isEmpty()) {
        stringBuilder.append_s8jyv4$(0);
      }
       else {
        stringBuilder.append_gw00v9$(toString_1(divremResult.second.get_za3lpa$(0), base));
      }
      copy = divremResult.first;
    }
    var $receiver = stringBuilder.toString();
    var tmp$;
    return reversed(Kotlin.isCharSequence(tmp$ = $receiver) ? tmp$ : throwCCE()).toString();
  };
  function BigInteger63Arithmetic$and$lambda(closure$mask, closure$operand) {
    return function (it) {
      if (it < closure$mask.size) {
        var $this = closure$operand.get_za3lpa$(it);
        var other = closure$mask.get_za3lpa$(it);
        return new ULong($this.data.and(other.data));
      }
       else {
        return new ULong(Kotlin.Long.ZERO);
      }
    };
  }
  BigInteger63Arithmetic.prototype.and_xwzc9q$ = function (operand, mask) {
    var size = operand.size;
    return this.removeLeadingZeroes_w48dx$(new ULongArray(Kotlin.longArrayF(size, ULongArray$lambda(BigInteger63Arithmetic$and$lambda(mask, operand)))));
  };
  function BigInteger63Arithmetic$or$lambda(closure$mask, closure$operand) {
    return function (it) {
      if (it < closure$mask.size) {
        var $this = closure$operand.get_za3lpa$(it);
        var other = closure$mask.get_za3lpa$(it);
        return new ULong($this.data.or(other.data));
      }
       else {
        return closure$operand.get_za3lpa$(it);
      }
    };
  }
  BigInteger63Arithmetic.prototype.or_xwzc9q$ = function (operand, mask) {
    var size = operand.size;
    return this.removeLeadingZeroes_w48dx$(new ULongArray(Kotlin.longArrayF(size, ULongArray$lambda(BigInteger63Arithmetic$or$lambda(mask, operand)))));
  };
  function BigInteger63Arithmetic$xor$lambda(closure$mask, closure$operand) {
    return function (it) {
      if (it < closure$mask.size) {
        var $this = closure$operand.get_za3lpa$(it);
        var other = closure$mask.get_za3lpa$(it);
        return new ULong($this.data.xor(other.data));
      }
       else {
        var $this_0 = closure$operand.get_za3lpa$(it);
        var other_0 = new ULong(Kotlin.Long.ZERO);
        return new ULong($this_0.data.xor(other_0.data));
      }
    };
  }
  BigInteger63Arithmetic.prototype.xor_xwzc9q$ = function (operand, mask) {
    var size = operand.size;
    return this.removeLeadingZeroes_w48dx$(new ULongArray(Kotlin.longArrayF(size, ULongArray$lambda(BigInteger63Arithmetic$xor$lambda(mask, operand)))));
  };
  function BigInteger63Arithmetic$inv$lambda(closure$operand, this$BigInteger63Arithmetic, closure$cleanupMask) {
    return function (it) {
      if (it < (closure$operand.size - 2 | 0)) {
        var $this = new ULong(closure$operand.get_za3lpa$(it).data.inv());
        var other = this$BigInteger63Arithmetic.baseMask;
        return new ULong($this.data.and(other.data));
      }
       else {
        var $this_0 = new ULong(closure$operand.get_za3lpa$(it).data.inv());
        var other_0 = closure$cleanupMask;
        return new ULong($this_0.data.and(other_0.data));
      }
    };
  }
  BigInteger63Arithmetic.prototype.inv_11rb$ = function (operand) {
    var leadingZeroes = this.numberOfLeadingZeroes_11rc$(operand.get_za3lpa$(operand.size - 1 | 0));
    var $this = new ULong(Kotlin.Long.ONE);
    var bitCount = leadingZeroes + 1 | 0;
    var $this_0 = new ULong($this.data.shiftLeft(bitCount));
    var other = new UInt(1);
    var $this_1 = new ULong($this_0.data.subtract((new ULong(Kotlin.Long.fromInt(other.data).and(L4294967295))).data));
    var bitCount_0 = this.basePowerOfTwo - leadingZeroes | 0;
    var cleanupMask = new ULong((new ULong($this_1.data.shiftLeft(bitCount_0))).data.inv());
    var size = operand.size;
    var inverted = new ULongArray(Kotlin.longArrayF(size, ULongArray$lambda(BigInteger63Arithmetic$inv$lambda(operand, this, cleanupMask))));
    return inverted;
  };
  BigInteger63Arithmetic.prototype.andX_0 = function ($receiver, other) {
    return this.and_xwzc9q$($receiver, other);
  };
  BigInteger63Arithmetic.prototype.orX_0 = function ($receiver, other) {
    return this.or_xwzc9q$($receiver, other);
  };
  BigInteger63Arithmetic.prototype.xorX_0 = function ($receiver, other) {
    return this.xor_xwzc9q$($receiver, other);
  };
  BigInteger63Arithmetic.prototype.andX_1 = function ($receiver, other) {
    return this.and_xwzc9q$($receiver, new ULongArray(Kotlin.longArrayOf(other.toLong())));
  };
  BigInteger63Arithmetic.prototype.orX_1 = function ($receiver, other) {
    return this.or_xwzc9q$($receiver, new ULongArray(Kotlin.longArrayOf(other.toLong())));
  };
  BigInteger63Arithmetic.prototype.xorX_1 = function ($receiver, other) {
    return this.xor_xwzc9q$($receiver, new ULongArray(Kotlin.longArrayOf(other.toLong())));
  };
  BigInteger63Arithmetic.prototype.shl_9x0255$ = function ($receiver, places) {
    return this.shiftLeft_dpg1yx$($receiver, places);
  };
  BigInteger63Arithmetic.prototype.shr_9x0255$ = function ($receiver, places) {
    return this.shiftRight_dpg1yx$($receiver, places);
  };
  BigInteger63Arithmetic.prototype.plus_rgttk2$ = function ($receiver, other) {
    return this.add_xwzc9q$($receiver, other);
  };
  BigInteger63Arithmetic.prototype.minus_rgttk2$ = function ($receiver, other) {
    return this.substract_xwzc9q$($receiver, other);
  };
  BigInteger63Arithmetic.prototype.times_rgttk2$ = function ($receiver, other) {
    return this.multiply_xwzc9q$($receiver, other);
  };
  BigInteger63Arithmetic.prototype.plus_bzhn23$ = function ($receiver, other) {
    return this.add_xwzc9q$($receiver, new ULongArray(Kotlin.longArrayOf(other.toLong())));
  };
  BigInteger63Arithmetic.prototype.minus_bzhn23$ = function ($receiver, other) {
    return this.substract_xwzc9q$($receiver, new ULongArray(Kotlin.longArrayOf(other.toLong())));
  };
  BigInteger63Arithmetic.prototype.times_bzhn23$ = function ($receiver, other) {
    return this.multiply_xwzc9q$($receiver, new ULongArray(Kotlin.longArrayOf(other.toLong())));
  };
  BigInteger63Arithmetic.prototype.div_bzhn23$ = function ($receiver, other) {
    return this.baseDivide_oyvc3i$($receiver, new ULongArray(Kotlin.longArrayOf(other.toLong()))).first;
  };
  BigInteger63Arithmetic.prototype.rem_bzhn23$ = function ($receiver, other) {
    return this.baseDivide_oyvc3i$($receiver, new ULongArray(Kotlin.longArrayOf(other.toLong()))).second;
  };
  BigInteger63Arithmetic.prototype.div_rgttk2$ = function ($receiver, other) {
    return this.baseDivide_oyvc3i$($receiver, other).first;
  };
  BigInteger63Arithmetic.prototype.rem_rgttk2$ = function ($receiver, other) {
    return this.baseDivide_oyvc3i$($receiver, other).second;
  };
  BigInteger63Arithmetic.prototype.divrem_rgttk2$ = function ($receiver, other) {
    return this.baseDivide_oyvc3i$($receiver, other);
  };
  BigInteger63Arithmetic.prototype.compareTo_rgttk2$ = function ($receiver, other) {
    return this.compare_xwzc9q$($receiver, other);
  };
  BigInteger63Arithmetic.prototype.compareTo_bzhn23$ = function ($receiver, other) {
    return this.compare_xwzc9q$($receiver, new ULongArray(Kotlin.longArrayOf(other.toLong())));
  };
  BigInteger63Arithmetic.prototype.to32Bit_3tx87d$ = function ($receiver) {
    return this.convertTo32BitRepresentation_w48dx$($receiver);
  };
  BigInteger63Arithmetic.prototype.from32Bit_j9z43k$ = function ($receiver) {
    return this.convertFrom32BitRepresentation_rsvixa$($receiver);
  };
  BigInteger63Arithmetic.prototype.fromLong_s8cxhz$ = function (long) {
    var tmp$;
    var $this = new ULong(long);
    var other = this.overflowMask;
    if ((tmp$ = new ULong((new ULong($this.data.and(other.data))).data.shiftRightUnsigned(63))) != null ? tmp$.equals(new ULong(Kotlin.Long.ONE)) : null) {
      return this.plus_bzhn23$(new ULongArray(Kotlin.longArrayOf(this.baseMask.toLong())), new ULong(Kotlin.Long.ONE));
    }
    var $this_0 = new ULong(long);
    var other_0 = this.baseMask;
    return new ULongArray(Kotlin.longArrayOf((new ULong($this_0.data.and(other_0.data))).toLong()));
  };
  BigInteger63Arithmetic.prototype.fromInt_za3lpa$ = function (int) {
    return new ULongArray(Kotlin.longArrayOf((new ULong(Kotlin.Long.fromInt(int))).toLong()));
  };
  BigInteger63Arithmetic.prototype.fromShort_mq22fl$ = function (short) {
    return new ULongArray(Kotlin.longArrayOf((new ULong(Kotlin.Long.fromInt(short))).toLong()));
  };
  BigInteger63Arithmetic.prototype.fromByte_s8j3t7$ = function (byte) {
    return new ULongArray(Kotlin.longArrayOf((new ULong(Kotlin.Long.fromInt(byte))).toLong()));
  };
  BigInteger63Arithmetic.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'BigInteger63Arithmetic',
    interfaces: [BigIntegerArithmetic]
  };
  var BigInteger63Arithmetic_instance = null;
  function BigInteger63Arithmetic_getInstance() {
    if (BigInteger63Arithmetic_instance === null) {
      new BigInteger63Arithmetic();
    }
    return BigInteger63Arithmetic_instance;
  }
  function concurrentMultiply(continuation) {
  }
  function toDigit($receiver, radix) {
    var tmp$;
    if ((new CharRange(48, 57)).contains_mef7kx$($receiver))
      tmp$ = toChar($receiver - 48) | 0;
    else if ((new CharRange(97, 122)).contains_mef7kx$($receiver))
      tmp$ = $receiver - 97 + 10 | 0;
    else if ((new CharRange(65, 90)).contains_mef7kx$($receiver))
      tmp$ = $receiver - 65 + 10 | 0;
    else if ((new CharRange(65313, 65338)).contains_mef7kx$($receiver))
      tmp$ = $receiver - 65313 - 10 | 0;
    else if ((new CharRange(65345, 65370)).contains_mef7kx$($receiver))
      tmp$ = $receiver - 65345 - 10 | 0;
    else
      throw new NumberFormatException('Invalid digit for radix ');
    return tmp$;
  }
  function toDigit_0($receiver) {
    return toDigit($receiver, 10);
  }
  function NativeBigIntegerArithmetic() {
    NativeBigIntegerArithmetic_instance = this;
    this.baseMask = L2147483647;
  }
  Object.defineProperty(NativeBigIntegerArithmetic.prototype, 'ZERO', {
    get: function () {
      throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented yet');
    }
  });
  Object.defineProperty(NativeBigIntegerArithmetic.prototype, 'ONE', {
    get: function () {
      throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented yet');
    }
  });
  Object.defineProperty(NativeBigIntegerArithmetic.prototype, 'base', {
    get: function () {
      throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented yet');
    }
  });
  Object.defineProperty(NativeBigIntegerArithmetic.prototype, 'basePowerOfTwo', {
    get: function () {
      throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented yet');
    }
  });
  NativeBigIntegerArithmetic.prototype.numberOfLeadingZeroes_11rc$ = function (value) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented yet');
  };
  NativeBigIntegerArithmetic.prototype.bitLength_11rb$ = function (value) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented yet');
  };
  NativeBigIntegerArithmetic.prototype.shiftLeft_dpg1yx$ = function (operand, places) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented yet');
  };
  NativeBigIntegerArithmetic.prototype.shiftRight_dpg1yx$ = function (operand, places) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented yet');
  };
  NativeBigIntegerArithmetic.prototype.compare_xwzc9q$ = function (first, second) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented yet');
  };
  NativeBigIntegerArithmetic.prototype.add_xwzc9q$ = function (first, second) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented yet');
  };
  NativeBigIntegerArithmetic.prototype.substract_xwzc9q$ = function (first, second) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented yet');
  };
  NativeBigIntegerArithmetic.prototype.multiply_xwzc9q$ = function (first, second) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented yet');
  };
  NativeBigIntegerArithmetic.prototype.divide_xwzc9q$ = function (first, second) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented yet');
  };
  NativeBigIntegerArithmetic.prototype.parseForBase_bm4lxs$ = function (number, base) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented yet');
  };
  NativeBigIntegerArithmetic.prototype.toString_dpg1yx$ = function (operand, base) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented yet');
  };
  NativeBigIntegerArithmetic.prototype.fromLong_s8cxhz$ = function (long) {
    return new Int32Array([long.and(this.baseMask).toInt(), long.shiftRight(this.basePowerOfTwo).toInt()]);
  };
  NativeBigIntegerArithmetic.prototype.fromInt_za3lpa$ = function (int) {
    return new Int32Array([int]);
  };
  NativeBigIntegerArithmetic.prototype.fromShort_mq22fl$ = function (short) {
    return new Int32Array([short]);
  };
  NativeBigIntegerArithmetic.prototype.fromByte_s8j3t7$ = function (byte) {
    return new Int32Array([byte]);
  };
  NativeBigIntegerArithmetic.prototype.or_xwzc9q$ = function (operand, mask) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented yet');
  };
  NativeBigIntegerArithmetic.prototype.xor_xwzc9q$ = function (operand, mask) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented yet');
  };
  NativeBigIntegerArithmetic.prototype.and_xwzc9q$ = function (operand, mask) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented yet');
  };
  NativeBigIntegerArithmetic.prototype.inv_11rb$ = function (operand) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented yet');
  };
  NativeBigIntegerArithmetic.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'NativeBigIntegerArithmetic',
    interfaces: [BigIntegerArithmetic]
  };
  var NativeBigIntegerArithmetic_instance = null;
  function NativeBigIntegerArithmetic_getInstance() {
    if (NativeBigIntegerArithmetic_instance === null) {
      new NativeBigIntegerArithmetic();
    }
    return NativeBigIntegerArithmetic_instance;
  }
  function Coroutine$block$lambda(closure$block_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$block = closure$block_0;
  }
  Coroutine$block$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$block$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$block$lambda.prototype.constructor = Coroutine$block$lambda;
  Coroutine$block$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$closure$block(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      }
       catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        }
         else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function block$lambda(closure$block_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$block$lambda(closure$block_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function block(block) {
    return promise(coroutines.GlobalScope, void 0, void 0, block$lambda(block));
  }
  function Coroutine$runTest$lambda(closure$block_0, $receiver_0, controller, continuation_0) {
    CoroutineImpl.call(this, continuation_0);
    this.$controller = controller;
    this.exceptionState_0 = 1;
    this.local$closure$block = closure$block_0;
  }
  Coroutine$runTest$lambda.$metadata$ = {
    kind: Kotlin.Kind.CLASS,
    simpleName: null,
    interfaces: [CoroutineImpl]
  };
  Coroutine$runTest$lambda.prototype = Object.create(CoroutineImpl.prototype);
  Coroutine$runTest$lambda.prototype.constructor = Coroutine$runTest$lambda;
  Coroutine$runTest$lambda.prototype.doResume = function () {
    do
      try {
        switch (this.state_0) {
          case 0:
            this.state_0 = 2;
            this.result_0 = this.local$closure$block(this);
            if (this.result_0 === COROUTINE_SUSPENDED)
              return COROUTINE_SUSPENDED;
            continue;
          case 1:
            throw this.exception_0;
          case 2:
            return this.result_0;
          default:this.state_0 = 1;
            throw new Error('State Machine Unreachable execution');
        }
      }
       catch (e) {
        if (this.state_0 === 1) {
          this.exceptionState_0 = this.state_0;
          throw e;
        }
         else {
          this.state_0 = this.exceptionState_0;
          this.exception_0 = e;
        }
      }
     while (true);
  };
  function runTest$lambda(closure$block_0) {
    return function ($receiver_0, continuation_0, suspended) {
      var instance = new Coroutine$runTest$lambda(closure$block_0, $receiver_0, this, continuation_0);
      if (suspended)
        return instance;
      else
        return instance.doResume(null);
    };
  }
  function runTest(block) {
    return promise(coroutines.GlobalScope, void 0, void 0, runTest$lambda(block));
  }
  Object.defineProperty(Sign, 'POSITIVE', {
    get: Sign$POSITIVE_getInstance
  });
  Object.defineProperty(Sign, 'NEGATIVE', {
    get: Sign$NEGATIVE_getInstance
  });
  Object.defineProperty(Sign, 'ZERO', {
    get: Sign$ZERO_getInstance
  });
  var package$com = _.com || (_.com = {});
  var package$ionspin = package$com.ionspin || (package$com.ionspin = {});
  var package$kotlin = package$ionspin.kotlin || (package$ionspin.kotlin = {});
  var package$bignum = package$kotlin.bignum || (package$kotlin.bignum = {});
  var package$biginteger = package$bignum.biginteger || (package$bignum.biginteger = {});
  package$biginteger.Sign = Sign;
  $$importsForInline$$.core = _;
  Object.defineProperty(BigInteger, 'Companion', {
    get: BigInteger$Companion_getInstance
  });
  BigInteger.QuotientAndRemainder = BigInteger$QuotientAndRemainder;
  package$biginteger.BigInteger = BigInteger;
  package$biginteger.BigIntegerArithmetic = BigIntegerArithmetic;
  package$biginteger.ConversionExtensions = ConversionExtensions;
  Object.defineProperty(package$biginteger, 'chosenArithmetic_8be2vx$', {
    get: function () {
      return chosenArithmetic;
    }
  });
  package$biginteger.Quadruple = Quadruple;
  var package$base32 = package$biginteger.base32 || (package$biginteger.base32 = {});
  Object.defineProperty(package$base32, 'BigInteger32Arithmetic', {
    get: BigInteger32Arithmetic_getInstance
  });
  var package$base63 = package$biginteger.base63 || (package$biginteger.base63 = {});
  Object.defineProperty(package$base63, 'BigInteger63Arithmetic', {
    get: BigInteger63Arithmetic_getInstance
  });
  var package$concurrent = package$biginteger.concurrent || (package$biginteger.concurrent = {});
  package$concurrent.concurrentMultiply = concurrentMultiply;
  var package$util = package$biginteger.util || (package$biginteger.util = {});
  package$util.toDigit_a5dju6$ = toDigit;
  package$util.toDigit_myv2d0$ = toDigit_0;
  Object.defineProperty(package$biginteger, 'NativeBigIntegerArithmetic', {
    get: NativeBigIntegerArithmetic_getInstance
  });
  package$util.block_lnyleu$ = block;
  package$util.runTest_lnyleu$ = runTest;
  chosenArithmetic = BigInteger63Arithmetic_getInstance();
  Kotlin.defineModule('core', _);
  return _;
}(module.exports, require('kotlin'), require('kotlinx-coroutines-core')));

//# sourceMappingURL=core.js.map
