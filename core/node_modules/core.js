(function (_, Kotlin) {
  'use strict';
  var Kind_OBJECT = Kotlin.Kind.OBJECT;
  var Pair = Kotlin.kotlin.Pair;
  var Kind_CLASS = Kotlin.Kind.CLASS;
  var UInt = Kotlin.kotlin.UInt;
  var RuntimeException_init = Kotlin.kotlin.RuntimeException_init_pdl1vj$;
  var Triple = Kotlin.kotlin.Triple;
  var ULong = Kotlin.kotlin.ULong;
  var UIntArray = Kotlin.kotlin.UIntArray;
  var UIntArray_init = Kotlin.kotlin.UIntArray_init_za3lpa$;
  var Kind_INTERFACE = Kotlin.Kind.INTERFACE;
  function BigInteger(wordArray, sign) {
    BigInteger$Companion_getInstance();
    this.sign = sign;
    this.magnitude_0 = wordArray;
  }
  function BigInteger$Companion() {
    BigInteger$Companion_instance = this;
    this.arithmetic_0 = chosenArithmetic;
    this.positive = true;
    this.negative = true;
    this.ZERO = new BigInteger(this.arithmetic_0.ZERO, this.negative);
    this.ONE = new BigInteger(this.arithmetic_0.ONE, this.positive);
  }
  BigInteger$Companion.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'Companion',
    interfaces: []
  };
  var BigInteger$Companion_instance = null;
  function BigInteger$Companion_getInstance() {
    if (BigInteger$Companion_instance === null) {
      new BigInteger$Companion();
    }
    return BigInteger$Companion_instance;
  }
  BigInteger.prototype.add_rq2muq$ = function (other) {
    var tmp$;
    if (this.compareTo_r0ggvj$(this, other) > 0) {
      tmp$ = this.sign;
    }
     else {
      tmp$ = other.sign;
    }
    var sign = tmp$;
    return new BigInteger(BigInteger$Companion_getInstance().arithmetic_0.addition_xwzc9q$(this.magnitude_0, other.magnitude_0), sign);
  };
  BigInteger.prototype.substract_rq2muq$ = function (other) {
    var tmp$;
    if (this.compareTo_r0ggvj$(this, other) > 0) {
      tmp$ = this.sign;
    }
     else {
      tmp$ = !other.sign;
    }
    var sign = tmp$;
    return new BigInteger(BigInteger$Companion_getInstance().arithmetic_0.substract_xwzc9q$(this.magnitude_0, other.magnitude_0), sign);
  };
  BigInteger.prototype.multiply_rq2muq$ = function (other) {
    var tmp$;
    if (this.sign !== other.sign) {
      tmp$ = BigInteger$Companion_getInstance().negative;
    }
     else {
      tmp$ = BigInteger$Companion_getInstance().positive;
    }
    var sign = tmp$;
    return new BigInteger(BigInteger$Companion_getInstance().arithmetic_0.multiply_xwzc9q$(this.magnitude_0, other.magnitude_0), sign);
  };
  BigInteger.prototype.divide_rq2muq$ = function (other) {
    var tmp$;
    if (this.sign !== other.sign) {
      tmp$ = BigInteger$Companion_getInstance().negative;
    }
     else {
      tmp$ = BigInteger$Companion_getInstance().positive;
    }
    var sign = tmp$;
    return new BigInteger(BigInteger$Companion_getInstance().arithmetic_0.basicDivide_uzv4wk$(this.magnitude_0, other.magnitude_0).first, sign);
  };
  BigInteger.prototype.remainder_rq2muq$ = function (other) {
    var tmp$;
    if (this.sign !== other.sign) {
      tmp$ = BigInteger$Companion_getInstance().negative;
    }
     else {
      tmp$ = BigInteger$Companion_getInstance().positive;
    }
    var sign = tmp$;
    return new BigInteger(BigInteger$Companion_getInstance().arithmetic_0.basicDivide_uzv4wk$(this.magnitude_0, other.magnitude_0).second, sign);
  };
  BigInteger.prototype.divideAndRemainder_rq2muq$ = function (other) {
    var tmp$;
    if (this.sign !== other.sign) {
      tmp$ = BigInteger$Companion_getInstance().negative;
    }
     else {
      tmp$ = BigInteger$Companion_getInstance().positive;
    }
    var sign = tmp$;
    return new Pair(new BigInteger(BigInteger$Companion_getInstance().arithmetic_0.basicDivide_uzv4wk$(this.magnitude_0, other.magnitude_0).first, sign), new BigInteger(BigInteger$Companion_getInstance().arithmetic_0.basicDivide_uzv4wk$(this.magnitude_0, other.magnitude_0).second, sign));
  };
  BigInteger.prototype.compare_rq2muq$ = function (other) {
    if (this.isZero() && other.isZero())
      return 0;
    if (other.isZero())
      return 1;
    if (this.isZero())
      return -1;
    if (this.sign !== other.sign)
      return this.sign === BigInteger$Companion_getInstance().positive ? 1 : -1;
    return BigInteger$Companion_getInstance().arithmetic_0.compare_xwzc9q$(this.magnitude_0, other.magnitude_0);
  };
  BigInteger.prototype.isZero = function () {
    return this.magnitude_0.size === 0;
  };
  BigInteger.prototype.shl_92n1r5$ = function ($receiver, places) {
    return new BigInteger(BigInteger$Companion_getInstance().arithmetic_0.shiftLeft_dpg1yx$($receiver.magnitude_0, places), $receiver.sign);
  };
  BigInteger.prototype.shr_92n1r5$ = function ($receiver, places) {
    return new BigInteger(BigInteger$Companion_getInstance().arithmetic_0.shiftRight_dpg1yx$($receiver.magnitude_0, places), $receiver.sign);
  };
  BigInteger.prototype.plus_r0ggvj$ = function ($receiver, other) {
    return $receiver.add_rq2muq$(other);
  };
  BigInteger.prototype.minus_r0ggvj$ = function ($receiver, other) {
    return $receiver.substract_rq2muq$(other);
  };
  BigInteger.prototype.times_r0ggvj$ = function ($receiver, other) {
    return $receiver.multiply_rq2muq$(other);
  };
  BigInteger.prototype.div_r0ggvj$ = function ($receiver, other) {
    return $receiver.divide_rq2muq$(other);
  };
  BigInteger.prototype.rem_r0ggvj$ = function ($receiver, other) {
    return $receiver.remainder_rq2muq$(other);
  };
  BigInteger.prototype.divrem_r0ggvj$ = function ($receiver, other) {
    return $receiver.divideAndRemainder_rq2muq$(other);
  };
  BigInteger.prototype.compareTo_r0ggvj$ = function ($receiver, other) {
    return $receiver.compare_rq2muq$(other);
  };
  BigInteger.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'BigInteger',
    interfaces: []
  };
  function UIntArray$lambda(closure$init) {
    return function (index) {
      return closure$init(index).data;
    };
  }
  function BigInteger32Arithmetic() {
    BigInteger32Arithmetic_instance = this;
    this.mask = new ULong(new Kotlin.Long(-1, 0));
    this.overflowMask = new ULong(new Kotlin.Long(0, 1));
    this.lowerMask = new ULong(Kotlin.Long.fromInt(65535));
    this.base_8kwvhy$_0 = new UInt(-1);
    this.basePowerOfTwo_tmu9ay$_0 = 32;
    this.ZERO_8fzy4f$_0 = UIntArray_init(0);
    this.ONE_tipyvt$_0 = new UIntArray(Kotlin.fillArray(new Int32Array(1), UIntArray$lambda(BigInteger32Arithmetic$ONE$lambda)));
  }
  Object.defineProperty(BigInteger32Arithmetic.prototype, 'base', {
    get: function () {
      return this.base_8kwvhy$_0;
    }
  });
  Object.defineProperty(BigInteger32Arithmetic.prototype, 'basePowerOfTwo', {
    get: function () {
      return this.basePowerOfTwo_tmu9ay$_0;
    }
  });
  Object.defineProperty(BigInteger32Arithmetic.prototype, 'ZERO', {
    get: function () {
      return this.ZERO_8fzy4f$_0;
    }
  });
  Object.defineProperty(BigInteger32Arithmetic.prototype, 'ONE', {
    get: function () {
      return this.ONE_tipyvt$_0;
    }
  });
  BigInteger32Arithmetic.prototype.numberOfLeadingZeroes_11rc$ = function (value) {
    var x = value;
    var y;
    var n = this.basePowerOfTwo;
    y = new UInt(x.data >>> 16);
    if (!(y != null ? y.equals(new UInt(0)) : null)) {
      n = n - 16 | 0;
      x = y;
    }
    y = new UInt(x.data >>> 8);
    if (!(y != null ? y.equals(new UInt(0)) : null)) {
      n = n - 8 | 0;
      x = y;
    }
    y = new UInt(x.data >>> 4);
    if (!(y != null ? y.equals(new UInt(0)) : null)) {
      n = n - 4 | 0;
      x = y;
    }
    y = new UInt(x.data >>> 2);
    if (!(y != null ? y.equals(new UInt(0)) : null)) {
      n = n - 2 | 0;
      x = y;
    }
    y = new UInt(x.data >>> 1);
    if (!(y != null ? y.equals(new UInt(0)) : null)) {
      return n - 2 | 0;
    }
    return n - x.data | 0;
  };
  BigInteger32Arithmetic.prototype.bitLength_11rb$ = function (value) {
    var mostSignificant = value.get_za3lpa$(value.size - 1 | 0);
    return this.bitLength_s87ys9$(mostSignificant) + Kotlin.imul(value.size, this.basePowerOfTwo) | 0;
  };
  BigInteger32Arithmetic.prototype.bitLength_s87ys9$ = function (value) {
    return this.basePowerOfTwo - this.numberOfLeadingZeroes_11rc$(value) | 0;
  };
  var checkIndexOverflow = Kotlin.kotlin.collections.checkIndexOverflow_za3lpa$;
  var copyOfRange = Kotlin.kotlin.collections.copyOfRange_6pxxqk$;
  BigInteger32Arithmetic.prototype.removeLeadingZeroes_rsvixa$ = function (bigInteger) {
    var tmp$;
    var lastIndex = -1;
    var index = 0;
    tmp$ = bigInteger.iterator();
    while (tmp$.hasNext()) {
      var item = tmp$.next();
      checkIndexOverflow(index);
      if (!(item != null ? item.equals(new UInt(0)) : null))
        lastIndex = index;
      index = index + 1 | 0;
    }
    var firstEmpty = lastIndex + 1 | 0;
    if (firstEmpty === -1 || firstEmpty === 0) {
      return this.ZERO;
    }
    return new UIntArray(copyOfRange(bigInteger.storage, 0, firstEmpty));
  };
  function BigInteger32Arithmetic$shiftLeft$lambda(closure$shiftWords, closure$operand) {
    return function (it) {
      if (0 <= it && it < closure$shiftWords)
        return new UInt(0);
      else
        return closure$operand.get_za3lpa$(it - closure$shiftWords | 0);
    };
  }
  function BigInteger32Arithmetic$shiftLeft$lambda_0(closure$shiftWords, closure$operand, closure$shiftBits, this$BigInteger32Arithmetic, closure$originalSize, closure$wordsNeeded) {
    return function (it) {
      if (0 <= it && it < closure$shiftWords)
        return new UInt(0);
      else if (it === closure$shiftWords) {
        var $this = closure$operand.get_za3lpa$(it - closure$shiftWords | 0);
        var bitCount = closure$shiftBits;
        return new UInt($this.data << bitCount);
      }
       else if ((closure$shiftWords + 1 | 0) <= it && it < (closure$originalSize + closure$shiftWords | 0)) {
        var $this_0 = closure$operand.get_za3lpa$(it - closure$shiftWords | 0);
        var bitCount_0 = closure$shiftBits;
        var tmp$ = new UInt($this_0.data << bitCount_0);
        var $this_1 = closure$operand.get_za3lpa$(it - closure$shiftWords - 1 | 0);
        var bitCount_1 = this$BigInteger32Arithmetic.basePowerOfTwo - closure$shiftBits | 0;
        var other = new UInt($this_1.data >>> bitCount_1);
        return new UInt(tmp$.data | other.data);
      }
       else if (it === (closure$originalSize + closure$wordsNeeded - 1 | 0)) {
        var $this_2 = closure$operand.get_za3lpa$(it - closure$wordsNeeded | 0);
        var bitCount_2 = this$BigInteger32Arithmetic.basePowerOfTwo - closure$shiftBits | 0;
        return new UInt($this_2.data >>> bitCount_2);
      }
       else {
        throw RuntimeException_init('Invalid case ' + it);
      }
    };
  }
  BigInteger32Arithmetic.prototype.shiftLeft_dpg1yx$ = function (operand, places) {
    var tmp$;
    if (operand.isEmpty() || places === 0) {
      return operand;
    }
    var originalSize = operand.size;
    var leadingZeroes = this.numberOfLeadingZeroes_11rc$(operand.get_za3lpa$(operand.size - 1 | 0));
    var shiftWords = places / this.basePowerOfTwo | 0;
    var shiftBits = places % this.basePowerOfTwo;
    if (shiftBits > leadingZeroes) {
      tmp$ = shiftWords + 1 | 0;
    }
     else {
      tmp$ = shiftWords;
    }
    var wordsNeeded = tmp$;
    if (shiftBits === 0) {
      var size = operand.size + wordsNeeded | 0;
      return new UIntArray(Kotlin.fillArray(new Int32Array(size), UIntArray$lambda(BigInteger32Arithmetic$shiftLeft$lambda(shiftWords, operand))));
    }
    var size_0 = operand.size + wordsNeeded | 0;
    return new UIntArray(Kotlin.fillArray(new Int32Array(size_0), UIntArray$lambda(BigInteger32Arithmetic$shiftLeft$lambda_0(shiftWords, operand, shiftBits, this, originalSize, wordsNeeded))));
  };
  function BigInteger32Arithmetic$shiftRight$lambda(closure$operand, closure$wordsToDiscard, closure$shiftBits, this$BigInteger32Arithmetic) {
    return function (it) {
      if (it >= 0 && it <= (closure$operand.size - 2 - closure$wordsToDiscard | 0)) {
        var $this = closure$operand.get_za3lpa$(it + closure$wordsToDiscard | 0);
        var bitCount = closure$shiftBits;
        var tmp$ = new UInt($this.data >>> bitCount);
        var $this_0 = closure$operand.get_za3lpa$(it + closure$wordsToDiscard + 1 | 0);
        var bitCount_0 = this$BigInteger32Arithmetic.basePowerOfTwo - closure$shiftBits | 0;
        var other = new UInt($this_0.data << bitCount_0);
        return new UInt(tmp$.data | other.data);
      }
       else if (it === (closure$operand.size - 1 - closure$wordsToDiscard | 0)) {
        var $this_1 = closure$operand.get_za3lpa$(it + closure$wordsToDiscard | 0);
        var bitCount_1 = closure$shiftBits;
        return new UInt($this_1.data >>> bitCount_1);
      }
       else {
        throw RuntimeException_init('Invalid case ' + it);
      }
    };
  }
  BigInteger32Arithmetic.prototype.shiftRight_dpg1yx$ = function (operand, places) {
    var tmp$;
    if (operand.isEmpty() || places === 0) {
      return operand;
    }
    var transfer = new UInt(0);
    var leadingZeroes = this.numberOfLeadingZeroes_11rc$(operand.get_za3lpa$(operand.size - 1 | 0));
    var shiftWords = places / this.basePowerOfTwo | 0;
    var shiftBits = places % this.basePowerOfTwo;
    if (shiftBits >= (this.basePowerOfTwo - leadingZeroes | 0)) {
      tmp$ = shiftWords + 1 | 0;
    }
     else {
      tmp$ = shiftWords;
    }
    var wordsToDiscard = tmp$;
    if (wordsToDiscard >= operand.size) {
      return this.ZERO;
    }
    if (shiftBits === 0) {
      var fromIndex = operand.size - wordsToDiscard | 0;
      var toIndex = operand.size;
      new UIntArray(copyOfRange(operand.storage, fromIndex, toIndex));
    }
    var size = operand.size - wordsToDiscard | 0;
    return new UIntArray(Kotlin.fillArray(new Int32Array(size), UIntArray$lambda(BigInteger32Arithmetic$shiftRight$lambda(operand, wordsToDiscard, shiftBits, this))));
  };
  BigInteger32Arithmetic.prototype.normalize_uzv4wk$ = function (dividend, divisor) {
    var dividendSize = dividend.size;
    var divisorSize = divisor.size;
    var normalizationShift = this.numberOfLeadingZeroes_11rc$(divisor.get_za3lpa$(divisorSize - 1 | 0));
    var divisorNormalized = this.shl_ap2q72$(divisor, normalizationShift);
    var dividendNormalized = this.shl_ap2q72$(dividend, normalizationShift);
    return new Triple(dividendNormalized, divisorNormalized, normalizationShift);
  };
  BigInteger32Arithmetic.prototype.normalize_rsvixa$ = function (operand) {
    var normalizationShift = this.numberOfLeadingZeroes_11rc$(operand.get_za3lpa$(operand.size - 1 | 0));
    return new Pair(this.shl_ap2q72$(operand, normalizationShift), normalizationShift);
  };
  BigInteger32Arithmetic.prototype.denormalize_vxzh8$ = function (remainderNormalized, normalizationShift) {
    var remainder = this.shr_ap2q72$(remainderNormalized, normalizationShift);
    return remainder;
  };
  var uintCompare = Kotlin.kotlin.uintCompare_vux9f0$;
  BigInteger32Arithmetic.prototype.compare_xwzc9q$ = function (first, second) {
    if (first.size > second.size) {
      return 1;
    }
    if (second.size > first.size) {
      return -1;
    }
    var counter = first.size - 1 | 0;
    var firstIsLarger = false;
    var bothAreEqual = true;
    while (counter >= 0) {
      var $this = first.get_za3lpa$(counter);
      var other = second.get_za3lpa$(counter);
      if (uintCompare($this.data, other.data) > 0) {
        firstIsLarger = true;
        bothAreEqual = false;
        break;
      }
      var $this_0 = first.get_za3lpa$(counter);
      var other_0 = second.get_za3lpa$(counter);
      if (uintCompare($this_0.data, other_0.data) < 0) {
        firstIsLarger = false;
        bothAreEqual = false;
        break;
      }
      counter = counter - 1 | 0;
    }
    if (bothAreEqual) {
      return 0;
    }
    if (firstIsLarger) {
      return 1;
    }
     else {
      return -1;
    }
  };
  function BigInteger32Arithmetic$addition$lambda(index) {
    return new UInt(0);
  }
  var L4294967295 = new Kotlin.Long(-1, 0);
  BigInteger32Arithmetic.prototype.addition_xwzc9q$ = function (first, second) {
    var tmp$, tmp$_0, tmp$_1, tmp$_2, tmp$_3;
    if (first.size === 1 && ((tmp$ = first.get_za3lpa$(0)) != null ? tmp$.equals(new UInt(0)) : null))
      return second;
    if (second.size === 1 && ((tmp$_0 = second.get_za3lpa$(0)) != null ? tmp$_0.equals(new UInt(0)) : null))
      return first;
    if (first.size > second.size) {
      tmp$_1 = new Quadruple(first.size, second.size, first, second);
    }
     else {
      tmp$_1 = new Quadruple(second.size, first.size, second, first);
    }
    var tmp$_4 = tmp$_1;
    var maxLength = tmp$_4.component1()
    , minLength = tmp$_4.component2()
    , largerData = tmp$_4.component3()
    , smallerData = tmp$_4.component4();
    var size = maxLength + 1 | 0;
    var result = new UIntArray(Kotlin.fillArray(new Int32Array(size), UIntArray$lambda(BigInteger32Arithmetic$addition$lambda)));
    var i = 0;
    var sum = new ULong(Kotlin.Long.ZERO);
    while (i < minLength) {
      var $this = sum;
      var other = largerData.get_za3lpa$(i);
      var $this_0 = new ULong($this.data.add((new ULong(Kotlin.Long.fromInt(other.data).and(L4294967295))).data));
      var other_0 = smallerData.get_za3lpa$(i);
      sum = new ULong($this_0.data.add((new ULong(Kotlin.Long.fromInt(other_0.data).and(L4294967295))).data));
      var tmp$_5 = i;
      var $this_1 = sum;
      var other_1 = this.mask;
      result.set_6sqrdv$(tmp$_5, new UInt((new ULong($this_1.data.and(other_1.data))).data.toInt()));
      var $this_2 = sum;
      var bitCount = this.basePowerOfTwo;
      sum = new ULong($this_2.data.shiftRightUnsigned(bitCount));
      i = i + 1 | 0;
    }
    while (true) {
      if (sum != null ? sum.equals(new ULong(Kotlin.Long.ZERO)) : null) {
        while (i < maxLength) {
          result.set_6sqrdv$(i, largerData.get_za3lpa$(i));
          i = i + 1 | 0;
        }
        if ((tmp$_2 = result.get_za3lpa$(result.size - 1 | 0)) != null ? tmp$_2.equals(new UInt(0)) : null) {
          var toIndex = result.size - 1 | 0;
          tmp$_3 = new UIntArray(copyOfRange(result.storage, 0, toIndex));
        }
         else {
          tmp$_3 = result;
        }
        return tmp$_3;
      }
      if (i === maxLength) {
        result.set_6sqrdv$(maxLength, new UInt(sum.data.toInt()));
        return result;
      }
      var $this_3 = sum;
      var other_2 = largerData.get_za3lpa$(i);
      sum = new ULong($this_3.data.add((new ULong(Kotlin.Long.fromInt(other_2.data).and(L4294967295))).data));
      var $this_4 = sum;
      var bitCount_0 = this.basePowerOfTwo;
      sum = new ULong($this_4.data.shiftRightUnsigned(bitCount_0));
    }
  };
  function BigInteger32Arithmetic$substract$lambda(index) {
    return new UInt(0);
  }
  var ArrayList_init = Kotlin.kotlin.collections.ArrayList_init_287e2$;
  BigInteger32Arithmetic.prototype.substract_xwzc9q$ = function (first, second) {
    var tmp$, tmp$_0;
    var firstIsLarger = this.compare_xwzc9q$(first, second) === 1;
    if (firstIsLarger) {
      tmp$ = new Quadruple(first.size, second.size, first, second);
    }
     else {
      tmp$ = new Quadruple(second.size, first.size, second, first);
    }
    var tmp$_1 = tmp$;
    var largerLength = tmp$_1.component1()
    , smallerLength = tmp$_1.component2()
    , largerData = tmp$_1.component3()
    , smallerData = tmp$_1.component4();
    var size = largerLength + 1 | 0;
    var result = new UIntArray(Kotlin.fillArray(new Int32Array(size), UIntArray$lambda(BigInteger32Arithmetic$substract$lambda)));
    var i = 0;
    var diff = new ULong(Kotlin.Long.ZERO);
    while (i < smallerLength) {
      var $this = largerData.get_za3lpa$(i).toULong();
      var other = smallerData.get_za3lpa$(i);
      var $this_0 = new ULong($this.data.subtract((new ULong(Kotlin.Long.fromInt(other.data).and(L4294967295))).data));
      var other_0 = diff;
      diff = new ULong($this_0.data.subtract(other_0.data));
      result.set_6sqrdv$(i, new UInt(diff.data.toInt()));
      var $this_1 = diff;
      var other_1 = this.overflowMask;
      var $this_2 = new ULong($this_1.data.and(other_1.data));
      var bitCount = this.basePowerOfTwo;
      diff = new ULong($this_2.data.shiftRightUnsigned(bitCount));
      i = i + 1 | 0;
    }
    while (!(diff != null ? diff.equals(new ULong(Kotlin.Long.ZERO)) : null)) {
      var $this_3 = largerData.get_za3lpa$(i);
      var $this_4 = new ULong(Kotlin.Long.fromInt($this_3.data).and(L4294967295));
      var other_2 = diff;
      diff = new ULong($this_4.data.subtract(other_2.data));
      var $this_5 = diff;
      var other_3 = this.overflowMask;
      var $this_6 = new ULong($this_5.data.and(other_3.data));
      var bitCount_0 = this.basePowerOfTwo;
      if ((tmp$_0 = new ULong($this_6.data.shiftRightUnsigned(bitCount_0))) != null ? tmp$_0.equals(new ULong(Kotlin.Long.ONE)) : null) {
        var tmp$_2 = i;
        var $this_7 = diff;
        var other_4 = new ULong(Kotlin.Long.ONE);
        result.set_6sqrdv$(tmp$_2, new UInt((new ULong($this_7.data.subtract(other_4.data))).data.toInt()));
      }
       else {
        result.set_6sqrdv$(i, new UInt(diff.data.toInt()));
        diff = new ULong(Kotlin.Long.ZERO);
      }
      diff = new ULong(diff.data.shiftRightUnsigned(63));
      i = i + 1 | 0;
    }
    while (i < largerLength) {
      result.set_6sqrdv$(i, largerData.get_za3lpa$(i));
      i = i + 1 | 0;
    }
    var destination = ArrayList_init();
    var tmp$_3;
    tmp$_3 = result.iterator();
    while (tmp$_3.hasNext()) {
      var element = tmp$_3.next();
      if (element != null ? element.equals(new UInt(0)) : null)
        destination.add_11rb$(element);
    }
    if (destination.isEmpty()) {
      return this.ZERO;
    }
    var tmp$_4;
    var lastIndex = -1;
    var index = 0;
    tmp$_4 = result.iterator();
    while (tmp$_4.hasNext()) {
      var item = tmp$_4.next();
      checkIndexOverflow(index);
      if (!(item != null ? item.equals(new UInt(0)) : null))
        lastIndex = index;
      index = index + 1 | 0;
    }
    var firstEmpty = lastIndex + 1 | 0;
    return new UIntArray(copyOfRange(result.storage, 0, firstEmpty));
  };
  BigInteger32Arithmetic.prototype.multiply_oqfnby$ = function (first, second) {
    var result = new UInt(Kotlin.imul(first.data, second.data));
    var bitCount = this.basePowerOfTwo;
    var high = new UInt(result.data >>> bitCount);
    var low = result;
    return this.removeLeadingZeroes_rsvixa$(new UIntArray(new Int32Array([low.toInt(), high.toInt()])));
  };
  BigInteger32Arithmetic.prototype.multiply_rigg6l$ = function (first, second) {
    var tmp$;
    var result = UIntArray_init(first.size + 1 | 0);
    var product = new ULong(Kotlin.Long.ZERO);
    var sum = new ULong(Kotlin.Long.ZERO);
    tmp$ = first.size;
    for (var i = 0; i < tmp$; i++) {
      var $this = first.get_za3lpa$(i);
      product = new ULong((new ULong(Kotlin.Long.fromInt($this.data).and(L4294967295))).data.multiply((new ULong(Kotlin.Long.fromInt(second.data).and(L4294967295))).data));
      var $this_0 = result.get_za3lpa$(i);
      var tmp$_0 = new ULong(Kotlin.Long.fromInt($this_0.data).and(L4294967295));
      var $this_1 = product;
      var other = this.mask;
      var other_0 = new UInt((new ULong($this_1.data.and(other.data))).data.toInt());
      sum = new ULong(tmp$_0.data.add((new ULong(Kotlin.Long.fromInt(other_0.data).and(L4294967295))).data));
      var $this_2 = sum;
      var other_1 = this.mask;
      result.set_6sqrdv$(i, new UInt((new ULong($this_2.data.and(other_1.data))).data.toInt()));
      var $this_3 = sum;
      var bitCount = this.basePowerOfTwo;
      sum = new ULong($this_3.data.shiftRightUnsigned(bitCount));
      var tmp$_1 = i + 1 | 0;
      var $this_4 = product;
      var bitCount_0 = this.basePowerOfTwo;
      var tmp$_2 = new UInt((new ULong($this_4.data.shiftRightUnsigned(bitCount_0))).data.toInt());
      var other_2 = new UInt(sum.data.toInt());
      result.set_6sqrdv$(tmp$_1, new UInt(tmp$_2.data + other_2.data | 0));
    }
    return this.removeLeadingZeroes_rsvixa$(result);
  };
  BigInteger32Arithmetic.prototype.multiply_xwzc9q$ = function (first, second) {
    var tmp$, tmp$_0;
    var index = 0;
    var accumulator = this.ZERO;
    tmp$ = second.iterator();
    while (tmp$.hasNext()) {
      var element = tmp$.next();
      var index_0 = checkIndexOverflow((tmp$_0 = index, index = tmp$_0 + 1 | 0, tmp$_0));
      accumulator = this.plus_daxkpa$(accumulator, this.shl_ap2q72$(this.multiply_rigg6l$(first, element), Kotlin.imul(index_0, this.basePowerOfTwo)));
    }
    return accumulator;
  };
  BigInteger32Arithmetic.prototype.divide_xwzc9q$ = function (first, second) {
    return this.basicDivide_uzv4wk$(first, second);
  };
  BigInteger32Arithmetic.prototype.divide_rigg6l$ = function (first, second) {
    return this.basicDivide_uzv4wk$(first, new UIntArray(new Int32Array([second.toInt()])));
  };
  var uintDivide = Kotlin.kotlin.uintDivide_oqfnby$;
  var uintRemainder = Kotlin.kotlin.uintRemainder_oqfnby$;
  var ulongDivide = Kotlin.kotlin.ulongDivide_jpm79w$;
  var ulongCompare = Kotlin.kotlin.ulongCompare_3pjtqy$;
  BigInteger32Arithmetic.prototype.basicDivide_uzv4wk$ = function (unnormalizedDividend, unnormalizedDivisor) {
    if (this.compareTo_daxkpa$(unnormalizedDivisor, unnormalizedDividend) > 0) {
      return new Pair(new UIntArray(new Int32Array([(new UInt(0)).toInt()])), unnormalizedDividend);
    }
    if (unnormalizedDivisor.size === 1 && unnormalizedDividend.size === 1) {
      return new Pair(new UIntArray(new Int32Array([uintDivide(unnormalizedDividend.get_za3lpa$(0), unnormalizedDivisor.get_za3lpa$(0)).toInt()])), new UIntArray(new Int32Array([uintRemainder(unnormalizedDividend.get_za3lpa$(0), unnormalizedDivisor.get_za3lpa$(0)).toInt()])));
    }
    var bitPrecision = this.bitLength_11rb$(unnormalizedDividend) - this.bitLength_11rb$(unnormalizedDivisor) | 0;
    if (bitPrecision === 0) {
      return new Pair(new UIntArray(new Int32Array([(new UInt(1)).toInt()])), this.minus_daxkpa$(unnormalizedDividend, unnormalizedDivisor));
    }
    var tmp$ = this.normalize_uzv4wk$(unnormalizedDividend, unnormalizedDivisor);
    var dividend = tmp$.component1()
    , divisor = tmp$.component2()
    , normalizationShift = tmp$.component3();
    var dividendSize = dividend.size;
    var divisorSize = divisor.size;
    var wordPrecision = dividendSize - divisorSize | 0;
    var qjhat = new ULong(Kotlin.Long.ZERO);
    var reconstructedQuotient;
    var quotient = UIntArray_init(wordPrecision);
    var divisorTimesBaseToPowerOfM = this.shl_ap2q72$(divisor, Kotlin.imul(wordPrecision, this.basePowerOfTwo));
    if (this.compareTo_daxkpa$(dividend, divisorTimesBaseToPowerOfM) >= 0) {
      quotient = UIntArray_init(wordPrecision + 1 | 0);
      quotient.set_6sqrdv$(wordPrecision, new UInt(1));
      dividend = this.minus_daxkpa$(dividend, divisorTimesBaseToPowerOfM);
    }
    for (var j = wordPrecision - 1 | 0; j >= 0; j--) {
      var $this = dividend.get_za3lpa$(divisorSize + j | 0).toULong();
      var bitCount = this.basePowerOfTwo;
      var $this_0 = new ULong($this.data.shiftLeft(bitCount));
      var other = dividend.get_za3lpa$(divisorSize + j - 1 | 0);
      var $this_1 = new ULong($this_0.data.add((new ULong(Kotlin.Long.fromInt(other.data).and(L4294967295))).data));
      var other_0 = divisor.get_za3lpa$(divisorSize - 1 | 0);
      qjhat = ulongDivide($this_1, new ULong(Kotlin.Long.fromInt(other_0.data).and(L4294967295)));
      var tmp$_0 = quotient;
      var tmp$_1 = qjhat;
      var tmp$_2;
      var $this_2 = this.base;
      var other_1 = new ULong(Kotlin.Long.ONE);
      var other_2 = new ULong((new ULong(Kotlin.Long.fromInt($this_2.data).and(L4294967295))).data.subtract(other_1.data));
      if (ulongCompare(tmp$_1.data, other_2.data) < 0) {
        tmp$_2 = new UInt(qjhat.data.toInt());
      }
       else {
        var $this_3 = this.base;
        var other_3 = new UInt(1);
        tmp$_2 = new UInt($this_3.data - other_3.data | 0);
      }
      tmp$_0.set_6sqrdv$(j, tmp$_2);
      reconstructedQuotient = this.shl_ap2q72$(this.times_nkem5j$(divisor, quotient.get_za3lpa$(j)), Kotlin.imul(j, this.basePowerOfTwo));
      while (this.compareTo_daxkpa$(reconstructedQuotient, dividend) > 0) {
        var tmp$_3 = quotient;
        var $this_4 = quotient.get_za3lpa$(j);
        var other_4 = new UInt(1);
        tmp$_3.set_6sqrdv$(j, new UInt($this_4.data - other_4.data | 0));
        reconstructedQuotient = this.shl_ap2q72$(this.times_nkem5j$(divisor, quotient.get_za3lpa$(j)), Kotlin.imul(j, this.basePowerOfTwo));
      }
      dividend = this.minus_daxkpa$(dividend, reconstructedQuotient);
    }
    var denormRemainder = this.denormalize_vxzh8$(dividend, normalizationShift);
    return new Pair(quotient, denormRemainder);
  };
  var NotImplementedError_init = Kotlin.kotlin.NotImplementedError;
  BigInteger32Arithmetic.prototype.baseReciprocal_vxzh8$ = function (unnomrmalizedOperand, precision) {
    var tmp$ = this.normalize_rsvixa$(unnomrmalizedOperand);
    var operand = tmp$.component1()
    , normalizationShift = tmp$.component2();
    var operandSize = operand.size;
    if (operandSize <= 2) {
      return this.minus_nkem5j$(this.div_daxkpa$(this.shl_ap2q72$(new UIntArray(new Int32Array([(new UInt(1)).toInt()])), 2 * this.basePowerOfTwo | 0), operand), new UInt(1));
    }
    throw new NotImplementedError_init();
  };
  BigInteger32Arithmetic.prototype.shl_ap2q72$ = function ($receiver, places) {
    return this.shiftLeft_dpg1yx$($receiver, places);
  };
  BigInteger32Arithmetic.prototype.shr_ap2q72$ = function ($receiver, places) {
    return this.shiftRight_dpg1yx$($receiver, places);
  };
  BigInteger32Arithmetic.prototype.plus_daxkpa$ = function ($receiver, other) {
    return this.addition_xwzc9q$($receiver, other);
  };
  BigInteger32Arithmetic.prototype.minus_daxkpa$ = function ($receiver, other) {
    return this.substract_xwzc9q$($receiver, other);
  };
  BigInteger32Arithmetic.prototype.times_daxkpa$ = function ($receiver, other) {
    return this.multiply_xwzc9q$($receiver, other);
  };
  BigInteger32Arithmetic.prototype.plus_nkem5j$ = function ($receiver, other) {
    return this.addition_xwzc9q$($receiver, new UIntArray(new Int32Array([other.toInt()])));
  };
  BigInteger32Arithmetic.prototype.minus_nkem5j$ = function ($receiver, other) {
    return this.substract_xwzc9q$($receiver, new UIntArray(new Int32Array([other.toInt()])));
  };
  BigInteger32Arithmetic.prototype.times_nkem5j$ = function ($receiver, other) {
    return this.multiply_rigg6l$($receiver, other);
  };
  BigInteger32Arithmetic.prototype.div_nkem5j$ = function ($receiver, other) {
    return this.basicDivide_uzv4wk$($receiver, new UIntArray(new Int32Array([other.toInt()]))).first;
  };
  BigInteger32Arithmetic.prototype.rem_nkem5j$ = function ($receiver, other) {
    return this.basicDivide_uzv4wk$($receiver, new UIntArray(new Int32Array([other.toInt()]))).second;
  };
  BigInteger32Arithmetic.prototype.div_daxkpa$ = function ($receiver, other) {
    return this.basicDivide_uzv4wk$($receiver, other).first;
  };
  BigInteger32Arithmetic.prototype.rem_daxkpa$ = function ($receiver, other) {
    return this.basicDivide_uzv4wk$($receiver, other).second;
  };
  BigInteger32Arithmetic.prototype.divrem_daxkpa$ = function ($receiver, other) {
    return this.basicDivide_uzv4wk$($receiver, other);
  };
  BigInteger32Arithmetic.prototype.compareTo_daxkpa$ = function ($receiver, other) {
    return this.compare_xwzc9q$($receiver, other);
  };
  BigInteger32Arithmetic.prototype.compareTo_nkem5j$ = function ($receiver, other) {
    return this.compare_xwzc9q$($receiver, new UIntArray(new Int32Array([other.toInt()])));
  };
  function BigInteger32Arithmetic$ONE$lambda(it) {
    return new UInt(1);
  }
  BigInteger32Arithmetic.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'BigInteger32Arithmetic',
    interfaces: [BigIntegerArithmetic]
  };
  var BigInteger32Arithmetic_instance = null;
  function BigInteger32Arithmetic_getInstance() {
    if (BigInteger32Arithmetic_instance === null) {
      new BigInteger32Arithmetic();
    }
    return BigInteger32Arithmetic_instance;
  }
  function BigInteger63Arithmetic() {
    BigInteger63Arithmetic_instance = this;
  }
  Object.defineProperty(BigInteger63Arithmetic.prototype, 'ZERO', {
    get: function () {
      throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented yet');
    }
  });
  Object.defineProperty(BigInteger63Arithmetic.prototype, 'ONE', {
    get: function () {
      throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented yet');
    }
  });
  Object.defineProperty(BigInteger63Arithmetic.prototype, 'base', {
    get: function () {
      throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented yet');
    }
  });
  Object.defineProperty(BigInteger63Arithmetic.prototype, 'basePowerOfTwo', {
    get: function () {
      throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented yet');
    }
  });
  BigInteger63Arithmetic.prototype.numberOfLeadingZeroes_11rc$ = function (value) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented yet');
  };
  BigInteger63Arithmetic.prototype.bitLength_11rb$ = function (value) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented yet');
  };
  BigInteger63Arithmetic.prototype.shiftLeft_dpg1yx$ = function (operand, places) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented yet');
  };
  BigInteger63Arithmetic.prototype.shiftRight_dpg1yx$ = function (operand, places) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented yet');
  };
  BigInteger63Arithmetic.prototype.compare_xwzc9q$ = function (first, second) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented yet');
  };
  BigInteger63Arithmetic.prototype.addition_xwzc9q$ = function (first, second) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented yet');
  };
  BigInteger63Arithmetic.prototype.substract_xwzc9q$ = function (first, second) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented yet');
  };
  BigInteger63Arithmetic.prototype.multiply_xwzc9q$ = function (first, second) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented yet');
  };
  BigInteger63Arithmetic.prototype.divide_xwzc9q$ = function (first, second) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented yet');
  };
  BigInteger63Arithmetic.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'BigInteger63Arithmetic',
    interfaces: [BigIntegerArithmetic]
  };
  var BigInteger63Arithmetic_instance = null;
  function BigInteger63Arithmetic_getInstance() {
    if (BigInteger63Arithmetic_instance === null) {
      new BigInteger63Arithmetic();
    }
    return BigInteger63Arithmetic_instance;
  }
  function BigIntegerArithmetic() {
  }
  BigIntegerArithmetic.$metadata$ = {
    kind: Kind_INTERFACE,
    simpleName: 'BigIntegerArithmetic',
    interfaces: []
  };
  var chosenArithmetic;
  function Quadruple(a, b, c, d) {
    this.a = a;
    this.b = b;
    this.c = c;
    this.d = d;
  }
  Quadruple.$metadata$ = {
    kind: Kind_CLASS,
    simpleName: 'Quadruple',
    interfaces: []
  };
  Quadruple.prototype.component1 = function () {
    return this.a;
  };
  Quadruple.prototype.component2 = function () {
    return this.b;
  };
  Quadruple.prototype.component3 = function () {
    return this.c;
  };
  Quadruple.prototype.component4 = function () {
    return this.d;
  };
  Quadruple.prototype.copy_18alr2$ = function (a, b, c, d) {
    return new Quadruple(a === void 0 ? this.a : a, b === void 0 ? this.b : b, c === void 0 ? this.c : c, d === void 0 ? this.d : d);
  };
  Quadruple.prototype.toString = function () {
    return 'Quadruple(a=' + Kotlin.toString(this.a) + (', b=' + Kotlin.toString(this.b)) + (', c=' + Kotlin.toString(this.c)) + (', d=' + Kotlin.toString(this.d)) + ')';
  };
  Quadruple.prototype.hashCode = function () {
    var result = 0;
    result = result * 31 + Kotlin.hashCode(this.a) | 0;
    result = result * 31 + Kotlin.hashCode(this.b) | 0;
    result = result * 31 + Kotlin.hashCode(this.c) | 0;
    result = result * 31 + Kotlin.hashCode(this.d) | 0;
    return result;
  };
  Quadruple.prototype.equals = function (other) {
    return this === other || (other !== null && (typeof other === 'object' && (Object.getPrototypeOf(this) === Object.getPrototypeOf(other) && (Kotlin.equals(this.a, other.a) && Kotlin.equals(this.b, other.b) && Kotlin.equals(this.c, other.c) && Kotlin.equals(this.d, other.d)))));
  };
  function NativeBigIntegerArithmetic() {
    NativeBigIntegerArithmetic_instance = this;
  }
  Object.defineProperty(NativeBigIntegerArithmetic.prototype, 'ZERO', {
    get: function () {
      throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented yet');
    }
  });
  Object.defineProperty(NativeBigIntegerArithmetic.prototype, 'ONE', {
    get: function () {
      throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented yet');
    }
  });
  Object.defineProperty(NativeBigIntegerArithmetic.prototype, 'base', {
    get: function () {
      throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented yet');
    }
  });
  Object.defineProperty(NativeBigIntegerArithmetic.prototype, 'basePowerOfTwo', {
    get: function () {
      throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented yet');
    }
  });
  NativeBigIntegerArithmetic.prototype.numberOfLeadingZeroes_11rc$ = function (value) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented yet');
  };
  NativeBigIntegerArithmetic.prototype.bitLength_11rb$ = function (value) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented yet');
  };
  NativeBigIntegerArithmetic.prototype.shiftLeft_dpg1yx$ = function (operand, places) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented yet');
  };
  NativeBigIntegerArithmetic.prototype.shiftRight_dpg1yx$ = function (operand, places) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented yet');
  };
  NativeBigIntegerArithmetic.prototype.compare_xwzc9q$ = function (first, second) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented yet');
  };
  NativeBigIntegerArithmetic.prototype.addition_xwzc9q$ = function (first, second) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented yet');
  };
  NativeBigIntegerArithmetic.prototype.substract_xwzc9q$ = function (first, second) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented yet');
  };
  NativeBigIntegerArithmetic.prototype.multiply_xwzc9q$ = function (first, second) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented yet');
  };
  NativeBigIntegerArithmetic.prototype.divide_xwzc9q$ = function (first, second) {
    throw new NotImplementedError_init('An operation is not implemented: ' + 'not implemented yet');
  };
  NativeBigIntegerArithmetic.$metadata$ = {
    kind: Kind_OBJECT,
    simpleName: 'NativeBigIntegerArithmetic',
    interfaces: [BigIntegerArithmetic]
  };
  var NativeBigIntegerArithmetic_instance = null;
  function NativeBigIntegerArithmetic_getInstance() {
    if (NativeBigIntegerArithmetic_instance === null) {
      new NativeBigIntegerArithmetic();
    }
    return NativeBigIntegerArithmetic_instance;
  }
  Object.defineProperty(BigInteger, 'Companion', {
    get: BigInteger$Companion_getInstance
  });
  var package$com = _.com || (_.com = {});
  var package$ionspin = package$com.ionspin || (package$com.ionspin = {});
  var package$kotlin = package$ionspin.kotlin || (package$ionspin.kotlin = {});
  var package$biginteger = package$kotlin.biginteger || (package$kotlin.biginteger = {});
  package$biginteger.BigInteger = BigInteger;
  Object.defineProperty(package$biginteger, 'BigInteger32Arithmetic', {
    get: BigInteger32Arithmetic_getInstance
  });
  Object.defineProperty(package$biginteger, 'BigInteger63Arithmetic', {
    get: BigInteger63Arithmetic_getInstance
  });
  package$biginteger.BigIntegerArithmetic = BigIntegerArithmetic;
  Object.defineProperty(package$biginteger, 'chosenArithmetic_8be2vx$', {
    get: function () {
      return chosenArithmetic;
    }
  });
  package$biginteger.Quadruple = Quadruple;
  Object.defineProperty(package$biginteger, 'NativeBigIntegerArithmetic', {
    get: NativeBigIntegerArithmetic_getInstance
  });
  chosenArithmetic = BigInteger32Arithmetic_getInstance();
  Kotlin.defineModule('core', _);
  return _;
}(module.exports, require('kotlin')));

//# sourceMappingURL=core.js.map
